===============================================
     SA MARKETS DIRECTORY - COMPLETE ANALYSIS
     CODE + DATABASE + INFRASTRUCTURE
===============================================
Generated on: Wed Jun  4 04:41:28 UTC 2025
Project: SA Markets Directory
Analysis Type: Full Stack Review

üóÑÔ∏è  POCKETBASE DATABASE ANALYSIS
=============================================

PocketBase URL: http://localhost:8090
Analysis Time: Wed Jun  4 04:41:28 UTC 2025

‚úÖ PocketBase Status: ONLINE

üìã COLLECTIONS OVERVIEW
------------------------

Total Collections: 0

Collection Names:

üìä DETAILED COLLECTION SCHEMAS
================================


========================================

üìÅ PROJECT DIRECTORY STRUCTURE
=============================================

-I [error opening dir]
node_modules|.git|dist|build|coverage [error opening dir]
-a [error opening dir]
--dirsfirst [error opening dir]

0 directories, 0 files

========================================

üìÑ FILE INVENTORY & ANALYSIS
=============================================

File Type Analysis:
-------------------
css       :   2 files (1.4K)
js        :  13 files (109K)
json      :   1 files (27K)
jsx       :  18 files (117K)
log       :   1 files (42K)
svg       :   1 files (4.1K)
txt       :   1 files (4.8K)

üîç CRITICAL FILES CHECK
=============================================

‚úÖ src/App.jsx                              Main application component
‚úÖ src/main.jsx                             Application entry point
‚úÖ src/index.css                            Main stylesheet
‚úÖ src/contexts/AuthContext.jsx             Authentication context
‚úÖ src/components/layout/Layout.jsx         Main layout component
‚úÖ src/components/layout/Header.jsx         Header component
‚úÖ src/components/layout/Footer.jsx         Footer component
‚úÖ src/components/auth/ProtectedRoute.jsx   Route protection
‚úÖ src/pages/Home.jsx                       Home page
‚úÖ src/pages/Login.jsx                      Login page
‚úÖ src/pages/Register.jsx                   Registration page
‚úÖ src/pages/Dashboard.jsx                  User dashboard
‚úÖ src/pages/MarketList.jsx                 Market listing page
‚úÖ src/pages/MarketDetail.jsx               Market detail page
‚úÖ src/services/marketService.js            Market data service
‚úÖ src/services/StallholderService.js       Stallholder service
‚úÖ src/services/ApplicationService.js       Application service
‚úÖ src/lib/pocketbase.js                    PocketBase configuration
‚úÖ src/lib/constants.js                     Application constants
‚úÖ src/utils/security.js                    Security utilities
‚úÖ package.json                             Project dependencies
‚úÖ .env                                     Environment configuration
‚úÖ vite.config.js                           Vite configuration
‚úÖ tailwind.config.js                       Tailwind CSS configuration

üì¶ DEPENDENCIES ANALYSIS
=============================================

Production Dependencies:
------------------------
  @tanstack/react-query: ^5.79.0
  axios: ^1.9.0
  crypto-js: ^4.2.0
  dompurify: ^3.2.6
  lucide-react: ^0.511.0
  pocketbase: ^0.26.0
  react: ^19.1.0
  react-dom: ^19.1.0
  react-router-dom: ^7.6.1
  resend: ^4.5.1
  validator: ^13.15.15
  zxcvbn: ^4.4.2

Development Dependencies:
-------------------------
  @eslint/js: ^9.25.0
  @types/crypto-js: ^4.2.2
  @types/node: ^22.15.29
  @types/react: ^19.1.2
  @types/react-dom: ^19.1.2
  @vitejs/plugin-react: ^4.4.1
  autoprefixer: ^10.4.21
  eslint: ^9.25.0
  eslint-plugin-react-hooks: ^5.2.0
  eslint-plugin-react-refresh: ^0.4.19
  globals: ^16.0.0
  postcss: ^8.5.4
  tailwindcss: ^3.4.17
  vite: ^6.3.5

üåç ENVIRONMENT CONFIGURATION
=============================================

Environment file (.env) found:
------------------------------
VITE_POCKETBASE_URL=http://localhost:8090
# PocketBase Configuration

# Google Maps (we'll add this later)
VITE_GOOGLE_MAPS_API_KEY=***MASKED***

# Email Service (Resend)
VITE_RESEND_API_KEY=***MASKED***
VITE_FROM_EMAIL=noreply@samarkets.com.au

# Security
VITE_ENCRYPTION_KEY=***MASKED***
VITE_JWT_SECRET=***MASKED***

# App Configuration
VITE_APP_NAME=SA Markets Directory
VITE_APP_VERSION=1.0.0
VITE_ENVIRONMENT=development

# URLs
VITE_FRONTEND_URL=http://localhost:5173
VITE_API_URL=http://localhost:8090

# Feature Flags
VITE_ENABLE_2FA=true
VITE_ENABLE_EMAIL_VERIFICATION=true
VITE_ENABLE_AUDIT_LOGGING=true

========================================

üíª SOURCE CODE FILES
=============================================

üìÅ FILE: package.json
   Size: 1.5K | Modified: 2025-06-03
----------------------------------------
     1	{
     2	  "name": "markets-directory",
     3	  "private": true,
     4	  "version": "0.0.0",
     5	  "type": "module",
     6	  "scripts": {
     7	    "dev": "vite",
     8	    "build": "vite build",
     9	    "lint": "eslint .",
    10	    "preview": "vite preview",
    11	    "backend": "cd backend && ./pocketbase serve",
    12	    "backend:windows": "cd backend && ./pocketbase.exe serve",
    13	    "start:dev": "concurrently \"npm run backend\" \"npm run dev\"",
    14	    "db:admin": "open http://localhost:8090/_/",
    15	    "db:backup": "cp -r backend/pb_data backend/pb_data_backup_$(date +%Y%m%d_%H%M%S)",
    16	    "db:status": "curl -s http://localhost:8090/api/health || echo 'PocketBase not running'"
    17	  },
    18	  "dependencies": {
    19	    "@tanstack/react-query": "^5.79.0",
    20	    "axios": "^1.9.0",
    21	    "crypto-js": "^4.2.0",
    22	    "dompurify": "^3.2.6",
    23	    "lucide-react": "^0.511.0",
    24	    "pocketbase": "^0.26.0",
    25	    "react": "^19.1.0",
    26	    "react-dom": "^19.1.0",
    27	    "react-router-dom": "^7.6.1",
    28	    "resend": "^4.5.1",
    29	    "validator": "^13.15.15",
    30	    "zxcvbn": "^4.4.2"
    31	  },
    32	  "devDependencies": {
    33	    "@eslint/js": "^9.25.0",
    34	    "@types/crypto-js": "^4.2.2",
    35	    "@types/node": "^22.15.29",
    36	    "@types/react": "^19.1.2",
    37	    "@types/react-dom": "^19.1.2",
    38	    "@vitejs/plugin-react": "^4.4.1",
    39	    "autoprefixer": "^10.4.21",
    40	    "eslint": "^9.25.0",
    41	    "eslint-plugin-react-hooks": "^5.2.0",
    42	    "eslint-plugin-react-refresh": "^0.4.19",
    43	    "globals": "^16.0.0",
    44	    "postcss": "^8.5.4",
    45	    "tailwindcss": "^3.4.17",
    46	    "vite": "^6.3.5"
    47	  }
    48	}

========================================

üìÅ FILE: .env
   Size: 672 | Modified: 2025-06-03
----------------------------------------
     1	VITE_POCKETBASE_URL=http://localhost:8090
     2	# PocketBase Configuration
     3	
     4	# Google Maps (we'll add this later)
     5	VITE_GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here
     6	
     7	# Email Service (Resend)
     8	VITE_RESEND_API_KEY=your_resend_api_key_here
     9	VITE_FROM_EMAIL=noreply@samarkets.com.au
    10	
    11	# Security
    12	VITE_ENCRYPTION_KEY=dev_key_32_characters_long_12345
    13	VITE_JWT_SECRET=your_jwt_secret_here
    14	
    15	# App Configuration
    16	VITE_APP_NAME=SA Markets Directory
    17	VITE_APP_VERSION=1.0.0
    18	VITE_ENVIRONMENT=development
    19	
    20	# URLs
    21	VITE_FRONTEND_URL=http://localhost:5173
    22	VITE_API_URL=http://localhost:8090
    23	
    24	# Feature Flags
    25	VITE_ENABLE_2FA=true
    26	VITE_ENABLE_EMAIL_VERIFICATION=true
    27	VITE_ENABLE_AUDIT_LOGGING=true

========================================

üìÅ FILE: vite.config.js
   Size: 161 | Modified: 2025-06-02
----------------------------------------
     1	import { defineConfig } from 'vite'
     2	import react from '@vitejs/plugin-react'
     3	
     4	// https://vite.dev/config/
     5	export default defineConfig({
     6	  plugins: [react()],
     7	})

========================================

üìÅ FILE: tailwind.config.js
   Size: 872 | Modified: 2025-06-02
----------------------------------------
     1	/** @type {import('tailwindcss').Config} */
     2	export default {
     3	  content: [
     4	    "./index.html",
     5	    "./src/**/*.{js,ts,jsx,tsx}",
     6	  ],
     7	  theme: {
     8	    extend: {
     9	      colors: {
    10	        primary: {
    11	          50: '#f0f9ff',
    12	          100: '#e0f2fe',
    13	          200: '#bae6fd',
    14	          300: '#7dd3fc',
    15	          400: '#38bdf8',
    16	          500: '#0ea5e9',
    17	          600: '#0284c7',
    18	          700: '#0369a1',
    19	          800: '#075985',
    20	          900: '#0c4a6e',
    21	        },
    22	        secondary: {
    23	          50: '#fefce8',
    24	          100: '#fef9c3',
    25	          200: '#fef08a',
    26	          300: '#fde047',
    27	          400: '#facc15',
    28	          500: '#eab308',
    29	          600: '#ca8a04',
    30	          700: '#a16207',
    31	          800: '#854d0e',
    32	          900: '#713f12',
    33	        }
    34	      },
    35	      fontFamily: {
    36	        sans: ['Inter', 'system-ui', 'sans-serif'],
    37	      },
    38	    },
    39	  },
    40	  plugins: [],
    41	}

========================================

üìÅ FILE: src/main.jsx
   Size: 229 | Modified: 2025-06-02
----------------------------------------
     1	import { StrictMode } from 'react'
     2	import { createRoot } from 'react-dom/client'
     3	import './index.css'
     4	import App from './App.jsx'
     5	
     6	createRoot(document.getElementById('root')).render(
     7	  <StrictMode>
     8	    <App />
     9	  </StrictMode>,
    10	)

========================================

üìÅ FILE: src/App.css
   Size: 606 | Modified: 2025-06-02
----------------------------------------
     1	#root {
     2	  max-width: 1280px;
     3	  margin: 0 auto;
     4	  padding: 2rem;
     5	  text-align: center;
     6	}
     7	
     8	.logo {
     9	  height: 6em;
    10	  padding: 1.5em;
    11	  will-change: filter;
    12	  transition: filter 300ms;
    13	}
    14	.logo:hover {
    15	  filter: drop-shadow(0 0 2em #646cffaa);
    16	}
    17	.logo.react:hover {
    18	  filter: drop-shadow(0 0 2em #61dafbaa);
    19	}
    20	
    21	@keyframes logo-spin {
    22	  from {
    23	    transform: rotate(0deg);
    24	  }
    25	  to {
    26	    transform: rotate(360deg);
    27	  }
    28	}
    29	
    30	@media (prefers-reduced-motion: no-preference) {
    31	  a:nth-of-type(2) .logo {
    32	    animation: logo-spin infinite 20s linear;
    33	  }
    34	}
    35	
    36	.card {
    37	  padding: 2em;
    38	}
    39	
    40	.read-the-docs {
    41	  color: #888;
    42	}

========================================

üìÅ FILE: src/App.jsx
   Size: 3.5K | Modified: 2025-06-03
----------------------------------------
     1	// src/App.jsx - Add CreateMarket route
     2	import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
     3	import { AuthProvider } from './contexts/AuthContext'
     4	import Layout from './components/layout/Layout'
     5	import Home from './pages/Home'
     6	import MarketList from './pages/MarketList'
     7	import MarketDetail from './pages/MarketDetail'
     8	import CreateMarket from './pages/CreateMarket'
     9	import Login from './pages/Login'
    10	import Register from './pages/Register'
    11	import Dashboard from './pages/Dashboard'
    12	import ProtectedRoute from './components/auth/ProtectedRoute'
    13	import './App.css'
    14	
    15	function App() {
    16	  return (
    17	    <AuthProvider>
    18	      <Router>
    19	        <Layout>
    20	          <Routes>
    21	            <Route path="/" element={<Home />} />
    22	            <Route path="/markets" element={<MarketList />} />
    23	            <Route path="/markets/:slug" element={<MarketDetail />} />
    24	            <Route path="/login" element={<Login />} />
    25	            <Route path="/register" element={<Register />} />
    26	            <Route 
    27	              path="/dashboard" 
    28	              element={
    29	                <ProtectedRoute>
    30	                  <Dashboard />
    31	                </ProtectedRoute>
    32	              } 
    33	            />
    34	            <Route 
    35	              path="/markets/create" 
    36	              element={
    37	                <ProtectedRoute requiredRole="organizer">
    38	                  <CreateMarket />
    39	                </ProtectedRoute>
    40	              } 
    41	            />
    42	            {/* Placeholder routes for future features */}
    43	            <Route 
    44	              path="/profile" 
    45	              element={
    46	                <ProtectedRoute>
    47	                  <div className="min-h-screen bg-gray-50 py-8">
    48	                    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    49	                      <h1 className="text-3xl font-bold text-gray-900 mb-4">Profile</h1>
    50	                      <p className="text-gray-600">Profile management coming soon...</p>
    51	                    </div>
    52	                  </div>
    53	                </ProtectedRoute>
    54	              } 
    55	            />
    56	            <Route 
    57	              path="/stallholders" 
    58	              element={
    59	                <div className="min-h-screen bg-gray-50 py-8">
    60	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    61	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Stallholders</h1>
    62	                    <p className="text-gray-600">Stallholder directory coming soon...</p>
    63	                  </div>
    64	                </div>
    65	              } 
    66	            />
    67	            <Route 
    68	              path="/organizers" 
    69	              element={
    70	                <div className="min-h-screen bg-gray-50 py-8">
    71	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Market Organizers</h1>
    73	                    <p className="text-gray-600">Market organizer tools coming soon...</p>
    74	                  </div>
    75	                </div>
    76	              } 
    77	            />
    78	            <Route 
    79	              path="/about" 
    80	              element={
    81	                <div className="min-h-screen bg-gray-50 py-8">
    82	                  <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    83	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">About SA Markets</h1>
    84	                    <p className="text-gray-600">About page coming soon...</p>
    85	                  </div>
    86	                </div>
    87	              } 
    88	            />
    89	          </Routes>
    90	        </Layout>
    91	      </Router>
    92	    </AuthProvider>
    93	  )
    94	}
    95	
    96	export default App

========================================

üìÅ FILE: src/index.css
   Size: 813 | Modified: 2025-06-02
----------------------------------------
     1	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
     2	
     3	@tailwind base;
     4	@tailwind components;
     5	@tailwind utilities;
     6	
     7	@layer base {
     8	  html {
     9	    font-family: 'Inter', system-ui, sans-serif;
    10	  }
    11	}
    12	
    13	@layer components {
    14	  .btn-primary {
    15	    @apply bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    16	  }
    17	  
    18	  .btn-secondary {
    19	    @apply bg-secondary-500 hover:bg-secondary-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    20	  }
    21	  
    22	  .card {
    23	    @apply bg-white rounded-lg shadow-md border border-gray-200 p-6;
    24	  }
    25	  
    26	  .input-field {
    27	    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent;
    28	  }
    29	}

========================================

üìÅ FILE: src/lib/constants.js
   Size: 1.5K | Modified: 2025-06-02
----------------------------------------
     1	export const USER_ROLES = {
     2	  CUSTOMER: 'customer',
     3	  ORGANIZER: 'organizer', 
     4	  STALLHOLDER: 'stallholder'
     5	};
     6	
     7	export const MARKET_FREQUENCIES = {
     8	  DAILY: 'Daily',
     9	  WEEKLY: 'Weekly',
    10	  FIRST_SATURDAY: '1st Saturday',
    11	  FIRST_SUNDAY: '1st Sunday',
    12	  SECOND_SATURDAY: '2nd Saturday',
    13	  SECOND_SUNDAY: '2nd Sunday',
    14	  THIRD_SATURDAY: '3rd Saturday',
    15	  THIRD_SUNDAY: '3rd Sunday',
    16	  FOURTH_SATURDAY: '4th Saturday',
    17	  FOURTH_SUNDAY: '4th Sunday',
    18	  SPECIFIC_DATES: 'Specific Dates',
    19	  SEASONAL: 'Seasonal',
    20	  MONTHLY: 'Monthly'
    21	};
    22	
    23	export const MARKET_CATEGORIES = {
    24	  FARMERS: 'Farmers Market',
    25	  CRAFT: 'Craft & Artisan',
    26	  COMMUNITY: 'Community Market',
    27	  SPECIALTY: 'Specialty Market',
    28	  FOOD: 'Food Market',
    29	  VINTAGE: 'Vintage & Antiques',
    30	  GENERAL: 'General Market'
    31	};
    32	
    33	export const AUSTRALIAN_STATES = {
    34	  SA: 'South Australia',
    35	  VIC: 'Victoria',
    36	  NSW: 'New South Wales',
    37	  QLD: 'Queensland',
    38	  WA: 'Western Australia',
    39	  TAS: 'Tasmania',
    40	  NT: 'Northern Territory',
    41	  ACT: 'Australian Capital Territory'
    42	};
    43	
    44	export const SUBSCRIPTION_TIERS = {
    45	  FREE: 'free',
    46	  BASIC: 'basic',
    47	  PREMIUM: 'premium',
    48	  ENTERPRISE: 'enterprise'
    49	};
    50	
    51	export const APPLICATION_STATUS = {
    52	  PENDING: 'pending',
    53	  APPROVED: 'approved',
    54	  REJECTED: 'rejected',
    55	  WAITLISTED: 'waitlisted'
    56	};
    57	
    58	export const SEARCH_RADIUS_OPTIONS = [
    59	  { value: 5, label: '5 km' },
    60	  { value: 10, label: '10 km' },
    61	  { value: 25, label: '25 km' },
    62	  { value: 50, label: '50 km' },
    63	  { value: 100, label: '100 km' }
    64	];

========================================

üìÅ FILE: src/lib/pocketbase.js
   Size: 1.4K | Modified: 2025-06-02
----------------------------------------
     1	import PocketBase from 'pocketbase';
     2	
     3	const pb = new PocketBase(import.meta.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     4	
     5	// Configure authentication
     6	pb.autoCancellation(false);
     7	
     8	// Export the instance
     9	export default pb;
    10	
    11	// Helper functions for common operations
    12	export const auth = {
    13	  // Login user
    14	  async login(email, password) {
    15	    return await pb.collection('users').authWithPassword(email, password);
    16	  },
    17	
    18	  // Register user
    19	  async register(data) {
    20	    return await pb.collection('users').create(data);
    21	  },
    22	
    23	  // Logout
    24	  logout() {
    25	    pb.authStore.clear();
    26	  },
    27	
    28	  // Get current user
    29	  getCurrentUser() {
    30	    return pb.authStore.model;
    31	  },
    32	
    33	  // Check if user is authenticated
    34	  isAuthenticated() {
    35	    return pb.authStore.isValid;
    36	  },
    37	
    38	  // Subscribe to auth changes
    39	  onChange(callback) {
    40	    return pb.authStore.onChange(callback);
    41	  }
    42	};
    43	
    44	// Helper for handling API errors
    45	export const handlePocketBaseError = (error) => {
    46	  console.error('PocketBase Error:', error);
    47	  
    48	  if (error?.response?.data) {
    49	    // Extract field-specific errors
    50	    const fieldErrors = {};
    51	    Object.entries(error.response.data).forEach(([field, fieldError]) => {
    52	      fieldErrors[field] = fieldError.message || fieldError;
    53	    });
    54	    return fieldErrors;
    55	  }
    56	  
    57	  return { general: error.message || 'An unexpected error occurred' };
    58	};

========================================

üìÅ FILE: src/utils/security.js
   Size: 4.3K | Modified: 2025-06-02
----------------------------------------
     1	// Input validation and sanitization
     2	export const validation = {
     3	  // Australian-specific validation
     4	  validateABN(abn) {
     5	    const cleanABN = abn.replace(/\s/g, '');
     6	    if (!/^\d{11}$/.test(cleanABN)) return false;
     7	    
     8	    // ABN checksum validation
     9	    const weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];
    10	    let sum = 0;
    11	    
    12	    for (let i = 0; i < 11; i++) {
    13	      sum += (parseInt(cleanABN[i]) - (i === 0 ? 1 : 0)) * weights[i];
    14	    }
    15	    
    16	    return sum % 89 === 0;
    17	  },
    18	
    19	  validateAustralianPhone(phone) {
    20	    const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
    21	    const australianPhoneRegex = /^(\+61|0)[2-478](?:[0-9]){8}$/;
    22	    return australianPhoneRegex.test(cleanPhone);
    23	  },
    24	
    25	  validatePostcode(postcode) {
    26	    return /^\d{4}$/.test(postcode);
    27	  },
    28	
    29	  validateEmail(email) {
    30	    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    31	    return emailRegex.test(email) && email.length <= 254;
    32	  },
    33	
    34	  // Password strength validation
    35	  validatePassword(password) {
    36	    const minLength = 12;
    37	    const hasUpperCase = /[A-Z]/.test(password);
    38	    const hasLowerCase = /[a-z]/.test(password);
    39	    const hasNumbers = /\d/.test(password);
    40	    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    41	    
    42	    return {
    43	      isValid: password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar,
    44	      length: password.length >= minLength,
    45	      uppercase: hasUpperCase,
    46	      lowercase: hasLowerCase,
    47	      numbers: hasNumbers,
    48	      special: hasSpecialChar,
    49	      score: [hasUpperCase, hasLowerCase, hasNumbers, hasSpecialChar, password.length >= minLength]
    50	        .filter(Boolean).length
    51	    };
    52	  }
    53	};
    54	
    55	// Data sanitization
    56	export const sanitizer = {
    57	  // Remove potentially dangerous characters
    58	  sanitizeInput(input) {
    59	    if (typeof input !== 'string') return input;
    60	    
    61	    return input
    62	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // Remove script tags
    63	      .replace(/javascript:/gi, '') // Remove javascript: URLs
    64	      .replace(/on\w+=/gi, '') // Remove event handlers
    65	      .replace(/[<>]/g, '') // Remove angle brackets
    66	      .trim();
    67	  },
    68	
    69	  // Sanitize HTML content (for descriptions, etc.)
    70	  sanitizeHTML(html) {
    71	    // In production, use a proper HTML sanitizer like DOMPurify
    72	    const allowedTags = ['p', 'br', 'strong', 'em', 'ul', 'ol', 'li', 'h1', 'h2', 'h3'];
    73	    // For now, just remove script tags and dangerous attributes
    74	    return html
    75	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
    76	      .replace(/on\w+="[^"]*"/gi, '')
    77	      .replace(/javascript:/gi, '');
    78	  },
    79	
    80	  // Sanitize file names
    81	  sanitizeFileName(fileName) {
    82	    return fileName
    83	      .replace(/[^a-zA-Z0-9.\-_]/g, '_')
    84	      .replace(/_{2,}/g, '_')
    85	      .substr(0, 255);
    86	  }
    87	};
    88	
    89	// Rate limiting helper
    90	export const rateLimiter = {
    91	  attempts: new Map(),
    92	
    93	  isAllowed(key, limit = 5, windowMs = 15 * 60 * 1000) { // 5 attempts per 15 minutes
    94	    const now = Date.now();
    95	    const userAttempts = this.attempts.get(key) || [];
    96	    
    97	    // Remove old attempts outside the window
    98	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
    99	    
   100	    if (validAttempts.length >= limit) {
   101	      return false;
   102	    }
   103	    
   104	    // Add current attempt
   105	    validAttempts.push(now);
   106	    this.attempts.set(key, validAttempts);
   107	    
   108	    return true;
   109	  },
   110	
   111	  getRemainingAttempts(key, limit = 5, windowMs = 15 * 60 * 1000) {
   112	    const now = Date.now();
   113	    const userAttempts = this.attempts.get(key) || [];
   114	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
   115	    
   116	    return Math.max(0, limit - validAttempts.length);
   117	  }
   118	};
   119	
   120	// Audit logging
   121	export const auditLogger = {
   122	  log(event, userId, details = {}) {
   123	    const auditEntry = {
   124	      event,
   125	      userId,
   126	      details,
   127	      timestamp: new Date().toISOString(),
   128	      userAgent: navigator.userAgent,
   129	      sessionId: sessionStorage.getItem('session_id') || 'no_session'
   130	    };
   131	
   132	    // In development, log to console
   133	    if (import.meta.env.VITE_ENVIRONMENT === 'development') {
   134	      console.log('AUDIT LOG:', auditEntry);
   135	    }
   136	
   137	    // Store in local storage for debugging (remove in production)
   138	    const logs = JSON.parse(localStorage.getItem('audit_logs') || '[]');
   139	    logs.push(auditEntry);
   140	    localStorage.setItem('audit_logs', JSON.stringify(logs.slice(-100))); // Keep last 100
   141	  }
   142	};

========================================

üìÅ FILE: src/contexts/AuthContext.jsx
   Size: 2.5K | Modified: 2025-06-02
----------------------------------------
     1	import React, { createContext, useContext, useState, useEffect } from 'react';
     2	import pb, { auth, handlePocketBaseError } from '../lib/pocketbase';
     3	
     4	const AuthContext = createContext({});
     5	
     6	export const useAuth = () => {
     7	  const context = useContext(AuthContext);
     8	  if (!context) {
     9	    throw new Error('useAuth must be used within an AuthProvider');
    10	  }
    11	  return context;
    12	};
    13	
    14	export const AuthProvider = ({ children }) => {
    15	  const [user, setUser] = useState(null);
    16	  const [loading, setLoading] = useState(true);
    17	  const [error, setError] = useState(null);
    18	
    19	  useEffect(() => {
    20	    if (pb.authStore.isValid) {
    21	      setUser(pb.authStore.model);
    22	    }
    23	    setLoading(false);
    24	
    25	    const unsubscribe = pb.authStore.onChange((token, model) => {
    26	      setUser(model);
    27	    });
    28	
    29	    return unsubscribe;
    30	  }, []);
    31	
    32	  const login = async (email, password) => {
    33	    try {
    34	      setLoading(true);
    35	      setError(null);
    36	      
    37	      const authData = await auth.login(email, password);
    38	      setUser(authData.record);
    39	      
    40	      return authData;
    41	    } catch (err) {
    42	      const errorData = handlePocketBaseError(err);
    43	      setError(errorData);
    44	      throw errorData;
    45	    } finally {
    46	      setLoading(false);
    47	    }
    48	  };
    49	
    50	  const register = async (userData) => {
    51	    try {
    52	      setLoading(true);
    53	      setError(null);
    54	      
    55	      const user = await auth.register({
    56	        ...userData,
    57	        emailVisibility: true,
    58	        passwordConfirm: userData.password
    59	      });
    60	
    61	      const authData = await auth.login(userData.email, userData.password);
    62	      setUser(authData.record);
    63	      
    64	      return authData;
    65	    } catch (err) {
    66	      const errorData = handlePocketBaseError(err);
    67	      setError(errorData);
    68	      throw errorData;
    69	    } finally {
    70	      setLoading(false);
    71	    }
    72	  };
    73	
    74	  const logout = () => {
    75	    auth.logout();
    76	    setUser(null);
    77	    setError(null);
    78	  };
    79	
    80	  const updateProfile = async (userData) => {
    81	    try {
    82	      setLoading(true);
    83	      setError(null);
    84	      
    85	      const updatedUser = await pb.collection('users').update(user.id, userData);
    86	      setUser(updatedUser);
    87	      
    88	      return updatedUser;
    89	    } catch (err) {
    90	      const errorData = handlePocketBaseError(err);
    91	      setError(errorData);
    92	      throw errorData;
    93	    } finally {
    94	      setLoading(false);
    95	    }
    96	  };
    97	
    98	  const value = {
    99	    user,
   100	    loading,
   101	    error,
   102	    login,
   103	    register,
   104	    logout,
   105	    updateProfile,
   106	    isAuthenticated: !!user
   107	  };
   108	
   109	  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
   110	};

========================================

üìÅ FILE: src/hooks/useApplications.js
   Size: 1.9K | Modified: 2025-06-02
----------------------------------------
     1	// src/hooks/useApplications.js - Fixed import
     2	import { useState, useEffect } from 'react';
     3	import ApplicationService from '../services/ApplicationService.js';
     4	
     5	export const useApplications = (stallholderId, filters = {}) => {
     6	  const [applications, setApplications] = useState([]);
     7	  const [loading, setLoading] = useState(true);
     8	  const [error, setError] = useState(null);
     9	  const [pagination, setPagination] = useState(null);
    10	
    11	  useEffect(() => {
    12	    if (stallholderId) {
    13	      fetchApplications();
    14	    }
    15	  }, [stallholderId, filters]);
    16	
    17	  const fetchApplications = async () => {
    18	    try {
    19	      setLoading(true);
    20	      const result = await ApplicationService.getStallholderApplications(stallholderId, filters);
    21	      setApplications(result.items);
    22	      setPagination({
    23	        page: result.page,
    24	        perPage: result.perPage,
    25	        totalItems: result.totalItems,
    26	        totalPages: result.totalPages
    27	      });
    28	    } catch (err) {
    29	      setError(err.message);
    30	    } finally {
    31	      setLoading(false);
    32	    }
    33	  };
    34	
    35	  const submitApplication = async (applicationData) => {
    36	    try {
    37	      const newApplication = await ApplicationService.submitApplication(applicationData);
    38	      setApplications(prev => [newApplication, ...prev]);
    39	      return newApplication;
    40	    } catch (err) {
    41	      setError(err.message);
    42	      throw err;
    43	    }
    44	  };
    45	
    46	  const cancelApplication = async (applicationId) => {
    47	    try {
    48	      await ApplicationService.cancelApplication(applicationId);
    49	      setApplications(prev => 
    50	        prev.map(app => 
    51	          app.id === applicationId 
    52	            ? { ...app, status: 'cancelled' }
    53	            : app
    54	        )
    55	      );
    56	    } catch (err) {
    57	      setError(err.message);
    58	      throw err;
    59	    }
    60	  };
    61	
    62	  return {
    63	    applications,
    64	    loading,
    65	    error,
    66	    pagination,
    67	    submitApplication,
    68	    cancelApplication,
    69	    refetch: fetchApplications
    70	  };
    71	};

========================================

üìÅ FILE: src/hooks/useStallholder.js
   Size: 2.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/hooks/useStallholder.js - Complete Implementation
     2	import { useState, useEffect } from 'react';
     3	import StallholderService from '../services/StallholderService.js';
     4	import { useAuth } from '../contexts/AuthContext';
     5	
     6	export const useStallholder = () => {
     7	  const [stallholder, setStallholder] = useState(null);
     8	  const [loading, setLoading] = useState(true);
     9	  const [error, setError] = useState(null);
    10	  const { user } = useAuth();
    11	
    12	  useEffect(() => {
    13	    if (user && user.role === 'stallholder') {
    14	      fetchStallholder();
    15	    } else {
    16	      setLoading(false);
    17	    }
    18	  }, [user]);
    19	
    20	  const fetchStallholder = async () => {
    21	    try {
    22	      setLoading(true);
    23	      setError(null);
    24	      
    25	      // Get stallholder profile for current user
    26	      const result = await StallholderService.getStallholders({
    27	        user: user.id
    28	      });
    29	      
    30	      if (result.items.length > 0) {
    31	        setStallholder(result.items[0]);
    32	      }
    33	    } catch (err) {
    34	      console.error('Error fetching stallholder:', err);
    35	      setError(err.message);
    36	    } finally {
    37	      setLoading(false);
    38	    }
    39	  };
    40	
    41	  const updateStallholder = async (data) => {
    42	    try {
    43	      setLoading(true);
    44	      setError(null);
    45	      
    46	      if (!stallholder) {
    47	        throw new Error('No stallholder profile to update');
    48	      }
    49	      
    50	      const updated = await StallholderService.updateStallholder(stallholder.id, data);
    51	      setStallholder(updated);
    52	      return updated;
    53	    } catch (err) {
    54	      console.error('Error updating stallholder:', err);
    55	      setError(err.message);
    56	      throw err;
    57	    } finally {
    58	      setLoading(false);
    59	    }
    60	  };
    61	
    62	  const createStallholder = async (data) => {
    63	    try {
    64	      setLoading(true);
    65	      setError(null);
    66	      
    67	      if (!user) {
    68	        throw new Error('User must be logged in to create stallholder profile');
    69	      }
    70	      
    71	      const created = await StallholderService.createStallholder({
    72	        ...data,
    73	        user: user.id
    74	      });
    75	      
    76	      setStallholder(created);
    77	      return created;
    78	    } catch (err) {
    79	      console.error('Error creating stallholder:', err);
    80	      setError(err.message);
    81	      throw err;
    82	    } finally {
    83	      setLoading(false);
    84	    }
    85	  };
    86	
    87	  return {
    88	    stallholder,
    89	    loading,
    90	    error,
    91	    updateStallholder,
    92	    createStallholder,
    93	    refetch: fetchStallholder,
    94	    hasProfile: !!stallholder
    95	  };
    96	};

========================================

üìÅ FILE: src/services/ApplicationService.js
   Size: 4.5K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/ApplicationService.js - Fix the import and missing methods
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class ApplicationService {
     6	  // Get applications for market organizer
     7	  async getMarketApplications(marketId, filters = {}) {
     8	    try {
     9	      const filterConditions = [`market = "${marketId}"`];
    10	      
    11	      if (filters.status) {
    12	        filterConditions.push(`status = "${filters.status}"`);
    13	      }
    14	
    15	      const result = await pb.collection('applications').getList(
    16	        filters.page || 1,
    17	        filters.perPage || 20,
    18	        {
    19	          filter: filterConditions.join(' && '),
    20	          sort: '-created',
    21	          expand: 'stallholder,stallholder.user,market'
    22	        }
    23	      );
    24	
    25	      return result;
    26	    } catch (error) {
    27	      console.error('Error fetching market applications:', error);
    28	      throw error;
    29	    }
    30	  }
    31	
    32	  // Get applications for stallholder (method that was missing)
    33	  async getStallholderApplications(stallholderId, filters = {}) {
    34	    try {
    35	      const filterConditions = [`stallholder = "${stallholderId}"`];
    36	      
    37	      if (filters.status) {
    38	        filterConditions.push(`status = "${filters.status}"`);
    39	      }
    40	
    41	      const result = await pb.collection('applications').getList(
    42	        filters.page || 1,
    43	        filters.perPage || 20,
    44	        {
    45	          filter: filterConditions.join(' && '),
    46	          sort: '-created',
    47	          expand: 'market,stallholder'
    48	        }
    49	      );
    50	
    51	      return result;
    52	    } catch (error) {
    53	      console.error('Error fetching stallholder applications:', error);
    54	      throw error;
    55	    }
    56	  }
    57	
    58	  // Submit application to market
    59	  async submitApplication(applicationData) {
    60	    try {
    61	      const application = await pb.collection('applications').create({
    62	        ...applicationData,
    63	        status: 'pending',
    64	        payment_status: 'unpaid'
    65	      });
    66	      
    67	      auditLogger.log('application_submitted', pb.authStore.model?.id, {
    68	        applicationId: application.id,
    69	        marketId: applicationData.market,
    70	        stallholderId: applicationData.stallholder
    71	      });
    72	
    73	      return application;
    74	    } catch (error) {
    75	      console.error('Error submitting application:', error);
    76	      throw error;
    77	    }
    78	  }
    79	
    80	  // Update application status
    81	  async updateApplicationStatus(applicationId, status, organizerNotes = '') {
    82	    try {
    83	      const application = await pb.collection('applications').update(applicationId, {
    84	        status,
    85	        organizer_notes: organizerNotes
    86	      });
    87	      
    88	      auditLogger.log('application_status_updated', pb.authStore.model?.id, {
    89	        applicationId,
    90	        newStatus: status
    91	      });
    92	
    93	      return application;
    94	    } catch (error) {
    95	      console.error('Error updating application status:', error);
    96	      throw error;
    97	    }
    98	  }
    99	
   100	  // Get application statistics for market
   101	  async getApplicationStats(marketId) {
   102	    try {
   103	      const applications = await pb.collection('applications').getFullList({
   104	        filter: `market = "${marketId}"`
   105	      });
   106	
   107	      const stats = {
   108	        total: applications.length,
   109	        pending: applications.filter(app => app.status === 'pending').length,
   110	        approved: applications.filter(app => app.status === 'approved').length,
   111	        rejected: applications.filter(app => app.status === 'rejected').length,
   112	        cancelled: applications.filter(app => app.status === 'cancelled').length
   113	      };
   114	
   115	      return stats;
   116	    } catch (error) {
   117	      console.error('Error fetching application stats:', error);
   118	      throw error;
   119	    }
   120	  }
   121	
   122	  // Check if stallholder has existing application for market
   123	  async checkExistingApplication(stallholderId, marketId) {
   124	    try {
   125	      const existing = await pb.collection('applications').getFirstListItem(
   126	        `stallholder = "${stallholderId}" && market = "${marketId}" && status != "cancelled" && status != "rejected"`
   127	      );
   128	      return existing;
   129	    } catch (error) {
   130	      if (error.status === 404) {
   131	        return null; // No existing application
   132	      }
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Cancel application
   138	  async cancelApplication(applicationId) {
   139	    try {
   140	      const application = await pb.collection('applications').update(applicationId, {
   141	        status: 'cancelled'
   142	      });
   143	      
   144	      auditLogger.log('application_cancelled', pb.authStore.model?.id, {
   145	        applicationId
   146	      });
   147	
   148	      return application;
   149	    } catch (error) {
   150	      console.error('Error cancelling application:', error);
   151	      throw error;
   152	    }
   153	  }
   154	}
   155	
   156	export default new ApplicationService();

========================================

üìÅ FILE: src/services/StallholderService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/StallholderService.js - Updated to fix import issues
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	import ApplicationService from './ApplicationService.js';
     5	
     6	class StallholderService {
     7	  // Get all stallholders with filtering
     8	  async getStallholders(filters = {}) {
     9	    try {
    10	      const filterConditions = ['user != ""']; // Changed from 'active = true' since we don't have that field
    11	      
    12	      if (filters.category) {
    13	        filterConditions.push(`product_categories ~ "${filters.category}"`);
    14	      }
    15	      
    16	      if (filters.state) {
    17	        filterConditions.push(`state = "${filters.state}"`);
    18	      }
    19	      
    20	      if (filters.search) {
    21	        filterConditions.push(`(business_name ~ "${filters.search}" || description ~ "${filters.search}")`);
    22	      }
    23	
    24	      if (filters.rating) {
    25	        filterConditions.push(`rating >= ${filters.rating}`);
    26	      }
    27	
    28	      if (filters.user) {
    29	        filterConditions.push(`user = "${filters.user}"`);
    30	      }
    31	
    32	      const result = await pb.collection('stallholders').getList(
    33	        filters.page || 1,
    34	        filters.perPage || 20,
    35	        {
    36	          filter: filterConditions.join(' && '),
    37	          sort: filters.sort || '-created',
    38	          expand: 'user'
    39	        }
    40	      );
    41	
    42	      return result;
    43	    } catch (error) {
    44	      console.error('Error fetching stallholders:', error);
    45	      throw error;
    46	    }
    47	  }
    48	
    49	  // Get single stallholder
    50	  async getStallholder(id) {
    51	    try {
    52	      const stallholder = await pb.collection('stallholders').getOne(id, {
    53	        expand: 'user'
    54	      });
    55	      return stallholder;
    56	    } catch (error) {
    57	      console.error('Error fetching stallholder:', error);
    58	      throw error;
    59	    }
    60	  }
    61	
    62	  // Create stallholder profile
    63	  async createStallholder(stallholderData) {
    64	    try {
    65	      const stallholder = await pb.collection('stallholders').create(stallholderData);
    66	      
    67	      auditLogger.log('stallholder_created', pb.authStore.model?.id, {
    68	        stallholderId: stallholder.id,
    69	        businessName: stallholder.business_name
    70	      });
    71	
    72	      return stallholder;
    73	    } catch (error) {
    74	      console.error('Error creating stallholder:', error);
    75	      throw error;
    76	    }
    77	  }
    78	
    79	  // Update stallholder profile
    80	  async updateStallholder(id, stallholderData) {
    81	    try {
    82	      const stallholder = await pb.collection('stallholders').update(id, stallholderData);
    83	      
    84	      auditLogger.log('stallholder_updated', pb.authStore.model?.id, {
    85	        stallholderId: id,
    86	        changes: Object.keys(stallholderData)
    87	      });
    88	
    89	      return stallholder;
    90	    } catch (error) {
    91	      console.error('Error updating stallholder:', error);
    92	      throw error;
    93	    }
    94	  }
    95	
    96	  // Get stallholder's applications - now properly delegated
    97	  async getApplications(stallholderId, filters = {}) {
    98	    return ApplicationService.getStallholderApplications(stallholderId, filters);
    99	  }
   100	
   101	  // Submit application to market - now properly delegated
   102	  async submitApplication(applicationData) {
   103	    return ApplicationService.submitApplication(applicationData);
   104	  }
   105	
   106	  // Get reviews for stallholder
   107	  async getReviews(stallholderId) {
   108	    try {
   109	      const reviews = await pb.collection('reviews').getList(1, 50, {
   110	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`,
   111	        sort: '-created',
   112	        expand: 'reviewer'
   113	      });
   114	      return reviews;
   115	    } catch (error) {
   116	      console.error('Error fetching reviews:', error);
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  // Add review for stallholder
   122	  async addReview(reviewData) {
   123	    try {
   124	      const review = await pb.collection('reviews').create({
   125	        ...reviewData,
   126	        target_type: 'stallholder'
   127	      });
   128	
   129	      // Update stallholder rating
   130	      await this.updateStallholderRating(reviewData.target_id);
   131	      
   132	      auditLogger.log('review_added', pb.authStore.model?.id, {
   133	        reviewId: review.id,
   134	        targetId: reviewData.target_id,
   135	        rating: reviewData.rating
   136	      });
   137	
   138	      return review;
   139	    } catch (error) {
   140	      console.error('Error adding review:', error);
   141	      throw error;
   142	    }
   143	  }
   144	
   145	  // Update stallholder's average rating
   146	  async updateStallholderRating(stallholderId) {
   147	    try {
   148	      const reviews = await pb.collection('reviews').getFullList({
   149	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`
   150	      });
   151	
   152	      if (reviews.length === 0) return;
   153	
   154	      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
   155	      const averageRating = totalRating / reviews.length;
   156	
   157	      await pb.collection('stallholders').update(stallholderId, {
   158	        rating: Math.round(averageRating * 10) / 10, // Round to 1 decimal
   159	        reviews_count: reviews.length
   160	      });
   161	    } catch (error) {
   162	      console.error('Error updating stallholder rating:', error);
   163	    }
   164	  }
   165	
   166	  // Get product categories
   167	  async getProductCategories() {
   168	    return [
   169	      'Fresh Produce',
   170	      'Baked Goods',
   171	      'Arts & Crafts',
   172	      'Clothing & Accessories',
   173	      'Food & Beverages',
   174	      'Home & Garden',
   175	      'Beauty & Wellness',
   176	      'Books & Media',
   177	      'Vintage & Antiques',
   178	      'Handmade Jewelry',
   179	      'Plants & Flowers',
   180	      'Other'
   181	    ];
   182	  }
   183	}
   184	
   185	export default new StallholderService();

========================================

üìÅ FILE: src/services/marketService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/marketService.js - Updated with better error handling
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class MarketService {
     6	  // Get all active markets
     7	  async getMarkets(filters = {}) {
     8	    try {
     9	      const filterConditions = []; // Removed 'active = true' since the field might not exist yet
    10	      
    11	      if (filters.state) {
    12	        filterConditions.push(`state = "${filters.state}"`);
    13	      }
    14	      
    15	      if (filters.category) {
    16	        filterConditions.push(`category = "${filters.category}"`);
    17	      }
    18	      
    19	      if (filters.search) {
    20	        filterConditions.push(`(name ~ "${filters.search}" || suburb ~ "${filters.search}" || description ~ "${filters.search}")`);
    21	      }
    22	
    23	      const filterString = filterConditions.length > 0 ? filterConditions.join(' && ') : '';
    24	
    25	      const result = await pb.collection('markets').getList(
    26	        filters.page || 1,
    27	        filters.perPage || 20,
    28	        {
    29	          filter: filterString,
    30	          sort: filters.sort || '-created',
    31	          expand: 'category,organizer'
    32	        }
    33	      );
    34	
    35	      return result;
    36	    } catch (error) {
    37	      console.error('Error fetching markets:', error);
    38	      throw error;
    39	    }
    40	  }
    41	
    42	  // Get single market by ID or slug
    43	  async getMarket(idOrSlug) {
    44	    try {
    45	      const market = await pb.collection('markets').getFirstListItem(
    46	        `id = "${idOrSlug}" || slug = "${idOrSlug}"`,
    47	        {
    48	          expand: 'category,organizer'
    49	        }
    50	      );
    51	
    52	      return market;
    53	    } catch (error) {
    54	      console.error('Error fetching market:', error);
    55	      throw error;
    56	    }
    57	  }
    58	
    59	  // Create new market
    60	  async createMarket(marketData) {
    61	    try {
    62	      const market = await pb.collection('markets').create(marketData);
    63	      
    64	      auditLogger.log('market_created', pb.authStore.model?.id, {
    65	        marketId: market.id,
    66	        marketName: market.name
    67	      });
    68	
    69	      return market;
    70	    } catch (error) {
    71	      console.error('Error creating market:', error);
    72	      throw error;
    73	    }
    74	  }
    75	
    76	  // Update market
    77	  async updateMarket(id, marketData) {
    78	    try {
    79	      const market = await pb.collection('markets').update(id, marketData);
    80	      
    81	      auditLogger.log('market_updated', pb.authStore.model?.id, {
    82	        marketId: id,
    83	        changes: Object.keys(marketData)
    84	      });
    85	
    86	      return market;
    87	    } catch (error) {
    88	      console.error('Error updating market:', error);
    89	      throw error;
    90	    }
    91	  }
    92	
    93	  // Delete market
    94	  async deleteMarket(id) {
    95	    try {
    96	      await pb.collection('markets').delete(id);
    97	      
    98	      auditLogger.log('market_deleted', pb.authStore.model?.id, {
    99	        marketId: id
   100	      });
   101	
   102	      return true;
   103	    } catch (error) {
   104	      console.error('Error deleting market:', error);
   105	      throw error;
   106	    }
   107	  }
   108	
   109	  // Search markets by location (geolocation)
   110	  async searchNearby(latitude, longitude, radiusKm = 25) {
   111	    try {
   112	      // This is a simplified version - in production you'd use proper geospatial queries
   113	      const markets = await pb.collection('markets').getList(1, 50, {
   114	        filter: 'latitude != null && longitude != null',
   115	        expand: 'category'
   116	      });
   117	
   118	      // Calculate distances client-side (in production, do this server-side)
   119	      const marketsWithDistance = markets.items.map(market => {
   120	        const distance = this.calculateDistance(
   121	          latitude, longitude,
   122	          market.latitude, market.longitude
   123	        );
   124	        return { ...market, distance };
   125	      });
   126	
   127	      // Filter by radius and sort by distance
   128	      return marketsWithDistance
   129	        .filter(market => market.distance <= radiusKm)
   130	        .sort((a, b) => a.distance - b.distance);
   131	    } catch (error) {
   132	      console.error('Error searching nearby markets:', error);
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Calculate distance between two points (Haversine formula)
   138	  calculateDistance(lat1, lon1, lat2, lon2) {
   139	    const R = 6371; // Earth's radius in kilometers
   140	    const dLat = this.deg2rad(lat2 - lat1);
   141	    const dLon = this.deg2rad(lon2 - lon1);
   142	    const a = 
   143	      Math.sin(dLat/2) * Math.sin(dLat/2) +
   144	      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * 
   145	      Math.sin(dLon/2) * Math.sin(dLon/2);
   146	    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
   147	    return R * c;
   148	  }
   149	
   150	  deg2rad(deg) {
   151	    return deg * (Math.PI/180);
   152	  }
   153	
   154	  // Get market categories - handle case where collection might not exist yet
   155	  async getCategories() {
   156	    try {
   157	      const categories = await pb.collection('market_categories').getFullList({
   158	        sort: 'name'
   159	      });
   160	      return categories;
   161	    } catch (error) {
   162	      console.error('Error fetching categories:', error);
   163	      // Return default categories if collection doesn't exist yet
   164	      return [
   165	        { id: 'farmers', name: 'Farmers Market', color: '#22c55e' },
   166	        { id: 'craft', name: 'Craft & Artisan', color: '#8b5cf6' },
   167	        { id: 'community', name: 'Community Market', color: '#3b82f6' },
   168	        { id: 'specialty', name: 'Specialty Market', color: '#f59e0b' },
   169	        { id: 'food', name: 'Food Market', color: '#ef4444' },
   170	        { id: 'vintage', name: 'Vintage & Antiques', color: '#6b7280' }
   171	      ];
   172	    }
   173	  }
   174	}
   175	
   176	export default new MarketService();

========================================

üìÅ FILE: src/components/auth/ProtectedRoute.jsx
   Size: 749 | Modified: 2025-06-02
----------------------------------------
     1	// src/components/auth/ProtectedRoute.jsx
     2	import { Navigate, useLocation } from 'react-router-dom'
     3	import { useAuth } from '../../contexts/AuthContext'
     4	
     5	export default function ProtectedRoute({ children, requiredRole = null }) {
     6	  const { user, loading } = useAuth()
     7	  const location = useLocation()
     8	
     9	  if (loading) {
    10	    return (
    11	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    12	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    13	      </div>
    14	    )
    15	  }
    16	
    17	  if (!user) {
    18	    return <Navigate to="/login" state={{ from: location }} replace />
    19	  }
    20	
    21	  if (requiredRole && user.role !== requiredRole) {
    22	    return <Navigate to="/dashboard" replace />
    23	  }
    24	
    25	  return children
    26	}

========================================

üìÅ FILE: src/components/layout/Footer.jsx
   Size: 3.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { MapPin, Mail, Phone, Facebook, Instagram, Twitter } from 'lucide-react'
     3	
     4	export default function Footer() {
     5	  return (
     6	    <footer className="bg-gray-900 text-white">
     7	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
     8	        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
     9	          {/* Brand */}
    10	          <div className="col-span-1 md:col-span-2">
    11	            <div className="flex items-center space-x-2 mb-4">
    12	              <MapPin className="h-8 w-8 text-primary-400" />
    13	              <span className="text-xl font-bold">SA Markets Directory</span>
    14	            </div>
    15	            <p className="text-gray-300 mb-4 max-w-md">
    16	              Connecting communities through vibrant local markets across South Australia. 
    17	              Discover fresh produce, unique crafts, and local businesses in your area.
    18	            </p>
    19	            <div className="flex space-x-4">
    20	              <Facebook className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    21	              <Instagram className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    22	              <Twitter className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    23	            </div>
    24	          </div>
    25	
    26	          {/* Quick Links */}
    27	          <div>
    28	            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
    29	            <ul className="space-y-2">
    30	              <li><Link to="/markets" className="text-gray-300 hover:text-primary-400 transition-colors">Browse Markets</Link></li>
    31	              <li><Link to="/stallholders" className="text-gray-300 hover:text-primary-400 transition-colors">For Stallholders</Link></li>
    32	              <li><Link to="/organizers" className="text-gray-300 hover:text-primary-400 transition-colors">For Organizers</Link></li>
    33	              <li><Link to="/about" className="text-gray-300 hover:text-primary-400 transition-colors">About Us</Link></li>
    34	              <li><Link to="/contact" className="text-gray-300 hover:text-primary-400 transition-colors">Contact</Link></li>
    35	            </ul>
    36	          </div>
    37	
    38	          {/* Support */}
    39	          <div>
    40	            <h3 className="text-lg font-semibold mb-4">Support</h3>
    41	            <ul className="space-y-2">
    42	              <li><Link to="/help" className="text-gray-300 hover:text-primary-400 transition-colors">Help Center</Link></li>
    43	              <li><Link to="/privacy" className="text-gray-300 hover:text-primary-400 transition-colors">Privacy Policy</Link></li>
    44	              <li><Link to="/terms" className="text-gray-300 hover:text-primary-400 transition-colors">Terms of Service</Link></li>
    45	              <li>
    46	                <div className="flex items-center space-x-2 text-gray-300">
    47	                  <Mail className="h-4 w-4" />
    48	                  <span>hello@samarkets.com.au</span>
    49	                </div>
    50	              </li>
    51	            </ul>
    52	          </div>
    53	        </div>
    54	
    55	        <hr className="border-gray-800 my-8" />
    56	
    57	        <div className="flex flex-col md:flex-row justify-between items-center">
    58	          <p className="text-gray-400 text-sm">
    59	            ¬© 2025 SA Markets Directory. All rights reserved.
    60	          </p>
    61	          <p className="text-gray-400 text-sm mt-2 md:mt-0">
    62	            Built with ‚ù§Ô∏è for Australian communities
    63	          </p>
    64	        </div>
    65	      </div>
    66	    </footer>
    67	  )
    68	}

========================================

üìÅ FILE: src/components/layout/Header.jsx
   Size: 8.6K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/layout/Header.jsx - Updated with Auth Integration
     2	import { useState } from 'react'
     3	import { Link, useNavigate } from 'react-router-dom'
     4	import { Menu, X, MapPin, User, LogOut, Settings } from 'lucide-react'
     5	import { useAuth } from '../../contexts/AuthContext'
     6	
     7	export default function Header() {
     8	  const [isMenuOpen, setIsMenuOpen] = useState(false)
     9	  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
    10	  const { user, logout, isAuthenticated } = useAuth()
    11	  const navigate = useNavigate()
    12	
    13	  const handleLogout = () => {
    14	    logout()
    15	    navigate('/')
    16	    setIsUserMenuOpen(false)
    17	  }
    18	
    19	  const getRoleDisplayName = (role) => {
    20	    switch(role) {
    21	      case 'stallholder': return 'Stallholder'
    22	      case 'organizer': return 'Organizer'
    23	      default: return 'Customer'
    24	    }
    25	  }
    26	
    27	  return (
    28	    <header className="bg-white shadow-sm border-b">
    29	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    30	        <div className="flex justify-between items-center h-16">
    31	          {/* Logo */}
    32	          <Link to="/" className="flex items-center space-x-2">
    33	            <MapPin className="h-8 w-8 text-primary-600" />
    34	            <span className="text-xl font-bold text-gray-900">SA Markets</span>
    35	          </Link>
    36	
    37	          {/* Desktop Navigation */}
    38	          <nav className="hidden md:flex space-x-8">
    39	            <Link to="/markets" className="text-gray-700 hover:text-primary-600 transition-colors">
    40	              Browse Markets
    41	            </Link>
    42	            <Link to="/stallholders" className="text-gray-700 hover:text-primary-600 transition-colors">
    43	              For Stallholders
    44	            </Link>
    45	            <Link to="/organizers" className="text-gray-700 hover:text-primary-600 transition-colors">
    46	              For Organizers
    47	            </Link>
    48	            <Link to="/about" className="text-gray-700 hover:text-primary-600 transition-colors">
    49	              About
    50	            </Link>
    51	          </nav>
    52	
    53	          {/* Desktop Auth Section */}
    54	          <div className="hidden md:flex items-center space-x-4">
    55	            {isAuthenticated ? (
    56	              <div className="relative">
    57	                <button
    58	                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
    59	                  className="flex items-center space-x-2 text-gray-700 hover:text-primary-600 transition-colors"
    60	                >
    61	                  <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
    62	                    <User className="h-5 w-5 text-primary-600" />
    63	                  </div>
    64	                  <span className="font-medium">{user?.name || 'User'}</span>
    65	                </button>
    66	
    67	                {/* User Dropdown Menu */}
    68	                {isUserMenuOpen && (
    69	                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
    70	                    <div className="px-4 py-2 border-b border-gray-100">
    71	                      <p className="text-sm font-medium text-gray-900">{user?.name}</p>
    72	                      <p className="text-xs text-gray-500">{user?.email}</p>
    73	                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded-full">
    74	                        {getRoleDisplayName(user?.role)}
    75	                      </span>
    76	                    </div>
    77	                    
    78	                    <Link
    79	                      to="/dashboard"
    80	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    81	                      onClick={() => setIsUserMenuOpen(false)}
    82	                    >
    83	                      <User className="h-4 w-4 mr-3" />
    84	                      Dashboard
    85	                    </Link>
    86	                    
    87	                    <Link
    88	                      to="/profile"
    89	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    90	                      onClick={() => setIsUserMenuOpen(false)}
    91	                    >
    92	                      <Settings className="h-4 w-4 mr-3" />
    93	                      Profile Settings
    94	                    </Link>
    95	                    
    96	                    <hr className="my-1" />
    97	                    
    98	                    <button
    99	                      onClick={handleLogout}
   100	                      className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
   101	                    >
   102	                      <LogOut className="h-4 w-4 mr-3" />
   103	                      Sign Out
   104	                    </button>
   105	                  </div>
   106	                )}
   107	              </div>
   108	            ) : (
   109	              <>
   110	                <Link to="/login" className="text-gray-700 hover:text-primary-600 transition-colors">
   111	                  Log In
   112	                </Link>
   113	                <Link to="/register" className="btn-primary">
   114	                  Sign Up
   115	                </Link>
   116	              </>
   117	            )}
   118	          </div>
   119	
   120	          {/* Mobile menu button */}
   121	          <button
   122	            onClick={() => setIsMenuOpen(!isMenuOpen)}
   123	            className="md:hidden p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"
   124	          >
   125	            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
   126	          </button>
   127	        </div>
   128	
   129	        {/* Mobile Navigation */}
   130	        {isMenuOpen && (
   131	          <div className="md:hidden py-4 border-t">
   132	            <nav className="flex flex-col space-y-2">
   133	              <Link 
   134	                to="/markets" 
   135	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   136	                onClick={() => setIsMenuOpen(false)}
   137	              >
   138	                Browse Markets
   139	              </Link>
   140	              <Link 
   141	                to="/stallholders" 
   142	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   143	                onClick={() => setIsMenuOpen(false)}
   144	              >
   145	                For Stallholders
   146	              </Link>
   147	              <Link 
   148	                to="/organizers" 
   149	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   150	                onClick={() => setIsMenuOpen(false)}
   151	              >
   152	                For Organizers
   153	              </Link>
   154	              <Link 
   155	                to="/about" 
   156	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   157	                onClick={() => setIsMenuOpen(false)}
   158	              >
   159	                About
   160	              </Link>
   161	              
   162	              <hr className="my-2" />
   163	              
   164	              {isAuthenticated ? (
   165	                <>
   166	                  <div className="px-3 py-2">
   167	                    <p className="text-sm font-medium text-gray-900">{user?.name}</p>
   168	                    <p className="text-xs text-gray-500">{getRoleDisplayName(user?.role)}</p>
   169	                  </div>
   170	                  <Link 
   171	                    to="/dashboard" 
   172	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   173	                    onClick={() => setIsMenuOpen(false)}
   174	                  >
   175	                    Dashboard
   176	                  </Link>
   177	                  <Link 
   178	                    to="/profile" 
   179	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   180	                    onClick={() => setIsMenuOpen(false)}
   181	                  >
   182	                    Profile Settings
   183	                  </Link>
   184	                  <button
   185	                    onClick={() => {
   186	                      handleLogout()
   187	                      setIsMenuOpen(false)
   188	                    }}
   189	                    className="px-3 py-2 text-left text-red-600 hover:text-red-500 transition-colors"
   190	                  >
   191	                    Sign Out
   192	                  </button>
   193	                </>
   194	              ) : (
   195	                <>
   196	                  <Link 
   197	                    to="/login" 
   198	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   199	                    onClick={() => setIsMenuOpen(false)}
   200	                  >
   201	                    Log In
   202	                  </Link>
   203	                  <Link 
   204	                    to="/register" 
   205	                    className="px-3 py-2 btn-primary text-center mx-3"
   206	                    onClick={() => setIsMenuOpen(false)}
   207	                  >
   208	                    Sign Up
   209	                  </Link>
   210	                </>
   211	              )}
   212	            </nav>
   213	          </div>
   214	        )}
   215	      </div>
   216	      
   217	      {/* Overlay for user menu */}
   218	      {isUserMenuOpen && (
   219	        <div 
   220	          className="fixed inset-0 z-40" 
   221	          onClick={() => setIsUserMenuOpen(false)}
   222	        />
   223	      )}
   224	    </header>
   225	  )
   226	}

========================================

üìÅ FILE: src/components/layout/Layout.jsx
   Size: 287 | Modified: 2025-06-02
----------------------------------------
     1	import Header from './Header'
     2	import Footer from './Footer'
     3	
     4	export default function Layout({ children }) {
     5	  return (
     6	    <div className="min-h-screen flex flex-col">
     7	      <Header />
     8	      <main className="flex-grow">
     9	        {children}
    10	      </main>
    11	      <Footer />
    12	    </div>
    13	  )
    14	}

========================================

üìÅ FILE: src/components/auth/ProtectedRoute.jsx
   Size: 749 | Modified: 2025-06-02
----------------------------------------
     1	// src/components/auth/ProtectedRoute.jsx
     2	import { Navigate, useLocation } from 'react-router-dom'
     3	import { useAuth } from '../../contexts/AuthContext'
     4	
     5	export default function ProtectedRoute({ children, requiredRole = null }) {
     6	  const { user, loading } = useAuth()
     7	  const location = useLocation()
     8	
     9	  if (loading) {
    10	    return (
    11	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    12	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    13	      </div>
    14	    )
    15	  }
    16	
    17	  if (!user) {
    18	    return <Navigate to="/login" state={{ from: location }} replace />
    19	  }
    20	
    21	  if (requiredRole && user.role !== requiredRole) {
    22	    return <Navigate to="/dashboard" replace />
    23	  }
    24	
    25	  return children
    26	}

========================================

üìÅ FILE: src/components/layout/Footer.jsx
   Size: 3.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { MapPin, Mail, Phone, Facebook, Instagram, Twitter } from 'lucide-react'
     3	
     4	export default function Footer() {
     5	  return (
     6	    <footer className="bg-gray-900 text-white">
     7	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
     8	        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
     9	          {/* Brand */}
    10	          <div className="col-span-1 md:col-span-2">
    11	            <div className="flex items-center space-x-2 mb-4">
    12	              <MapPin className="h-8 w-8 text-primary-400" />
    13	              <span className="text-xl font-bold">SA Markets Directory</span>
    14	            </div>
    15	            <p className="text-gray-300 mb-4 max-w-md">
    16	              Connecting communities through vibrant local markets across South Australia. 
    17	              Discover fresh produce, unique crafts, and local businesses in your area.
    18	            </p>
    19	            <div className="flex space-x-4">
    20	              <Facebook className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    21	              <Instagram className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    22	              <Twitter className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    23	            </div>
    24	          </div>
    25	
    26	          {/* Quick Links */}
    27	          <div>
    28	            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
    29	            <ul className="space-y-2">
    30	              <li><Link to="/markets" className="text-gray-300 hover:text-primary-400 transition-colors">Browse Markets</Link></li>
    31	              <li><Link to="/stallholders" className="text-gray-300 hover:text-primary-400 transition-colors">For Stallholders</Link></li>
    32	              <li><Link to="/organizers" className="text-gray-300 hover:text-primary-400 transition-colors">For Organizers</Link></li>
    33	              <li><Link to="/about" className="text-gray-300 hover:text-primary-400 transition-colors">About Us</Link></li>
    34	              <li><Link to="/contact" className="text-gray-300 hover:text-primary-400 transition-colors">Contact</Link></li>
    35	            </ul>
    36	          </div>
    37	
    38	          {/* Support */}
    39	          <div>
    40	            <h3 className="text-lg font-semibold mb-4">Support</h3>
    41	            <ul className="space-y-2">
    42	              <li><Link to="/help" className="text-gray-300 hover:text-primary-400 transition-colors">Help Center</Link></li>
    43	              <li><Link to="/privacy" className="text-gray-300 hover:text-primary-400 transition-colors">Privacy Policy</Link></li>
    44	              <li><Link to="/terms" className="text-gray-300 hover:text-primary-400 transition-colors">Terms of Service</Link></li>
    45	              <li>
    46	                <div className="flex items-center space-x-2 text-gray-300">
    47	                  <Mail className="h-4 w-4" />
    48	                  <span>hello@samarkets.com.au</span>
    49	                </div>
    50	              </li>
    51	            </ul>
    52	          </div>
    53	        </div>
    54	
    55	        <hr className="border-gray-800 my-8" />
    56	
    57	        <div className="flex flex-col md:flex-row justify-between items-center">
    58	          <p className="text-gray-400 text-sm">
    59	            ¬© 2025 SA Markets Directory. All rights reserved.
    60	          </p>
    61	          <p className="text-gray-400 text-sm mt-2 md:mt-0">
    62	            Built with ‚ù§Ô∏è for Australian communities
    63	          </p>
    64	        </div>
    65	      </div>
    66	    </footer>
    67	  )
    68	}

========================================

üìÅ FILE: src/components/layout/Header.jsx
   Size: 8.6K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/layout/Header.jsx - Updated with Auth Integration
     2	import { useState } from 'react'
     3	import { Link, useNavigate } from 'react-router-dom'
     4	import { Menu, X, MapPin, User, LogOut, Settings } from 'lucide-react'
     5	import { useAuth } from '../../contexts/AuthContext'
     6	
     7	export default function Header() {
     8	  const [isMenuOpen, setIsMenuOpen] = useState(false)
     9	  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
    10	  const { user, logout, isAuthenticated } = useAuth()
    11	  const navigate = useNavigate()
    12	
    13	  const handleLogout = () => {
    14	    logout()
    15	    navigate('/')
    16	    setIsUserMenuOpen(false)
    17	  }
    18	
    19	  const getRoleDisplayName = (role) => {
    20	    switch(role) {
    21	      case 'stallholder': return 'Stallholder'
    22	      case 'organizer': return 'Organizer'
    23	      default: return 'Customer'
    24	    }
    25	  }
    26	
    27	  return (
    28	    <header className="bg-white shadow-sm border-b">
    29	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    30	        <div className="flex justify-between items-center h-16">
    31	          {/* Logo */}
    32	          <Link to="/" className="flex items-center space-x-2">
    33	            <MapPin className="h-8 w-8 text-primary-600" />
    34	            <span className="text-xl font-bold text-gray-900">SA Markets</span>
    35	          </Link>
    36	
    37	          {/* Desktop Navigation */}
    38	          <nav className="hidden md:flex space-x-8">
    39	            <Link to="/markets" className="text-gray-700 hover:text-primary-600 transition-colors">
    40	              Browse Markets
    41	            </Link>
    42	            <Link to="/stallholders" className="text-gray-700 hover:text-primary-600 transition-colors">
    43	              For Stallholders
    44	            </Link>
    45	            <Link to="/organizers" className="text-gray-700 hover:text-primary-600 transition-colors">
    46	              For Organizers
    47	            </Link>
    48	            <Link to="/about" className="text-gray-700 hover:text-primary-600 transition-colors">
    49	              About
    50	            </Link>
    51	          </nav>
    52	
    53	          {/* Desktop Auth Section */}
    54	          <div className="hidden md:flex items-center space-x-4">
    55	            {isAuthenticated ? (
    56	              <div className="relative">
    57	                <button
    58	                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
    59	                  className="flex items-center space-x-2 text-gray-700 hover:text-primary-600 transition-colors"
    60	                >
    61	                  <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
    62	                    <User className="h-5 w-5 text-primary-600" />
    63	                  </div>
    64	                  <span className="font-medium">{user?.name || 'User'}</span>
    65	                </button>
    66	
    67	                {/* User Dropdown Menu */}
    68	                {isUserMenuOpen && (
    69	                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
    70	                    <div className="px-4 py-2 border-b border-gray-100">
    71	                      <p className="text-sm font-medium text-gray-900">{user?.name}</p>
    72	                      <p className="text-xs text-gray-500">{user?.email}</p>
    73	                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded-full">
    74	                        {getRoleDisplayName(user?.role)}
    75	                      </span>
    76	                    </div>
    77	                    
    78	                    <Link
    79	                      to="/dashboard"
    80	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    81	                      onClick={() => setIsUserMenuOpen(false)}
    82	                    >
    83	                      <User className="h-4 w-4 mr-3" />
    84	                      Dashboard
    85	                    </Link>
    86	                    
    87	                    <Link
    88	                      to="/profile"
    89	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    90	                      onClick={() => setIsUserMenuOpen(false)}
    91	                    >
    92	                      <Settings className="h-4 w-4 mr-3" />
    93	                      Profile Settings
    94	                    </Link>
    95	                    
    96	                    <hr className="my-1" />
    97	                    
    98	                    <button
    99	                      onClick={handleLogout}
   100	                      className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
   101	                    >
   102	                      <LogOut className="h-4 w-4 mr-3" />
   103	                      Sign Out
   104	                    </button>
   105	                  </div>
   106	                )}
   107	              </div>
   108	            ) : (
   109	              <>
   110	                <Link to="/login" className="text-gray-700 hover:text-primary-600 transition-colors">
   111	                  Log In
   112	                </Link>
   113	                <Link to="/register" className="btn-primary">
   114	                  Sign Up
   115	                </Link>
   116	              </>
   117	            )}
   118	          </div>
   119	
   120	          {/* Mobile menu button */}
   121	          <button
   122	            onClick={() => setIsMenuOpen(!isMenuOpen)}
   123	            className="md:hidden p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"
   124	          >
   125	            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
   126	          </button>
   127	        </div>
   128	
   129	        {/* Mobile Navigation */}
   130	        {isMenuOpen && (
   131	          <div className="md:hidden py-4 border-t">
   132	            <nav className="flex flex-col space-y-2">
   133	              <Link 
   134	                to="/markets" 
   135	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   136	                onClick={() => setIsMenuOpen(false)}
   137	              >
   138	                Browse Markets
   139	              </Link>
   140	              <Link 
   141	                to="/stallholders" 
   142	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   143	                onClick={() => setIsMenuOpen(false)}
   144	              >
   145	                For Stallholders
   146	              </Link>
   147	              <Link 
   148	                to="/organizers" 
   149	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   150	                onClick={() => setIsMenuOpen(false)}
   151	              >
   152	                For Organizers
   153	              </Link>
   154	              <Link 
   155	                to="/about" 
   156	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   157	                onClick={() => setIsMenuOpen(false)}
   158	              >
   159	                About
   160	              </Link>
   161	              
   162	              <hr className="my-2" />
   163	              
   164	              {isAuthenticated ? (
   165	                <>
   166	                  <div className="px-3 py-2">
   167	                    <p className="text-sm font-medium text-gray-900">{user?.name}</p>
   168	                    <p className="text-xs text-gray-500">{getRoleDisplayName(user?.role)}</p>
   169	                  </div>
   170	                  <Link 
   171	                    to="/dashboard" 
   172	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   173	                    onClick={() => setIsMenuOpen(false)}
   174	                  >
   175	                    Dashboard
   176	                  </Link>
   177	                  <Link 
   178	                    to="/profile" 
   179	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   180	                    onClick={() => setIsMenuOpen(false)}
   181	                  >
   182	                    Profile Settings
   183	                  </Link>
   184	                  <button
   185	                    onClick={() => {
   186	                      handleLogout()
   187	                      setIsMenuOpen(false)
   188	                    }}
   189	                    className="px-3 py-2 text-left text-red-600 hover:text-red-500 transition-colors"
   190	                  >
   191	                    Sign Out
   192	                  </button>
   193	                </>
   194	              ) : (
   195	                <>
   196	                  <Link 
   197	                    to="/login" 
   198	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   199	                    onClick={() => setIsMenuOpen(false)}
   200	                  >
   201	                    Log In
   202	                  </Link>
   203	                  <Link 
   204	                    to="/register" 
   205	                    className="px-3 py-2 btn-primary text-center mx-3"
   206	                    onClick={() => setIsMenuOpen(false)}
   207	                  >
   208	                    Sign Up
   209	                  </Link>
   210	                </>
   211	              )}
   212	            </nav>
   213	          </div>
   214	        )}
   215	      </div>
   216	      
   217	      {/* Overlay for user menu */}
   218	      {isUserMenuOpen && (
   219	        <div 
   220	          className="fixed inset-0 z-40" 
   221	          onClick={() => setIsUserMenuOpen(false)}
   222	        />
   223	      )}
   224	    </header>
   225	  )
   226	}

========================================

üìÅ FILE: src/components/layout/Layout.jsx
   Size: 287 | Modified: 2025-06-02
----------------------------------------
     1	import Header from './Header'
     2	import Footer from './Footer'
     3	
     4	export default function Layout({ children }) {
     5	  return (
     6	    <div className="min-h-screen flex flex-col">
     7	      <Header />
     8	      <main className="flex-grow">
     9	        {children}
    10	      </main>
    11	      <Footer />
    12	    </div>
    13	  )
    14	}

========================================

üìÅ FILE: src/components/market/AddressInput.jsx
   Size: 12K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/AddressInput.jsx - Google Places Integration
     2	import { useState, useEffect, useRef } from 'react'
     3	import { MapPin, Search, CheckCircle } from 'lucide-react'
     4	
     5	export default function AddressInput({ 
     6	  address, 
     7	  suburb, 
     8	  state, 
     9	  postcode, 
    10	  latitude, 
    11	  longitude,
    12	  onAddressChange 
    13	}) {
    14	  const [inputValue, setInputValue] = useState(address || '')
    15	  const [suggestions, setSuggestions] = useState([])
    16	  const [loading, setLoading] = useState(false)
    17	  const [isManualEntry, setIsManualEntry] = useState(false)
    18	  const [addressComponents, setAddressComponents] = useState({
    19	    address: address || '',
    20	    suburb: suburb || '',
    21	    state: state || 'SA',
    22	    postcode: postcode || '',
    23	    latitude: latitude || null,
    24	    longitude: longitude || null
    25	  })
    26	
    27	  const inputRef = useRef(null)
    28	  const autocompleteService = useRef(null)
    29	  const placesService = useRef(null)
    30	
    31	  useEffect(() => {
    32	    // Initialize Google Places API
    33	    if (window.google && window.google.maps) {
    34	      autocompleteService.current = new window.google.maps.places.AutocompleteService()
    35	      placesService.current = new window.google.maps.places.PlacesService(
    36	        document.createElement('div')
    37	      )
    38	    }
    39	  }, [])
    40	
    41	  useEffect(() => {
    42	    // Load Google Maps API if not already loaded
    43	    if (!window.google) {
    44	      const script = document.createElement('script')
    45	      script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}&libraries=places`
    46	      script.async = true
    47	      script.defer = true
    48	      script.onload = () => {
    49	        autocompleteService.current = new window.google.maps.places.AutocompleteService()
    50	        placesService.current = new window.google.maps.places.PlacesService(
    51	          document.createElement('div')
    52	        )
    53	      }
    54	      document.head.appendChild(script)
    55	    }
    56	  }, [])
    57	
    58	  const searchPlaces = async (query) => {
    59	    if (!autocompleteService.current || query.length < 3) {
    60	      setSuggestions([])
    61	      return
    62	    }
    63	
    64	    setLoading(true)
    65	    
    66	    const request = {
    67	      input: query,
    68	      componentRestrictions: { country: 'AU' },
    69	      types: ['address', 'establishment'],
    70	      fields: ['place_id', 'formatted_address', 'geometry', 'address_components']
    71	    }
    72	
    73	    autocompleteService.current.getPlacePredictions(request, (predictions, status) => {
    74	      setLoading(false)
    75	      if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {
    76	        setSuggestions(predictions.slice(0, 5))
    77	      } else {
    78	        setSuggestions([])
    79	      }
    80	    })
    81	  }
    82	
    83	  const selectPlace = (placeId) => {
    84	    if (!placesService.current) return
    85	
    86	    const request = {
    87	      placeId: placeId,
    88	      fields: ['formatted_address', 'geometry', 'address_components']
    89	    }
    90	
    91	    placesService.current.getDetails(request, (place, status) => {
    92	      if (status === window.google.maps.places.PlacesServiceStatus.OK && place) {
    93	        parseGooglePlace(place)
    94	        setSuggestions([])
    95	      }
    96	    })
    97	  }
    98	
    99	  const parseGooglePlace = (place) => {
   100	    const components = place.address_components
   101	    let parsedAddress = {
   102	      address: '',
   103	      suburb: '',
   104	      state: 'SA',
   105	      postcode: '',
   106	      latitude: place.geometry?.location?.lat() || null,
   107	      longitude: place.geometry?.location?.lng() || null
   108	    }
   109	
   110	    // Extract street number and route for address
   111	    const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name || ''
   112	    const route = components.find(c => c.types.includes('route'))?.long_name || ''
   113	    parsedAddress.address = `${streetNumber} ${route}`.trim()
   114	
   115	    // Extract suburb
   116	    const locality = components.find(c => 
   117	      c.types.includes('locality') || 
   118	      c.types.includes('sublocality') ||
   119	      c.types.includes('administrative_area_level_2')
   120	    )
   121	    parsedAddress.suburb = locality?.long_name || ''
   122	
   123	    // Extract state
   124	    const stateComponent = components.find(c => c.types.includes('administrative_area_level_1'))
   125	    if (stateComponent) {
   126	      const stateName = stateComponent.short_name
   127	      const stateMap = {
   128	        'NSW': 'NSW', 'VIC': 'VIC', 'QLD': 'QLD', 'SA': 'SA',
   129	        'WA': 'WA', 'TAS': 'TAS', 'NT': 'NT', 'ACT': 'ACT'
   130	      }
   131	      parsedAddress.state = stateMap[stateName] || 'SA'
   132	    }
   133	
   134	    // Extract postcode
   135	    const postcodeComponent = components.find(c => c.types.includes('postal_code'))
   136	    parsedAddress.postcode = postcodeComponent?.long_name || ''
   137	
   138	    setAddressComponents(parsedAddress)
   139	    setInputValue(place.formatted_address)
   140	    onAddressChange(parsedAddress)
   141	  }
   142	
   143	  const handleInputChange = (e) => {
   144	    const value = e.target.value
   145	    setInputValue(value)
   146	    
   147	    if (!isManualEntry) {
   148	      searchPlaces(value)
   149	    }
   150	  }
   151	
   152	  const handleManualEntry = () => {
   153	    setIsManualEntry(true)
   154	    setSuggestions([])
   155	    setInputValue('')
   156	  }
   157	
   158	  const handleManualChange = (field, value) => {
   159	    const updated = { ...addressComponents, [field]: value }
   160	    setAddressComponents(updated)
   161	    onAddressChange(updated)
   162	  }
   163	
   164	  const validateAustralianPostcode = (postcode) => {
   165	    return /^[0-9]{4}$/.test(postcode)
   166	  }
   167	
   168	  return (
   169	    <div className="space-y-4">
   170	      <div className="flex items-center justify-between">
   171	        <label className="block text-sm font-medium text-gray-700">
   172	          Market Address *
   173	        </label>
   174	        <button
   175	          type="button"
   176	          onClick={handleManualEntry}
   177	          className="text-sm text-primary-600 hover:text-primary-500"
   178	        >
   179	          Enter manually
   180	        </button>
   181	      </div>
   182	
   183	      {!isManualEntry ? (
   184	        /* Google Places Autocomplete */
   185	        <div className="relative">
   186	          <div className="relative">
   187	            <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   188	            <input
   189	              ref={inputRef}
   190	              type="text"
   191	              value={inputValue}
   192	              onChange={handleInputChange}
   193	              placeholder="Start typing the market address..."
   194	              className="input-field pl-10 pr-10"
   195	              autoComplete="off"
   196	            />
   197	            {loading && (
   198	              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
   199	                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
   200	              </div>
   201	            )}
   202	          </div>
   203	
   204	          {/* Suggestions Dropdown */}
   205	          {suggestions.length > 0 && (
   206	            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
   207	              {suggestions.map((suggestion) => (
   208	                <button
   209	                  key={suggestion.place_id}
   210	                  type="button"
   211	                  onClick={() => selectPlace(suggestion.place_id)}
   212	                  className="w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 first:rounded-t-lg last:rounded-b-lg"
   213	                >
   214	                  <div className="flex items-start">
   215	                    <MapPin className="h-4 w-4 text-gray-400 mt-1 mr-3 flex-shrink-0" />
   216	                    <div>
   217	                      <div className="font-medium text-gray-900 text-sm">
   218	                        {suggestion.structured_formatting?.main_text}
   219	                      </div>
   220	                      <div className="text-xs text-gray-500">
   221	                        {suggestion.structured_formatting?.secondary_text}
   222	                      </div>
   223	                    </div>
   224	                  </div>
   225	                </button>
   226	              ))}
   227	            </div>
   228	          )}
   229	
   230	          {/* Address Confirmation */}
   231	          {addressComponents.address && !loading && (
   232	            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
   233	              <div className="flex items-start">
   234	                <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 mr-2 flex-shrink-0" />
   235	                <div className="text-sm">
   236	                  <div className="font-medium text-green-800">Address confirmed:</div>
   237	                  <div className="text-green-700">
   238	                    {addressComponents.address}<br />
   239	                    {addressComponents.suburb}, {addressComponents.state} {addressComponents.postcode}
   240	                  </div>
   241	                  {addressComponents.latitude && (
   242	                    <div className="text-xs text-green-600 mt-1">
   243	                      Coordinates: {addressComponents.latitude.toFixed(6)}, {addressComponents.longitude.toFixed(6)}
   244	                    </div>
   245	                  )}
   246	                </div>
   247	              </div>
   248	            </div>
   249	          )}
   250	        </div>
   251	      ) : (
   252	        /* Manual Entry Form */
   253	        <div className="space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
   254	          <div className="flex items-center justify-between">
   255	            <h4 className="font-medium text-gray-900">Manual Address Entry</h4>
   256	            <button
   257	              type="button"
   258	              onClick={() => setIsManualEntry(false)}
   259	              className="text-sm text-primary-600 hover:text-primary-500"
   260	            >
   261	              Use address lookup
   262	            </button>
   263	          </div>
   264	
   265	          <div className="grid grid-cols-1 gap-4">
   266	            <div>
   267	              <label className="block text-sm font-medium text-gray-700 mb-1">
   268	                Street Address *
   269	              </label>
   270	              <input
   271	                type="text"
   272	                value={addressComponents.address}
   273	                onChange={(e) => handleManualChange('address', e.target.value)}
   274	                placeholder="123 Market Street"
   275	                className="input-field"
   276	                required
   277	              />
   278	            </div>
   279	
   280	            <div className="grid grid-cols-2 gap-4">
   281	              <div>
   282	                <label className="block text-sm font-medium text-gray-700 mb-1">
   283	                  Suburb *
   284	                </label>
   285	                <input
   286	                  type="text"
   287	                  value={addressComponents.suburb}
   288	                  onChange={(e) => handleManualChange('suburb', e.target.value)}
   289	                  placeholder="Adelaide"
   290	                  className="input-field"
   291	                  required
   292	                />
   293	              </div>
   294	
   295	              <div>
   296	                <label className="block text-sm font-medium text-gray-700 mb-1">
   297	                  State *
   298	                </label>
   299	                <select
   300	                  value={addressComponents.state}
   301	                  onChange={(e) => handleManualChange('state', e.target.value)}
   302	                  className="input-field"
   303	                  required
   304	                >
   305	                  <option value="SA">South Australia</option>
   306	                  <option value="VIC">Victoria</option>
   307	                  <option value="NSW">New South Wales</option>
   308	                  <option value="QLD">Queensland</option>
   309	                  <option value="WA">Western Australia</option>
   310	                  <option value="TAS">Tasmania</option>
   311	                  <option value="NT">Northern Territory</option>
   312	                  <option value="ACT">ACT</option>
   313	                </select>
   314	              </div>
   315	            </div>
   316	
   317	            <div className="w-32">
   318	              <label className="block text-sm font-medium text-gray-700 mb-1">
   319	                Postcode *
   320	              </label>
   321	              <input
   322	                type="text"
   323	                value={addressComponents.postcode}
   324	                onChange={(e) => handleManualChange('postcode', e.target.value)}
   325	                placeholder="5000"
   326	                pattern="[0-9]{4}"
   327	                maxLength="4"
   328	                className={`input-field ${
   329	                  addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode)
   330	                    ? 'border-red-300'
   331	                    : ''
   332	                }`}
   333	                required
   334	              />
   335	              {addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode) && (
   336	                <p className="mt-1 text-sm text-red-600">Please enter a valid 4-digit Australian postcode</p>
   337	              )}
   338	            </div>
   339	          </div>
   340	        </div>
   341	      )}
   342	    </div>
   343	  )
   344	}

========================================

üìÅ FILE: src/components/market/FlexibleFrequencySelector.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/FlexibleFrequencySelector.jsx
     2	import { useState, useEffect } from 'react'
     3	import { Calendar, Plus, X, Clock, Repeat } from 'lucide-react'
     4	
     5	export default function FlexibleFrequencySelector({ 
     6	  frequencyType, 
     7	  frequencyValue, 
     8	  frequencyDetails, 
     9	  onChange 
    10	}) {
    11	  const [localType, setLocalType] = useState(frequencyType || 'regular')
    12	  const [localValue, setLocalValue] = useState(frequencyValue || '')
    13	  const [localDetails, setLocalDetails] = useState(frequencyDetails || {})
    14	
    15	  useEffect(() => {
    16	    onChange({
    17	      frequencyType: localType,
    18	      frequencyValue: localValue,
    19	      frequencyDetails: localDetails
    20	    })
    21	  }, [localType, localValue, localDetails, onChange])
    22	
    23	  const handleTypeChange = (type) => {
    24	    setLocalType(type)
    25	    setLocalValue('')
    26	    setLocalDetails({})
    27	  }
    28	
    29	  const regularOptions = [
    30	    { value: 'daily', label: 'Daily', description: 'Every day' },
    31	    { value: 'weekly', label: 'Weekly', description: 'Every week' },
    32	    { value: 'fortnightly', label: 'Fortnightly', description: 'Every 2 weeks' },
    33	    { value: 'monthly', label: 'Monthly', description: 'Every month' }
    34	  ]
    35	
    36	  const weekDays = [
    37	    { value: 0, short: 'Sun', full: 'Sunday' },
    38	    { value: 1, short: 'Mon', full: 'Monday' },
    39	    { value: 2, short: 'Tue', full: 'Tuesday' },
    40	    { value: 3, short: 'Wed', full: 'Wednesday' },
    41	    { value: 4, short: 'Thu', full: 'Thursday' },
    42	    { value: 5, short: 'Fri', full: 'Friday' },
    43	    { value: 6, short: 'Sat', full: 'Saturday' }
    44	  ]
    45	
    46	  const weekNumbers = [
    47	    { value: 1, label: '1st' },
    48	    { value: 2, label: '2nd' },
    49	    { value: 3, label: '3rd' },
    50	    { value: 4, label: '4th' },
    51	    { value: -1, label: 'Last' }
    52	  ]
    53	
    54	  const handleMonthlyPatternChange = (weekNumber, dayOfWeek) => {
    55	    setLocalDetails({
    56	      weekNumber,
    57	      dayOfWeek,
    58	      description: `${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`
    59	    })
    60	    setLocalValue(`${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`)
    61	  }
    62	
    63	  const handleWeeklyPatternChange = (selectedDays) => {
    64	    const dayNames = selectedDays.map(day => weekDays.find(d => d.value === day)?.short).join(', ')
    65	    setLocalDetails({ selectedDays, dayNames })
    66	    setLocalValue(`Weekly: ${dayNames}`)
    67	  }
    68	
    69	  const addCustomDate = () => {
    70	    const newDate = prompt('Enter date (YYYY-MM-DD):')
    71	    if (newDate && /^\d{4}-\d{2}-\d{2}$/.test(newDate)) {
    72	      const currentDates = localDetails.customDates || []
    73	      setLocalDetails({
    74	        ...localDetails,
    75	        customDates: [...currentDates, newDate].sort()
    76	      })
    77	      setLocalValue(`${currentDates.length + 1} custom dates`)
    78	    }
    79	  }
    80	
    81	  const removeCustomDate = (dateToRemove) => {
    82	    const updatedDates = (localDetails.customDates || []).filter(date => date !== dateToRemove)
    83	    setLocalDetails({
    84	      ...localDetails,
    85	      customDates: updatedDates
    86	    })
    87	    setLocalValue(`${updatedDates.length} custom dates`)
    88	  }
    89	
    90	  return (
    91	    <div className="space-y-6">
    92	      {/* Type Selection */}
    93	      <div>
    94	        <label className="block text-sm font-medium text-gray-700 mb-3">
    95	          How often does your market run?
    96	        </label>
    97	        <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
    98	          <button
    99	            type="button"
   100	            onClick={() => handleTypeChange('regular')}
   101	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   102	              localType === 'regular'
   103	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   104	                : 'border-gray-200 hover:border-gray-300'
   105	            }`}
   106	          >
   107	            <div className="flex items-center">
   108	              <Repeat className="h-5 w-5 mr-3" />
   109	              <div>
   110	                <div className="font-medium">Regular</div>
   111	                <div className="text-sm text-gray-500">Daily, weekly, etc.</div>
   112	              </div>
   113	            </div>
   114	          </button>
   115	
   116	          <button
   117	            type="button"
   118	            onClick={() => handleTypeChange('weekly_pattern')}
   119	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   120	              localType === 'weekly_pattern'
   121	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   122	                : 'border-gray-200 hover:border-gray-300'
   123	            }`}
   124	          >
   125	            <div className="flex items-center">
   126	              <Calendar className="h-5 w-5 mr-3" />
   127	              <div>
   128	                <div className="font-medium">Weekly Pattern</div>
   129	                <div className="text-sm text-gray-500">Specific days each week</div>
   130	              </div>
   131	            </div>
   132	          </button>
   133	
   134	          <button
   135	            type="button"
   136	            onClick={() => handleTypeChange('monthly_pattern')}
   137	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   138	              localType === 'monthly_pattern'
   139	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   140	                : 'border-gray-200 hover:border-gray-300'
   141	            }`}
   142	          >
   143	            <div className="flex items-center">
   144	              <Calendar className="h-5 w-5 mr-3" />
   145	              <div>
   146	                <div className="font-medium">Monthly Pattern</div>
   147	                <div className="text-sm text-gray-500">3rd Wednesday, etc.</div>
   148	              </div>
   149	            </div>
   150	          </button>
   151	
   152	          <button
   153	            type="button"
   154	            onClick={() => handleTypeChange('custom_dates')}
   155	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   156	              localType === 'custom_dates'
   157	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   158	                : 'border-gray-200 hover:border-gray-300'
   159	            }`}
   160	          >
   161	            <div className="flex items-center">
   162	              <Clock className="h-5 w-5 mr-3" />
   163	              <div>
   164	                <div className="font-medium">Custom Dates</div>
   165	                <div className="text-sm text-gray-500">Specific dates only</div>
   166	              </div>
   167	            </div>
   168	          </button>
   169	        </div>
   170	      </div>
   171	
   172	      {/* Regular Pattern */}
   173	      {localType === 'regular' && (
   174	        <div>
   175	          <label className="block text-sm font-medium text-gray-700 mb-3">
   176	            Select frequency
   177	          </label>
   178	          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
   179	            {regularOptions.map((option) => (
   180	              <button
   181	                key={option.value}
   182	                type="button"
   183	                onClick={() => setLocalValue(option.value)}
   184	                className={`p-3 border-2 rounded-lg text-center transition-colors ${
   185	                  localValue === option.value
   186	                    ? 'border-primary-500 bg-primary-50 text-primary-700'
   187	                    : 'border-gray-200 hover:border-gray-300'
   188	                }`}
   189	              >
   190	                <div className="font-medium">{option.label}</div>
   191	                <div className="text-xs text-gray-500">{option.description}</div>
   192	              </button>
   193	            ))}
   194	          </div>
   195	        </div>
   196	      )}
   197	
   198	      {/* Weekly Pattern */}
   199	      {localType === 'weekly_pattern' && (
   200	        <div>
   201	          <label className="block text-sm font-medium text-gray-700 mb-3">
   202	            Select which days of the week
   203	          </label>
   204	          <div className="grid grid-cols-7 gap-2">
   205	            {weekDays.map((day) => {
   206	              const selectedDays = localDetails.selectedDays || []
   207	              const isSelected = selectedDays.includes(day.value)
   208	              
   209	              return (
   210	                <button
   211	                  key={day.value}
   212	                  type="button"
   213	                  onClick={() => {
   214	                    const newSelected = isSelected 
   215	                      ? selectedDays.filter(d => d !== day.value)
   216	                      : [...selectedDays, day.value].sort()
   217	                    handleWeeklyPatternChange(newSelected)
   218	                  }}
   219	                  className={`p-3 border-2 rounded-lg text-center transition-colors ${
   220	                    isSelected
   221	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   222	                      : 'border-gray-200 hover:border-gray-300'
   223	                  }`}
   224	                >
   225	                  <div className="font-medium text-sm">{day.short}</div>
   226	                </button>
   227	              )
   228	            })}
   229	          </div>
   230	          {localDetails.selectedDays?.length > 0 && (
   231	            <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   232	              Market runs: {localDetails.dayNames}
   233	            </div>
   234	          )}
   235	        </div>
   236	      )}
   237	
   238	      {/* Monthly Pattern */}
   239	      {localType === 'monthly_pattern' && (
   240	        <div className="space-y-4">
   241	          <label className="block text-sm font-medium text-gray-700">
   242	            Select which week and day of the month
   243	          </label>
   244	          
   245	          <div>
   246	            <div className="text-sm text-gray-600 mb-2">Week of the month:</div>
   247	            <div className="grid grid-cols-5 gap-2">
   248	              {weekNumbers.map((week) => (
   249	                <button
   250	                  key={week.value}
   251	                  type="button"
   252	                  onClick={() => handleMonthlyPatternChange(week.value, localDetails.dayOfWeek || 0)}
   253	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   254	                    localDetails.weekNumber === week.value
   255	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   256	                      : 'border-gray-200 hover:border-gray-300'
   257	                  }`}
   258	                >
   259	                  <div className="font-medium text-sm">{week.label}</div>
   260	                </button>
   261	              ))}
   262	            </div>
   263	          </div>
   264	
   265	          <div>
   266	            <div className="text-sm text-gray-600 mb-2">Day of the week:</div>
   267	            <div className="grid grid-cols-7 gap-2">
   268	              {weekDays.map((day) => (
   269	                <button
   270	                  key={day.value}
   271	                  type="button"
   272	                  onClick={() => handleMonthlyPatternChange(localDetails.weekNumber || 1, day.value)}
   273	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   274	                    localDetails.dayOfWeek === day.value
   275	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   276	                      : 'border-gray-200 hover:border-gray-300'
   277	                  }`}
   278	                >
   279	                  <div className="font-medium text-sm">{day.short}</div>
   280	                </button>
   281	              ))}
   282	            </div>
   283	          </div>
   284	
   285	          {localDetails.description && (
   286	            <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   287	              Market runs: {localDetails.description} of each month
   288	            </div>
   289	          )}
   290	        </div>
   291	      )}
   292	
   293	      {/* Custom Dates */}
   294	      {localType === 'custom_dates' && (
   295	        <div className="space-y-4">
   296	          <div className="flex items-center justify-between">
   297	            <label className="block text-sm font-medium text-gray-700">
   298	              Custom market dates
   299	            </label>
   300	            <button
   301	              type="button"
   302	              onClick={addCustomDate}
   303	              className="flex items-center px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700"
   304	            >
   305	              <Plus className="h-4 w-4 mr-1" />
   306	              Add Date
   307	            </button>
   308	          </div>
   309	
   310	          {localDetails.customDates?.length > 0 ? (
   311	            <div className="space-y-2">
   312	              {localDetails.customDates.map((date, index) => (
   313	                <div key={index} className="flex items-center justify-between p-2 border border-gray-200 rounded">
   314	                  <span className="text-sm">{new Date(date).toLocaleDateString()}</span>
   315	                  <button
   316	                    type="button"
   317	                    onClick={() => removeCustomDate(date)}
   318	                    className="text-red-500 hover:text-red-700"
   319	                  >
   320	                    <X className="h-4 w-4" />
   321	                  </button>
   322	                </div>
   323	              ))}
   324	            </div>
   325	          ) : (
   326	            <div className="p-4 bg-gray-50 border border-gray-200 rounded text-center text-gray-500">
   327	              No custom dates added yet. Click "Add Date" to specify when your market runs.
   328	            </div>
   329	          )}
   330	        </div>
   331	      )}
   332	
   333	      {/* Current Selection Summary */}
   334	      {localValue && (
   335	        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
   336	          <div className="flex items-center text-blue-800">
   337	            <Calendar className="h-5 w-5 mr-2" />
   338	            <div>
   339	              <div className="font-medium">Market Schedule:</div>
   340	              <div className="text-sm">{localValue}</div>
   341	              {localType === 'custom_dates' && localDetails.customDates?.length > 0 && (
   342	                <div className="text-xs mt-1">
   343	                  Next date: {new Date(Math.min(...localDetails.customDates.map(d => new Date(d)))).toLocaleDateString()}
   344	                </div>
   345	              )}
   346	            </div>
   347	          </div>
   348	        </div>
   349	      )}
   350	    </div>
   351	  )
   352	}

========================================

üìÅ FILE: src/components/market/TimeInput.jsx
   Size: 4.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/TimeInput.jsx
     2	import { useState } from 'react'
     3	import { Clock } from 'lucide-react'
     4	
     5	export default function TimeInput({ 
     6	  startTime, 
     7	  endTime, 
     8	  onStartTimeChange, 
     9	  onEndTimeChange,
    10	  error 
    11	}) {
    12	  const [timeError, setTimeError] = useState('')
    13	
    14	  const validateTimes = (start, end) => {
    15	    if (!start || !end) return ''
    16	    
    17	    const startMinutes = timeToMinutes(start)
    18	    const endMinutes = timeToMinutes(end)
    19	    
    20	    if (startMinutes >= endMinutes) {
    21	      return 'End time must be after start time'
    22	    }
    23	    
    24	    const duration = endMinutes - startMinutes
    25	    if (duration < 60) { // Less than 1 hour
    26	      return 'Market should run for at least 1 hour'
    27	    }
    28	    
    29	    if (duration > 720) { // More than 12 hours
    30	      return 'Market duration seems unusually long'
    31	    }
    32	    
    33	    return ''
    34	  }
    35	
    36	  const timeToMinutes = (time) => {
    37	    const [hours, minutes] = time.split(':').map(Number)
    38	    return hours * 60 + minutes
    39	  }
    40	
    41	  const formatDuration = (start, end) => {
    42	    if (!start || !end) return ''
    43	    
    44	    const startMinutes = timeToMinutes(start)
    45	    const endMinutes = timeToMinutes(end)
    46	    const duration = endMinutes - startMinutes
    47	    
    48	    const hours = Math.floor(duration / 60)
    49	    const mins = duration % 60
    50	    
    51	    return `${hours}h ${mins > 0 ? `${mins}m` : ''}`
    52	  }
    53	
    54	  const handleStartChange = (value) => {
    55	    onStartTimeChange(value)
    56	    const error = validateTimes(value, endTime)
    57	    setTimeError(error)
    58	  }
    59	
    60	  const handleEndChange = (value) => {
    61	    onEndTimeChange(value)
    62	    const error = validateTimes(startTime, value)
    63	    setTimeError(error)
    64	  }
    65	
    66	  const quickTimeOptions = [
    67	    { label: 'Early Morning', start: '06:00', end: '10:00' },
    68	    { label: 'Morning Market', start: '08:00', end: '12:00' },
    69	    { label: 'Weekend Market', start: '08:00', end: '14:00' },
    70	    { label: 'Afternoon Market', start: '14:00', end: '18:00' },
    71	    { label: 'Evening Market', start: '16:00', end: '20:00' }
    72	  ]
    73	
    74	  const setQuickTime = (start, end) => {
    75	    handleStartChange(start)
    76	    handleEndChange(end)
    77	  }
    78	
    79	  return (
    80	    <div className="space-y-4">
    81	      <label className="block text-sm font-medium text-gray-700">
    82	        Operating Hours *
    83	      </label>
    84	
    85	      {/* Quick Time Presets */}
    86	      <div>
    87	        <div className="text-sm text-gray-600 mb-2">Quick presets:</div>
    88	        <div className="flex flex-wrap gap-2">
    89	          {quickTimeOptions.map((option) => (
    90	            <button
    91	              key={option.label}
    92	              type="button"
    93	              onClick={() => setQuickTime(option.start, option.end)}
    94	              className="px-3 py-1 text-xs border border-gray-300 rounded-full hover:bg-gray-50 transition-colors"
    95	            >
    96	              {option.label}
    97	            </button>
    98	          ))}
    99	        </div>
   100	      </div>
   101	
   102	      {/* Time Inputs */}
   103	      <div className="grid grid-cols-2 gap-4">
   104	        <div>
   105	          <label className="block text-xs font-medium text-gray-600 mb-1">
   106	            Start Time
   107	          </label>
   108	          <div className="relative">
   109	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   110	            <input
   111	              type="time"
   112	              value={startTime}
   113	              onChange={(e) => handleStartChange(e.target.value)}
   114	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   115	              required
   116	            />
   117	          </div>
   118	        </div>
   119	
   120	        <div>
   121	          <label className="block text-xs font-medium text-gray-600 mb-1">
   122	            End Time
   123	          </label>
   124	          <div className="relative">
   125	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   126	            <input
   127	              type="time"
   128	              value={endTime}
   129	              onChange={(e) => handleEndChange(e.target.value)}
   130	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   131	              required
   132	            />
   133	          </div>
   134	        </div>
   135	      </div>
   136	
   137	      {/* Duration Display */}
   138	      {startTime && endTime && !timeError && (
   139	        <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   140	          Duration: {formatDuration(startTime, endTime)}
   141	        </div>
   142	      )}
   143	
   144	      {/* Error Display */}
   145	      {(timeError || error) && (
   146	        <div className="text-sm text-red-600">
   147	          {timeError || error}
   148	        </div>
   149	      )}
   150	    </div>
   151	  )
   152	}

========================================

üìÅ FILE: src/pages/CreateMarket.jsx
   Size: 20K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/CreateMarket.jsx - Market Creation Form
     2	import { useState, useEffect } from 'react'
     3	import { useNavigate } from 'react-router-dom'
     4	import { Save, ArrowLeft, MapPin, Clock, Calendar, DollarSign } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	import marketService from '../services/marketService'
     7	
     8	export default function CreateMarket() {
     9	  const [loading, setLoading] = useState(false)
    10	  const [categories, setCategories] = useState([])
    11	  const [error, setError] = useState(null)
    12	  const [formData, setFormData] = useState({
    13	    name: '',
    14	    category: '',
    15	    description: '',
    16	    address: '',
    17	    suburb: '',
    18	    state: 'SA',
    19	    postcode: '',
    20	    frequency: '',
    21	    operating_hours: '',
    22	    contact_email: '',
    23	    contact_phone: '',
    24	    website: '',
    25	    facilities: [],
    26	    stall_fee: '',
    27	    application_fee: '',
    28	    bond_required: false,
    29	    bond_amount: '',
    30	    insurance_required: true,
    31	    power_available: false,
    32	    parking_available: true,
    33	    accessibility_notes: ''
    34	  })
    35	
    36	  const { user } = useAuth()
    37	  const navigate = useNavigate()
    38	
    39	  // Redirect if not organizer
    40	  useEffect(() => {
    41	    if (user && user.role !== 'organizer') {
    42	      navigate('/dashboard')
    43	    }
    44	  }, [user, navigate])
    45	
    46	  useEffect(() => {
    47	    fetchCategories()
    48	  }, [])
    49	
    50	  const fetchCategories = async () => {
    51	    try {
    52	      const categoriesData = await marketService.getCategories()
    53	      setCategories(categoriesData)
    54	    } catch (error) {
    55	      console.error('Error fetching categories:', error)
    56	    }
    57	  }
    58	
    59	  const handleChange = (e) => {
    60	    const { name, value, type, checked } = e.target
    61	    setFormData(prev => ({
    62	      ...prev,
    63	      [name]: type === 'checkbox' ? checked : value
    64	    }))
    65	  }
    66	
    67	  const handleFacilitiesChange = (facility) => {
    68	    setFormData(prev => ({
    69	      ...prev,
    70	      facilities: prev.facilities.includes(facility)
    71	        ? prev.facilities.filter(f => f !== facility)
    72	        : [...prev.facilities, facility]
    73	    }))
    74	  }
    75	
    76	  const createSlug = (name) => {
    77	    return name
    78	      .toLowerCase()
    79	      .replace(/[^a-z0-9\s-]/g, '')
    80	      .replace(/\s+/g, '-')
    81	      .replace(/-+/g, '-')
    82	      .trim()
    83	  }
    84	
    85	  const handleSubmit = async (e) => {
    86	    e.preventDefault()
    87	    setLoading(true)
    88	    setError(null)
    89	
    90	    try {
    91	      const marketData = {
    92	        ...formData,
    93	        slug: createSlug(formData.name),
    94	        organizer: user.id,
    95	        active: true,
    96	        stall_fee: formData.stall_fee ? parseFloat(formData.stall_fee) : null,
    97	        application_fee: formData.application_fee ? parseFloat(formData.application_fee) : null,
    98	        bond_amount: formData.bond_amount ? parseFloat(formData.bond_amount) : null
    99	      }
   100	
   101	      const newMarket = await marketService.createMarket(marketData)
   102	      navigate(`/markets/${newMarket.slug}`)
   103	    } catch (err) {
   104	      console.error('Error creating market:', err)
   105	      setError(err.message || 'Failed to create market')
   106	    } finally {
   107	      setLoading(false)
   108	    }
   109	  }
   110	
   111	  const facilityOptions = [
   112	    'Toilets', 'Parking', 'Food Court', 'ATM', 'Wheelchair Access',
   113	    'Children\'s Area', 'Entertainment', 'Seating', 'Shelter/Cover',
   114	    'Storage', 'Loading Dock', 'Security'
   115	  ]
   116	
   117	  const frequencyOptions = [
   118	    'Daily', 'Weekly', 'Fortnightly', 'Monthly',
   119	    'First Saturday', 'First Sunday', 'Second Saturday', 'Second Sunday',
   120	    'Third Saturday', 'Third Sunday', 'Fourth Saturday', 'Fourth Sunday',
   121	    'Specific Dates', 'Seasonal'
   122	  ]
   123	
   124	  if (user && user.role !== 'organizer') {
   125	    return (
   126	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
   127	        <div className="text-center">
   128	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Access Restricted</h2>
   129	          <p className="text-gray-600">Only market organizers can create markets.</p>
   130	        </div>
   131	      </div>
   132	    )
   133	  }
   134	
   135	  return (
   136	    <div className="min-h-screen bg-gray-50 py-8">
   137	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
   138	        {/* Header */}
   139	        <div className="mb-8">
   140	          <button
   141	            onClick={() => navigate('/dashboard')}
   142	            className="flex items-center text-primary-600 hover:text-primary-500 mb-4"
   143	          >
   144	            <ArrowLeft className="h-5 w-5 mr-2" />
   145	            Back to Dashboard
   146	          </button>
   147	          <h1 className="text-3xl font-bold text-gray-900">Create New Market</h1>
   148	          <p className="text-gray-600 mt-2">
   149	            Set up your market listing to attract stallholders and customers
   150	          </p>
   151	        </div>
   152	
   153	        <form onSubmit={handleSubmit} className="space-y-8">
   154	          {error && (
   155	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
   156	              {error}
   157	            </div>
   158	          )}
   159	
   160	          {/* Basic Information */}
   161	          <div className="bg-white rounded-lg shadow p-6">
   162	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   163	              <MapPin className="h-5 w-5 mr-2 text-primary-600" />
   164	              Basic Information
   165	            </h2>
   166	            
   167	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   168	              <div className="md:col-span-2">
   169	                <label className="block text-sm font-medium text-gray-700 mb-2">
   170	                  Market Name *
   171	                </label>
   172	                <input
   173	                  type="text"
   174	                  name="name"
   175	                  required
   176	                  className="input-field"
   177	                  value={formData.name}
   178	                  onChange={handleChange}
   179	                  placeholder="e.g. Adelaide Central Market"
   180	                />
   181	              </div>
   182	
   183	              <div>
   184	                <label className="block text-sm font-medium text-gray-700 mb-2">
   185	                  Category *
   186	                </label>
   187	                <select
   188	                  name="category"
   189	                  required
   190	                  className="input-field"
   191	                  value={formData.category}
   192	                  onChange={handleChange}
   193	                >
   194	                  <option value="">Select a category</option>
   195	                  {categories.map((category) => (
   196	                    <option key={category.id} value={category.id}>
   197	                      {category.name}
   198	                    </option>
   199	                  ))}
   200	                </select>
   201	              </div>
   202	
   203	              <div>
   204	                <label className="block text-sm font-medium text-gray-700 mb-2">
   205	                  State
   206	                </label>
   207	                <select
   208	                  name="state"
   209	                  className="input-field"
   210	                  value={formData.state}
   211	                  onChange={handleChange}
   212	                >
   213	                  <option value="SA">South Australia</option>
   214	                  <option value="VIC">Victoria</option>
   215	                  <option value="NSW">New South Wales</option>
   216	                  <option value="QLD">Queensland</option>
   217	                  <option value="WA">Western Australia</option>
   218	                  <option value="TAS">Tasmania</option>
   219	                  <option value="NT">Northern Territory</option>
   220	                  <option value="ACT">ACT</option>
   221	                </select>
   222	              </div>
   223	
   224	              <div className="md:col-span-2">
   225	                <label className="block text-sm font-medium text-gray-700 mb-2">
   226	                  Description
   227	                </label>
   228	                <textarea
   229	                  name="description"
   230	                  rows={4}
   231	                  className="input-field"
   232	                  value={formData.description}
   233	                  onChange={handleChange}
   234	                  placeholder="Describe your market, its atmosphere, and what makes it special..."
   235	                />
   236	              </div>
   237	            </div>
   238	          </div>
   239	
   240	          {/* Location Details */}
   241	          <div className="bg-white rounded-lg shadow p-6">
   242	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   243	              Location Details
   244	            </h2>
   245	            
   246	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   247	              <div className="md:col-span-2">
   248	                <label className="block text-sm font-medium text-gray-700 mb-2">
   249	                  Street Address *
   250	                </label>
   251	                <input
   252	                  type="text"
   253	                  name="address"
   254	                  required
   255	                  className="input-field"
   256	                  value={formData.address}
   257	                  onChange={handleChange}
   258	                  placeholder="123 Market Street"
   259	                />
   260	              </div>
   261	
   262	              <div>
   263	                <label className="block text-sm font-medium text-gray-700 mb-2">
   264	                  Suburb *
   265	                </label>
   266	                <input
   267	                  type="text"
   268	                  name="suburb"
   269	                  required
   270	                  className="input-field"
   271	                  value={formData.suburb}
   272	                  onChange={handleChange}
   273	                  placeholder="Adelaide"
   274	                />
   275	              </div>
   276	
   277	              <div>
   278	                <label className="block text-sm font-medium text-gray-700 mb-2">
   279	                  Postcode *
   280	                </label>
   281	                <input
   282	                  type="text"
   283	                  name="postcode"
   284	                  required
   285	                  pattern="[0-9]{4}"
   286	                  className="input-field"
   287	                  value={formData.postcode}
   288	                  onChange={handleChange}
   289	                  placeholder="5000"
   290	                />
   291	              </div>
   292	            </div>
   293	          </div>
   294	
   295	          {/* Schedule & Operations */}
   296	          <div className="bg-white rounded-lg shadow p-6">
   297	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   298	              <Calendar className="h-5 w-5 mr-2 text-primary-600" />
   299	              Schedule & Operations
   300	            </h2>
   301	            
   302	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   303	              <div>
   304	                <label className="block text-sm font-medium text-gray-700 mb-2">
   305	                  Frequency *
   306	                </label>
   307	                <select
   308	                  name="frequency"
   309	                  required
   310	                  className="input-field"
   311	                  value={formData.frequency}
   312	                  onChange={handleChange}
   313	                >
   314	                  <option value="">Select frequency</option>
   315	                  {frequencyOptions.map((freq) => (
   316	                    <option key={freq} value={freq}>
   317	                      {freq}
   318	                    </option>
   319	                  ))}
   320	                </select>
   321	              </div>
   322	
   323	              <div>
   324	                <label className="block text-sm font-medium text-gray-700 mb-2">
   325	                  Operating Hours
   326	                </label>
   327	                <input
   328	                  type="text"
   329	                  name="operating_hours"
   330	                  className="input-field"
   331	                  value={formData.operating_hours}
   332	                  onChange={handleChange}
   333	                  placeholder="8:00 AM - 2:00 PM"
   334	                />
   335	              </div>
   336	            </div>
   337	          </div>
   338	
   339	          {/* Contact Information */}
   340	          <div className="bg-white rounded-lg shadow p-6">
   341	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   342	              Contact Information
   343	            </h2>
   344	            
   345	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   346	              <div>
   347	                <label className="block text-sm font-medium text-gray-700 mb-2">
   348	                  Contact Email *
   349	                </label>
   350	                <input
   351	                  type="email"
   352	                  name="contact_email"
   353	                  required
   354	                  className="input-field"
   355	                  value={formData.contact_email}
   356	                  onChange={handleChange}
   357	                  placeholder="info@yourmarket.com"
   358	                />
   359	              </div>
   360	
   361	              <div>
   362	                <label className="block text-sm font-medium text-gray-700 mb-2">
   363	                  Contact Phone
   364	                </label>
   365	                <input
   366	                  type="tel"
   367	                  name="contact_phone"
   368	                  className="input-field"
   369	                  value={formData.contact_phone}
   370	                  onChange={handleChange}
   371	                  placeholder="08 1234 5678"
   372	                />
   373	              </div>
   374	
   375	              <div className="md:col-span-2">
   376	                <label className="block text-sm font-medium text-gray-700 mb-2">
   377	                  Website
   378	                </label>
   379	                <input
   380	                  type="url"
   381	                  name="website"
   382	                  className="input-field"
   383	                  value={formData.website}
   384	                  onChange={handleChange}
   385	                  placeholder="https://yourmarket.com"
   386	                />
   387	              </div>
   388	            </div>
   389	          </div>
   390	
   391	          {/* Facilities */}
   392	          <div className="bg-white rounded-lg shadow p-6">
   393	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   394	              Facilities & Amenities
   395	            </h2>
   396	            
   397	            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   398	              {facilityOptions.map((facility) => (
   399	                <label key={facility} className="flex items-center">
   400	                  <input
   401	                    type="checkbox"
   402	                    checked={formData.facilities.includes(facility)}
   403	                    onChange={() => handleFacilitiesChange(facility)}
   404	                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   405	                  />
   406	                  <span className="ml-2 text-sm text-gray-700">{facility}</span>
   407	                </label>
   408	              ))}
   409	            </div>
   410	
   411	            <div className="mt-6">
   412	              <label className="block text-sm font-medium text-gray-700 mb-2">
   413	                Accessibility Notes
   414	              </label>
   415	              <textarea
   416	                name="accessibility_notes"
   417	                rows={3}
   418	                className="input-field"
   419	                value={formData.accessibility_notes}
   420	                onChange={handleChange}
   421	                placeholder="Describe accessibility features, parking, wheelchair access, etc."
   422	              />
   423	            </div>
   424	          </div>
   425	
   426	          {/* Pricing & Requirements */}
   427	          <div className="bg-white rounded-lg shadow p-6">
   428	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   429	              <DollarSign className="h-5 w-5 mr-2 text-primary-600" />
   430	              Pricing & Requirements
   431	            </h2>
   432	            
   433	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   434	              <div>
   435	                <label className="block text-sm font-medium text-gray-700 mb-2">
   436	                  Stall Fee (per market day)
   437	                </label>
   438	                <div className="relative">
   439	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   440	                  <input
   441	                    type="number"
   442	                    name="stall_fee"
   443	                    min="0"
   444	                    step="0.01"
   445	                    className="input-field pl-8"
   446	                    value={formData.stall_fee}
   447	                    onChange={handleChange}
   448	                    placeholder="50.00"
   449	                  />
   450	                </div>
   451	              </div>
   452	
   453	              <div>
   454	                <label className="block text-sm font-medium text-gray-700 mb-2">
   455	                  Application Fee
   456	                </label>
   457	                <div className="relative">
   458	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   459	                  <input
   460	                    type="number"
   461	                    name="application_fee"
   462	                    min="0"
   463	                    step="0.01"
   464	                    className="input-field pl-8"
   465	                    value={formData.application_fee}
   466	                    onChange={handleChange}
   467	                    placeholder="10.00"
   468	                  />
   469	                </div>
   470	              </div>
   471	
   472	              <div className="md:col-span-2">
   473	                <div className="space-y-4">
   474	                  <label className="flex items-center">
   475	                    <input
   476	                      type="checkbox"
   477	                      name="bond_required"
   478	                      checked={formData.bond_required}
   479	                      onChange={handleChange}
   480	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   481	                    />
   482	                    <span className="ml-2 text-sm text-gray-700">Bond Required</span>
   483	                  </label>
   484	
   485	                  {formData.bond_required && (
   486	                    <div className="ml-6">
   487	                      <label className="block text-sm font-medium text-gray-700 mb-2">
   488	                        Bond Amount
   489	                      </label>
   490	                      <div className="relative max-w-xs">
   491	                        <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   492	                        <input
   493	                          type="number"
   494	                          name="bond_amount"
   495	                          min="0"
   496	                          step="0.01"
   497	                          className="input-field pl-8"
   498	                          value={formData.bond_amount}
   499	                          onChange={handleChange}
   500	                          placeholder="100.00"
   501	                        />
   502	                      </div>
   503	                    </div>
   504	                  )}
   505	
   506	                  <label className="flex items-center">
   507	                    <input
   508	                      type="checkbox"
   509	                      name="insurance_required"
   510	                      checked={formData.insurance_required}
   511	                      onChange={handleChange}
   512	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   513	                    />
   514	                    <span className="ml-2 text-sm text-gray-700">Public Liability Insurance Required</span>
   515	                  </label>
   516	
   517	                  <label className="flex items-center">
   518	                    <input
   519	                      type="checkbox"
   520	                      name="power_available"
   521	                      checked={formData.power_available}
   522	                      onChange={handleChange}
   523	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   524	                    />
   525	                    <span className="ml-2 text-sm text-gray-700">Power Available for Stalls</span>
   526	                  </label>
   527	
   528	                  <label className="flex items-center">
   529	                    <input
   530	                      type="checkbox"
   531	                      name="parking_available"
   532	                      checked={formData.parking_available}
   533	                      onChange={handleChange}
   534	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   535	                    />
   536	                    <span className="ml-2 text-sm text-gray-700">Parking Available</span>
   537	                  </label>
   538	                </div>
   539	              </div>
   540	            </div>
   541	          </div>
   542	
   543	          {/* Submit Button */}
   544	          <div className="flex justify-end space-x-4">
   545	            <button
   546	              type="button"
   547	              onClick={() => navigate('/dashboard')}
   548	              className="btn-secondary"
   549	              disabled={loading}
   550	            >
   551	              Cancel
   552	            </button>
   553	            <button
   554	              type="submit"
   555	              className="btn-primary flex items-center"
   556	              disabled={loading}
   557	            >
   558	              {loading ? (
   559	                <>
   560	                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
   561	                  Creating Market...
   562	                </>
   563	              ) : (
   564	                <>
   565	                  <Save className="h-4 w-4 mr-2" />
   566	                  Create Market
   567	                </>
   568	              )}
   569	            </button>
   570	          </div>
   571	        </form>
   572	      </div>
   573	    </div>
   574	  )
   575	}

========================================

üìÅ FILE: src/pages/Dashboard.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/Dashboard.jsx - Fixed Role Detection
     2	import { useState, useEffect } from 'react'
     3	import { Link } from 'react-router-dom'
     4	import { User, MapPin, ShoppingBag, BarChart3, Plus, Calendar, Users } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	
     7	export default function Dashboard() {
     8	  const { user, loading } = useAuth()
     9	
    10	  // Debug: Let's see what user object looks like
    11	  useEffect(() => {
    12	    console.log('Dashboard - Current user:', user)
    13	    console.log('Dashboard - User role:', user?.role)
    14	  }, [user])
    15	
    16	  if (loading) {
    17	    return (
    18	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    19	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    20	      </div>
    21	    )
    22	  }
    23	
    24	  if (!user) {
    25	    return (
    26	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    27	        <div className="text-center">
    28	          <p className="text-gray-600">Please log in to access your dashboard.</p>
    29	          <Link to="/login" className="btn-primary mt-4">
    30	            Log In
    31	          </Link>
    32	        </div>
    33	      </div>
    34	    )
    35	  }
    36	
    37	  const renderRoleSpecificContent = () => {
    38	    console.log('Rendering content for role:', user.role) // Debug log
    39	    
    40	    switch (user.role) {
    41	      case 'stallholder':
    42	        return <StallholderDashboard user={user} />
    43	      case 'organizer':
    44	        return <OrganizerDashboard user={user} />
    45	      case 'customer':
    46	      default:
    47	        return <CustomerDashboard user={user} />
    48	    }
    49	  }
    50	
    51	  const getRoleDisplayName = (role) => {
    52	    switch(role) {
    53	      case 'stallholder': return 'Stallholder'
    54	      case 'organizer': return 'Market Organizer'
    55	      case 'customer': return 'Customer'
    56	      default: return 'User'
    57	    }
    58	  }
    59	
    60	  return (
    61	    <div className="min-h-screen bg-gray-50 py-8">
    62	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    63	        {/* Header */}
    64	        <div className="mb-8">
    65	          <h1 className="text-3xl font-bold text-gray-900 mb-2">
    66	            Welcome back, {user.name}!
    67	          </h1>
    68	          <div className="flex items-center space-x-4">
    69	            <p className="text-gray-600">
    70	              {user.role === 'stallholder' && 'Manage your stallholder profile and applications'}
    71	              {user.role === 'organizer' && 'Manage your markets and stallholder applications'}
    72	              {(user.role === 'customer' || !user.role) && 'Discover and save your favorite markets'}
    73	            </p>
    74	            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
    75	              {getRoleDisplayName(user.role)}
    76	            </span>
    77	          </div>
    78	        </div>
    79	
    80	        {/* Debug Info (remove this after testing) */}
    81	        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
    82	          <h3 className="text-sm font-medium text-blue-800 mb-2">Debug Info:</h3>
    83	          <p className="text-xs text-blue-600">User ID: {user.id}</p>
    84	          <p className="text-xs text-blue-600">User Role: {user.role || 'undefined'}</p>
    85	          <p className="text-xs text-blue-600">User Email: {user.email}</p>
    86	        </div>
    87	
    88	        {renderRoleSpecificContent()}
    89	      </div>
    90	    </div>
    91	  )
    92	}
    93	
    94	// Customer Dashboard Component
    95	const CustomerDashboard = ({ user }) => {
    96	  return (
    97	    <div>
    98	      <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
    99	        <p className="text-green-800 font-medium">‚úÖ Customer Dashboard Loaded</p>
   100	      </div>
   101	
   102	      {/* Quick Stats */}
   103	      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
   104	        <div className="card">
   105	          <div className="flex items-center">
   106	            <div className="bg-primary-100 rounded-lg p-3">
   107	              <MapPin className="h-6 w-6 text-primary-600" />
   108	            </div>
   109	            <div className="ml-4">
   110	              <p className="text-2xl font-bold text-gray-900">12</p>
   111	              <p className="text-gray-600">Favorite Markets</p>
   112	            </div>
   113	          </div>
   114	        </div>
   115	        <div className="card">
   116	          <div className="flex items-center">
   117	            <div className="bg-secondary-100 rounded-lg p-3">
   118	              <Calendar className="h-6 w-6 text-secondary-600" />
   119	            </div>
   120	            <div className="ml-4">
   121	              <p className="text-2xl font-bold text-gray-900">3</p>
   122	              <p className="text-gray-600">This Weekend</p>
   123	            </div>
   124	          </div>
   125	        </div>
   126	        <div className="card">
   127	          <div className="flex items-center">
   128	            <div className="bg-green-100 rounded-lg p-3">
   129	              <User className="h-6 w-6 text-green-600" />
   130	            </div>
   131	            <div className="ml-4">
   132	              <p className="text-2xl font-bold text-gray-900">Free</p>
   133	              <p className="text-gray-600">Current Plan</p>
   134	            </div>
   135	          </div>
   136	        </div>
   137	      </div>
   138	
   139	      {/* Quick Actions */}
   140	      <div className="bg-white rounded-lg shadow p-6">
   141	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   142	        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   143	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   144	            <MapPin className="h-8 w-8 text-primary-600 mr-4" />
   145	            <div>
   146	              <h3 className="font-medium text-gray-900">Browse Markets</h3>
   147	              <p className="text-sm text-gray-600">Find new markets in your area</p>
   148	            </div>
   149	          </Link>
   150	          <Link to="/register?role=stallholder" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   151	            <ShoppingBag className="h-8 w-8 text-secondary-600 mr-4" />
   152	            <div>
   153	              <h3 className="font-medium text-gray-900">Become a Stallholder</h3>
   154	              <p className="text-sm text-gray-600">Start selling at local markets</p>
   155	            </div>
   156	          </Link>
   157	        </div>
   158	      </div>
   159	    </div>
   160	  )
   161	}
   162	
   163	// Stallholder Dashboard Component
   164	const StallholderDashboard = ({ user }) => {
   165	  return (
   166	    <div>
   167	      <div className="mb-4 p-4 bg-purple-50 border border-purple-200 rounded-lg">
   168	        <p className="text-purple-800 font-medium">‚úÖ Stallholder Dashboard Loaded</p>
   169	      </div>
   170	
   171	      {/* Quick Stats */}
   172	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   173	        <div className="card">
   174	          <div className="flex items-center">
   175	            <div className="bg-primary-100 rounded-lg p-3">
   176	              <ShoppingBag className="h-6 w-6 text-primary-600" />
   177	            </div>
   178	            <div className="ml-4">
   179	              <p className="text-2xl font-bold text-gray-900">5</p>
   180	              <p className="text-gray-600">Active Applications</p>
   181	            </div>
   182	          </div>
   183	        </div>
   184	        <div className="card">
   185	          <div className="flex items-center">
   186	            <div className="bg-green-100 rounded-lg p-3">
   187	              <BarChart3 className="h-6 w-6 text-green-600" />
   188	            </div>
   189	            <div className="ml-4">
   190	              <p className="text-2xl font-bold text-gray-900">3</p>
   191	              <p className="text-gray-600">Approved</p>
   192	            </div>
   193	          </div>
   194	        </div>
   195	        <div className="card">
   196	          <div className="flex items-center">
   197	            <div className="bg-yellow-100 rounded-lg p-3">
   198	              <Calendar className="h-6 w-6 text-yellow-600" />
   199	            </div>
   200	            <div className="ml-4">
   201	              <p className="text-2xl font-bold text-gray-900">2</p>
   202	              <p className="text-gray-600">This Weekend</p>
   203	            </div>
   204	          </div>
   205	        </div>
   206	        <div className="card">
   207	          <div className="flex items-center">
   208	            <div className="bg-purple-100 rounded-lg p-3">
   209	              <User className="h-6 w-6 text-purple-600" />
   210	            </div>
   211	            <div className="ml-4">
   212	              <p className="text-2xl font-bold text-gray-900">4.8</p>
   213	              <p className="text-gray-600">Rating</p>
   214	            </div>
   215	          </div>
   216	        </div>
   217	      </div>
   218	
   219	      {/* Quick Actions */}
   220	      <div className="bg-white rounded-lg shadow p-6">
   221	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   222	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   223	          <Link to="/profile" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   224	            <User className="h-8 w-8 text-primary-600 mr-4" />
   225	            <div>
   226	              <h3 className="font-medium text-gray-900">Update Profile</h3>
   227	              <p className="text-sm text-gray-600">Edit your business details</p>
   228	            </div>
   229	          </Link>
   230	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   231	            <MapPin className="h-8 w-8 text-secondary-600 mr-4" />
   232	            <div>
   233	              <h3 className="font-medium text-gray-900">Find Markets</h3>
   234	              <p className="text-sm text-gray-600">Discover new opportunities</p>
   235	            </div>
   236	          </Link>
   237	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   238	            <Plus className="h-8 w-8 text-green-600 mr-4" />
   239	            <div>
   240	              <h3 className="font-medium text-gray-900">Apply to Market</h3>
   241	              <p className="text-sm text-gray-600">Submit new application</p>
   242	            </div>
   243	          </button>
   244	        </div>
   245	      </div>
   246	    </div>
   247	  )
   248	}
   249	
   250	// Organizer Dashboard Component
   251	const OrganizerDashboard = ({ user }) => {
   252	  return (
   253	    <div>
   254	      <div className="mb-4 p-4 bg-orange-50 border border-orange-200 rounded-lg">
   255	        <p className="text-orange-800 font-medium">‚úÖ Organizer Dashboard Loaded</p>
   256	      </div>
   257	
   258	      {/* Quick Stats */}
   259	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   260	        <div className="card">
   261	          <div className="flex items-center">
   262	            <div className="bg-primary-100 rounded-lg p-3">
   263	              <MapPin className="h-6 w-6 text-primary-600" />
   264	            </div>
   265	            <div className="ml-4">
   266	              <p className="text-2xl font-bold text-gray-900">3</p>
   267	              <p className="text-gray-600">Active Markets</p>
   268	            </div>
   269	          </div>
   270	        </div>
   271	        <div className="card">
   272	          <div className="flex items-center">
   273	            <div className="bg-secondary-100 rounded-lg p-3">
   274	              <Users className="h-6 w-6 text-secondary-600" />
   275	            </div>
   276	            <div className="ml-4">
   277	              <p className="text-2xl font-bold text-gray-900">47</p>
   278	              <p className="text-gray-600">Total Stallholders</p>
   279	            </div>
   280	          </div>
   281	        </div>
   282	        <div className="card">
   283	          <div className="flex items-center">
   284	            <div className="bg-yellow-100 rounded-lg p-3">
   285	              <ShoppingBag className="h-6 w-6 text-yellow-600" />
   286	            </div>
   287	            <div className="ml-4">
   288	              <p className="text-2xl font-bold text-gray-900">12</p>
   289	              <p className="text-gray-600">Pending Applications</p>
   290	            </div>
   291	          </div>
   292	        </div>
   293	        <div className="card">
   294	          <div className="flex items-center">
   295	            <div className="bg-green-100 rounded-lg p-3">
   296	              <BarChart3 className="h-6 w-6 text-green-600" />
   297	            </div>
   298	            <div className="ml-4">
   299	              <p className="text-2xl font-bold text-gray-900">$2,450</p>
   300	              <p className="text-gray-600">Monthly Revenue</p>
   301	            </div>
   302	          </div>
   303	        </div>
   304	      </div>
   305	
   306	      {/* Quick Actions */}
   307	      <div className="bg-white rounded-lg shadow p-6">
   308	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   309	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   310	          <Link to="/markets/create" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   311	            <Plus className="h-8 w-8 text-primary-600 mr-4" />
   312	            <div>
   313	              <h3 className="font-medium text-gray-900">Create Market</h3>
   314	              <p className="text-sm text-gray-600">Add a new market listing</p>
   315	            </div>
   316	          </Link>
   317	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   318	            <Users className="h-8 w-8 text-secondary-600 mr-4" />
   319	            <div>
   320	              <h3 className="font-medium text-gray-900">Manage Applications</h3>
   321	              <p className="text-sm text-gray-600">Review stallholder requests</p>
   322	            </div>
   323	          </button>
   324	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   325	            <BarChart3 className="h-8 w-8 text-green-600 mr-4" />
   326	            <div>
   327	              <h3 className="font-medium text-gray-900">View Analytics</h3>
   328	              <p className="text-sm text-gray-600">Market performance data</p>
   329	            </div>
   330	          </button>
   331	        </div>
   332	      </div>
   333	    </div>
   334	  )
   335	}

========================================

üìÅ FILE: src/pages/DatabaseTest.jsx
   Size: 7.7K | Modified: 2025-06-03
----------------------------------------
     1	// PocketBase Verification Component
     2	// Add this to src/pages/DatabaseTest.jsx for internal verification
     3	
     4	import { useState, useEffect } from 'react'
     5	import pb from '../lib/pocketbase'
     6	import { CheckCircle, XCircle, AlertCircle, RefreshCw } from 'lucide-react'
     7	
     8	export default function DatabaseTest() {
     9	  const [status, setStatus] = useState({
    10	    loading: true,
    11	    pocketbaseOnline: false,
    12	    collections: {},
    13	    dataCounts: {},
    14	    errors: []
    15	  })
    16	
    17	  const checkDatabase = async () => {
    18	    setStatus(prev => ({ ...prev, loading: true, errors: [] }))
    19	    
    20	    try {
    21	      const collections = ['users', 'markets', 'market_categories', 'stallholders', 'applications', 'reviews']
    22	      const collectionStatus = {}
    23	      const dataStatus = {}
    24	      const errors = []
    25	
    26	      // Check PocketBase health
    27	      const healthCheck = await fetch(`${pb.baseUrl}/api/health`)
    28	      const pocketbaseOnline = healthCheck.ok
    29	
    30	      // Check each collection
    31	      for (const collection of collections) {
    32	        try {
    33	          const result = await pb.collection(collection).getList(1, 1)
    34	          collectionStatus[collection] = true
    35	          dataStatus[collection] = result.totalItems
    36	        } catch (error) {
    37	          collectionStatus[collection] = false
    38	          dataStatus[collection] = 0
    39	          errors.push(`${collection}: ${error.message}`)
    40	        }
    41	      }
    42	
    43	      // Test market query specifically
    44	      try {
    45	        const markets = await pb.collection('markets').getList(1, 3, {
    46	          expand: 'category'
    47	        })
    48	        console.log('Sample markets found:', markets.items)
    49	      } catch (error) {
    50	        errors.push(`Market query failed: ${error.message}`)
    51	      }
    52	
    53	      setStatus({
    54	        loading: false,
    55	        pocketbaseOnline,
    56	        collections: collectionStatus,
    57	        dataCounts: dataStatus,
    58	        errors
    59	      })
    60	
    61	    } catch (error) {
    62	      setStatus(prev => ({
    63	        ...prev,
    64	        loading: false,
    65	        pocketbaseOnline: false,
    66	        errors: [`General error: ${error.message}`]
    67	      }))
    68	    }
    69	  }
    70	
    71	  useEffect(() => {
    72	    checkDatabase()
    73	  }, [])
    74	
    75	  const StatusIcon = ({ status }) => {
    76	    if (status === true) return <CheckCircle className="h-5 w-5 text-green-500" />
    77	    if (status === false) return <XCircle className="h-5 w-5 text-red-500" />
    78	    return <AlertCircle className="h-5 w-5 text-yellow-500" />
    79	  }
    80	
    81	  return (
    82	    <div className="min-h-screen bg-gray-50 py-8">
    83	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    84	        <div className="mb-8">
    85	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Database Verification</h1>
    86	          <p className="text-gray-600">
    87	            Checking PocketBase collections and data integrity
    88	          </p>
    89	          <button 
    90	            onClick={checkDatabase}
    91	            className="mt-4 btn-primary inline-flex items-center"
    92	            disabled={status.loading}
    93	          >
    94	            <RefreshCw className={`h-4 w-4 mr-2 ${status.loading ? 'animate-spin' : ''}`} />
    95	            Refresh Check
    96	          </button>
    97	        </div>
    98	
    99	        {/* PocketBase Status */}
   100	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   101	          <h2 className="text-xl font-semibold mb-4">PocketBase Status</h2>
   102	          <div className="flex items-center">
   103	            <StatusIcon status={status.pocketbaseOnline} />
   104	            <span className="ml-2">
   105	              {status.pocketbaseOnline ? 'Online and responding' : 'Offline or not responding'}
   106	            </span>
   107	          </div>
   108	          <p className="text-sm text-gray-500 mt-2">URL: {pb.baseUrl}</p>
   109	        </div>
   110	
   111	        {/* Collections Status */}
   112	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   113	          <h2 className="text-xl font-semibold mb-4">Collections Status</h2>
   114	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   115	            {Object.entries(status.collections).map(([collection, exists]) => (
   116	              <div key={collection} className="flex items-center justify-between p-3 border rounded">
   117	                <div className="flex items-center">
   118	                  <StatusIcon status={exists} />
   119	                  <span className="ml-2 font-medium">{collection}</span>
   120	                </div>
   121	                <span className="text-sm text-gray-500">
   122	                  {status.dataCounts[collection]} records
   123	                </span>
   124	              </div>
   125	            ))}
   126	          </div>
   127	        </div>
   128	
   129	        {/* Data Summary */}
   130	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   131	          <h2 className="text-xl font-semibold mb-4">Data Summary</h2>
   132	          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   133	            <div className="text-center p-4 bg-blue-50 rounded">
   134	              <div className="text-2xl font-bold text-blue-600">
   135	                {status.dataCounts.markets || 0}
   136	              </div>
   137	              <div className="text-sm text-blue-800">Markets</div>
   138	            </div>
   139	            <div className="text-center p-4 bg-green-50 rounded">
   140	              <div className="text-2xl font-bold text-green-600">
   141	                {status.dataCounts.stallholders || 0}
   142	              </div>
   143	              <div className="text-sm text-green-800">Stallholders</div>
   144	            </div>
   145	            <div className="text-center p-4 bg-purple-50 rounded">
   146	              <div className="text-2xl font-bold text-purple-600">
   147	                {status.dataCounts.applications || 0}
   148	              </div>
   149	              <div className="text-sm text-purple-800">Applications</div>
   150	            </div>
   151	            <div className="text-center p-4 bg-yellow-50 rounded">
   152	              <div className="text-2xl font-bold text-yellow-600">
   153	                {status.dataCounts.users || 0}
   154	              </div>
   155	              <div className="text-sm text-yellow-800">Users</div>
   156	            </div>
   157	            <div className="text-center p-4 bg-red-50 rounded">
   158	              <div className="text-2xl font-bold text-red-600">
   159	                {status.dataCounts.reviews || 0}
   160	              </div>
   161	              <div className="text-sm text-red-800">Reviews</div>
   162	            </div>
   163	            <div className="text-center p-4 bg-indigo-50 rounded">
   164	              <div className="text-2xl font-bold text-indigo-600">
   165	                {status.dataCounts.market_categories || 0}
   166	              </div>
   167	              <div className="text-sm text-indigo-800">Categories</div>
   168	            </div>
   169	          </div>
   170	        </div>
   171	
   172	        {/* Errors */}
   173	        {status.errors.length > 0 && (
   174	          <div className="bg-white rounded-lg shadow p-6 mb-6">
   175	            <h2 className="text-xl font-semibold mb-4 text-red-600">Issues Detected</h2>
   176	            <div className="space-y-2">
   177	              {status.errors.map((error, index) => (
   178	                <div key={index} className="flex items-start">
   179	                  <XCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0" />
   180	                  <span className="text-sm text-red-700">{error}</span>
   181	                </div>
   182	              ))}
   183	            </div>
   184	          </div>
   185	        )}
   186	
   187	        {/* Quick Actions */}
   188	        <div className="bg-white rounded-lg shadow p-6">
   189	          <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
   190	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   191	            <button 
   192	              onClick={() => window.open(`${pb.baseUrl}/_/`, '_blank')}
   193	              className="btn-secondary"
   194	            >
   195	              Open PocketBase Admin
   196	            </button>
   197	            <button 
   198	              onClick={() => window.location.href = '/markets'}
   199	              className="btn-primary"
   200	            >
   201	              Test Market Listing
   202	            </button>
   203	          </div>
   204	        </div>
   205	      </div>
   206	    </div>
   207	  )
   208	}
   209	
   210	// Add this route to your App.jsx for testing:
   211	// <Route path="/database-test" element={<DatabaseTest />} />

========================================

üìÅ FILE: src/pages/Home.jsx
   Size: 4.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { Search, MapPin, Users, ShoppingBag, ArrowRight } from 'lucide-react'
     3	
     4	export default function Home() {
     5	  return (
     6	    <div>
     7	      {/* Hero Section */}
     8	      <section className="bg-gradient-to-br from-primary-600 to-primary-800 text-white">
     9	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    10	          <div className="text-center">
    11	            <h1 className="text-4xl md:text-6xl font-bold mb-6">
    12	              Discover Local Markets
    13	              <span className="block text-secondary-400">Across South Australia</span>
    14	            </h1>
    15	            <p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto text-primary-100">
    16	              Connect with vibrant local markets, fresh produce, unique crafts, and community experiences right in your neighborhood.
    17	            </p>
    18	            <div className="flex flex-col sm:flex-row gap-4 justify-center">
    19	              <Link to="/markets" className="btn-secondary text-lg px-8 py-3">
    20	                <Search className="h-5 w-5 mr-2" />
    21	                Browse Markets
    22	              </Link>
    23	              <Link to="/register" className="bg-white text-primary-600 hover:bg-gray-100 font-medium py-3 px-8 rounded-lg transition-colors text-lg">
    24	                Join as Stallholder
    25	              </Link>
    26	            </div>
    27	          </div>
    28	        </div>
    29	      </section>
    30	
    31	      {/* Features Section */}
    32	      <section className="py-20 bg-white">
    33	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center mb-16">
    35	            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
    36	              Why Choose SA Markets?
    37	            </h2>
    38	            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
    39	              We're building stronger communities by connecting local markets, stallholders, and customers across South Australia.
    40	            </p>
    41	          </div>
    42	
    43	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
    44	            <div className="text-center">
    45	              <div className="bg-primary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    46	                <MapPin className="h-8 w-8 text-primary-600" />
    47	              </div>
    48	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Find Markets Nearby</h3>
    49	              <p className="text-gray-600">
    50	                Discover farmers markets, craft fairs, and community markets in your local area with our interactive map and search tools.
    51	              </p>
    52	            </div>
    53	
    54	            <div className="text-center">
    55	              <div className="bg-secondary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    56	                <Users className="h-8 w-8 text-secondary-600" />
    57	              </div>
    58	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Connect Communities</h3>
    59	              <p className="text-gray-600">
    60	                Join a vibrant network of local producers, artisans, and market-goers who share a passion for community and quality.
    61	              </p>
    62	            </div>
    63	
    64	            <div className="text-center">
    65	              <div className="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    66	                <ShoppingBag className="h-8 w-8 text-green-600" />
    67	              </div>
    68	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Support Local Business</h3>
    69	              <p className="text-gray-600">
    70	                Shop directly from local farmers, makers, and small businesses while supporting your community's economic growth.
    71	              </p>
    72	            </div>
    73	          </div>
    74	        </div>
    75	      </section>
    76	
    77	      {/* CTA Section */}
    78	      <section className="py-16 bg-gray-50">
    79	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    80	          <h2 className="text-3xl font-bold text-gray-900 mb-4">
    81	            Ready to explore local markets?
    82	          </h2>
    83	          <p className="text-xl text-gray-600 mb-8">
    84	            Join thousands of South Australians discovering amazing local products and experiences.
    85	          </p>
    86	          <Link to="/markets" className="btn-primary text-lg px-8 py-3 inline-flex items-center">
    87	            Start Exploring
    88	            <ArrowRight className="h-5 w-5 ml-2" />
    89	          </Link>
    90	        </div>
    91	      </section>
    92	    </div>
    93	  )
    94	}

========================================

üìÅ FILE: src/pages/Login.jsx
   Size: 5.2K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate, useLocation } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Login() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    email: '',
    10	    password: ''
    11	  })
    12	  
    13	  const { login, loading, error } = useAuth()
    14	  const navigate = useNavigate()
    15	  const location = useLocation()
    16	  
    17	  const from = location.state?.from?.pathname || '/dashboard'
    18	
    19	  const handleSubmit = async (e) => {
    20	    e.preventDefault()
    21	    try {
    22	      await login(formData.email, formData.password)
    23	      navigate(from, { replace: true })
    24	    } catch (err) {
    25	      // Error is handled by AuthContext
    26	      console.error('Login failed:', err)
    27	    }
    28	  }
    29	
    30	  return (
    31	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    32	      <div className="max-w-md w-full space-y-8">
    33	        <div>
    34	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    35	            Welcome back
    36	          </h2>
    37	          <p className="mt-2 text-center text-sm text-gray-600">
    38	            Sign in to your account
    39	          </p>
    40	        </div>
    41	        
    42	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    43	          {error && (
    44	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    45	              {typeof error === 'object' ? error.general || 'Login failed' : error}
    46	            </div>
    47	          )}
    48	          
    49	          <div className="space-y-4">
    50	            <div>
    51	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    52	                Email address
    53	              </label>
    54	              <input
    55	                id="email"
    56	                name="email"
    57	                type="email"
    58	                required
    59	                className="input-field mt-1"
    60	                placeholder="Enter your email"
    61	                value={formData.email}
    62	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    63	                disabled={loading}
    64	              />
    65	              {error?.email && (
    66	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    67	              )}
    68	            </div>
    69	            
    70	            <div>
    71	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    72	                Password
    73	              </label>
    74	              <div className="mt-1 relative">
    75	                <input
    76	                  id="password"
    77	                  name="password"
    78	                  type={showPassword ? 'text' : 'password'}
    79	                  required
    80	                  className="input-field pr-10"
    81	                  placeholder="Enter your password"
    82	                  value={formData.password}
    83	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
    84	                  disabled={loading}
    85	                />
    86	                <button
    87	                  type="button"
    88	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
    89	                  onClick={() => setShowPassword(!showPassword)}
    90	                  disabled={loading}
    91	                >
    92	                  {showPassword ? (
    93	                    <EyeOff className="h-5 w-5 text-gray-400" />
    94	                  ) : (
    95	                    <Eye className="h-5 w-5 text-gray-400" />
    96	                  )}
    97	                </button>
    98	              </div>
    99	              {error?.password && (
   100	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   101	              )}
   102	            </div>
   103	          </div>
   104	
   105	          <div className="flex items-center justify-between">
   106	            <div className="flex items-center">
   107	              <input
   108	                id="remember-me"
   109	                name="remember-me"
   110	                type="checkbox"
   111	                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   112	              />
   113	              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
   114	                Remember me
   115	              </label>
   116	            </div>
   117	
   118	            <div className="text-sm">
   119	              <Link to="/forgot-password" className="text-primary-600 hover:text-primary-500">
   120	                Forgot your password?
   121	              </Link>
   122	            </div>
   123	          </div>
   124	
   125	          <div>
   126	            <button 
   127	              type="submit" 
   128	              className="btn-primary w-full flex items-center justify-center"
   129	              disabled={loading}
   130	            >
   131	              {loading ? (
   132	                <>
   133	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   134	                  Signing in...
   135	                </>
   136	              ) : (
   137	                'Sign in'
   138	              )}
   139	            </button>
   140	          </div>
   141	
   142	          <div className="text-center">
   143	            <span className="text-sm text-gray-600">
   144	              Don't have an account?{' '}
   145	              <Link to="/register" className="text-primary-600 hover:text-primary-500 font-medium">
   146	                Sign up here
   147	              </Link>
   148	            </span>
   149	          </div>
   150	        </form>
   151	      </div>
   152	    </div>
   153	  )
   154	}

========================================

üìÅ FILE: src/pages/MarketDetail.jsx
   Size: 5.1K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { useParams, Link } from 'react-router-dom'
     3	import { MapPin, Clock, Calendar, ArrowLeft } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketDetail() {
     7	  const { slug } = useParams()
     8	  const [market, setMarket] = useState(null)
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	
    12	  useEffect(() => {
    13	    fetchMarket()
    14	  }, [slug])
    15	
    16	  const fetchMarket = async () => {
    17	    try {
    18	      setLoading(true)
    19	      setError(null)
    20	      const marketData = await marketService.getMarket(slug)
    21	      setMarket(marketData)
    22	    } catch (error) {
    23	      console.error('Error fetching market:', error)
    24	      setError('Market not found or failed to load.')
    25	    } finally {
    26	      setLoading(false)
    27	    }
    28	  }
    29	
    30	  if (loading) {
    31	    return (
    32	      <div className="min-h-screen bg-gray-50 py-8">
    33	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center py-12">
    35	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    36	            <p className="mt-4 text-gray-600">Loading market details...</p>
    37	          </div>
    38	        </div>
    39	      </div>
    40	    )
    41	  }
    42	
    43	  if (error || !market) {
    44	    return (
    45	      <div className="min-h-screen bg-gray-50 py-8">
    46	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    47	          <div className="text-center py-12">
    48	            <p className="text-red-600 mb-4">{error}</p>
    49	            <Link to="/markets" className="btn-primary">
    50	              Back to Markets
    51	            </Link>
    52	          </div>
    53	        </div>
    54	      </div>
    55	    )
    56	  }
    57	
    58	  return (
    59	    <div className="min-h-screen bg-gray-50 py-8">
    60	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    61	        <Link to="/markets" className="inline-flex items-center text-primary-600 hover:text-primary-500 mb-6">
    62	          <ArrowLeft className="h-5 w-5 mr-2" />
    63	          Back to Markets
    64	        </Link>
    65	
    66	        <div className="bg-white rounded-lg shadow p-8 mb-8">
    67	          {market.expand?.category && (
    68	            <div className="mb-4">
    69	              <span 
    70	                className="inline-block text-white text-sm px-3 py-1 rounded-full"
    71	                style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
    72	              >
    73	                {market.expand.category.name}
    74	              </span>
    75	            </div>
    76	          )}
    77	
    78	          <h1 className="text-4xl font-bold text-gray-900 mb-4">{market.name}</h1>
    79	          
    80	          <div className="flex items-center text-gray-600 mb-6">
    81	            <MapPin className="h-5 w-5 mr-2" />
    82	            <span>{market.address || `${market.suburb}, ${market.state}`}</span>
    83	          </div>
    84	          
    85	          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    86	            {market.frequency && (
    87	              <div className="flex items-center">
    88	                <Calendar className="h-5 w-5 text-primary-600 mr-3" />
    89	                <div>
    90	                  <p className="font-medium text-gray-900">Schedule</p>
    91	                  <p className="text-gray-600">{market.frequency}</p>
    92	                </div>
    93	              </div>
    94	            )}
    95	
    96	            {market.operating_hours && (
    97	              <div className="flex items-center">
    98	                <Clock className="h-5 w-5 text-primary-600 mr-3" />
    99	                <div>
   100	                  <p className="font-medium text-gray-900">Hours</p>
   101	                  <p className="text-gray-600">{market.operating_hours}</p>
   102	                </div>
   103	              </div>
   104	            )}
   105	
   106	            {market.website && (
   107	              <div className="flex items-center">
   108	                <div>
   109	                  <p className="font-medium text-gray-900">Website</p>
   110	                  <a 
   111	                    href={market.website} 
   112	                    target="_blank" 
   113	                    rel="noopener noreferrer"
   114	                    className="text-primary-600 hover:underline"
   115	                  >
   116	                    Visit Site
   117	                  </a>
   118	                </div>
   119	              </div>
   120	            )}
   121	          </div>
   122	        </div>
   123	
   124	        {market.description && (
   125	          <div className="bg-white rounded-lg shadow p-8 mb-8">
   126	            <h2 className="text-2xl font-bold text-gray-900 mb-4">About This Market</h2>
   127	            <div className="text-gray-600 leading-relaxed">
   128	              {market.description}
   129	            </div>
   130	          </div>
   131	        )}
   132	
   133	        <div className="bg-white rounded-lg shadow p-8">
   134	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Interested in Selling Here?</h2>
   135	          <p className="text-gray-600 mb-6">
   136	            Connect with the market organizers to learn about stallholder opportunities, 
   137	            application requirements, and available spaces.
   138	          </p>
   139	          <div className="flex flex-col sm:flex-row gap-4">
   140	            <Link to="/register" className="btn-primary">
   141	              Apply as Stallholder
   142	            </Link>
   143	            <button className="btn-secondary">
   144	              Contact Organizer
   145	            </button>
   146	          </div>
   147	        </div>
   148	      </div>
   149	    </div>
   150	  )
   151	}

========================================

üìÅ FILE: src/pages/MarketList.jsx
   Size: 7.3K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { Link } from 'react-router-dom'
     3	import { Search, Filter, MapPin, Clock, Calendar } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketList() {
     7	  const [markets, setMarkets] = useState([])
     8	  const [categories, setCategories] = useState([])
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	  const [filters, setFilters] = useState({
    12	    search: '',
    13	    category: '',
    14	    state: 'SA'
    15	  })
    16	
    17	  useEffect(() => {
    18	    fetchData()
    19	  }, [filters])
    20	
    21	  const fetchData = async () => {
    22	    try {
    23	      setLoading(true)
    24	      setError(null)
    25	
    26	      // Fetch categories
    27	      const categoriesData = await marketService.getCategories()
    28	      setCategories(categoriesData)
    29	
    30	      // Fetch markets with filters
    31	      const marketsData = await marketService.getMarkets({
    32	        search: filters.search,
    33	        category: filters.category,
    34	        state: filters.state,
    35	        perPage: 50
    36	      })
    37	      
    38	      setMarkets(marketsData.items || [])
    39	    } catch (error) {
    40	      console.error('Error fetching data:', error)
    41	      setError('Failed to load markets. Please try again.')
    42	    } finally {
    43	      setLoading(false)
    44	    }
    45	  }
    46	
    47	  const handleSearchChange = (e) => {
    48	    setFilters({ ...filters, search: e.target.value })
    49	  }
    50	
    51	  const handleCategoryChange = (categoryId) => {
    52	    setFilters({ ...filters, category: categoryId })
    53	  }
    54	
    55	  if (loading) {
    56	    return (
    57	      <div className="min-h-screen bg-gray-50 py-8">
    58	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    59	          <div className="text-center py-12">
    60	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    61	            <p className="mt-4 text-gray-600">Loading markets...</p>
    62	          </div>
    63	        </div>
    64	      </div>
    65	    )
    66	  }
    67	
    68	  if (error) {
    69	    return (
    70	      <div className="min-h-screen bg-gray-50 py-8">
    71	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	          <div className="text-center py-12">
    73	            <p className="text-red-600">{error}</p>
    74	            <button 
    75	              onClick={fetchData}
    76	              className="btn-primary mt-4"
    77	            >
    78	              Try Again
    79	            </button>
    80	          </div>
    81	        </div>
    82	      </div>
    83	    )
    84	  }
    85	
    86	  return (
    87	    <div className="min-h-screen bg-gray-50 py-8">
    88	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    89	        <div className="mb-8">
    90	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Browse Markets</h1>
    91	          <p className="text-gray-600">
    92	            Discover {markets.length} local markets across South Australia
    93	          </p>
    94	        </div>
    95	
    96	        <div className="bg-white rounded-lg shadow p-6 mb-8">
    97	          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
    98	            <div className="md:col-span-6">
    99	              <div className="relative">
   100	                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   101	                <input
   102	                  type="text"
   103	                  placeholder="Search markets by name or location..."
   104	                  className="input-field pl-10"
   105	                  value={filters.search}
   106	                  onChange={handleSearchChange}
   107	                />
   108	              </div>
   109	            </div>
   110	
   111	            <div className="md:col-span-4">
   112	              <select
   113	                className="input-field"
   114	                value={filters.category}
   115	                onChange={(e) => handleCategoryChange(e.target.value)}
   116	              >
   117	                <option value="">All Categories</option>
   118	                {categories.map((category) => (
   119	                  <option key={category.id} value={category.id}>
   120	                    {category.name}
   121	                  </option>
   122	                ))}
   123	              </select>
   124	            </div>
   125	
   126	            <div className="md:col-span-2">
   127	              <select
   128	                className="input-field"
   129	                value={filters.state}
   130	                onChange={(e) => setFilters({ ...filters, state: e.target.value })}
   131	              >
   132	                <option value="SA">South Australia</option>
   133	                <option value="VIC">Victoria</option>
   134	                <option value="NSW">New South Wales</option>
   135	                <option value="QLD">Queensland</option>
   136	                <option value="WA">Western Australia</option>
   137	                <option value="TAS">Tasmania</option>
   138	                <option value="NT">Northern Territory</option>
   139	                <option value="ACT">ACT</option>
   140	              </select>
   141	            </div>
   142	          </div>
   143	        </div>
   144	
   145	        {markets.length === 0 ? (
   146	          <div className="text-center py-12">
   147	            <p className="text-gray-600">No markets found matching your criteria.</p>
   148	            <button 
   149	              onClick={() => setFilters({ search: '', category: '', state: 'SA' })}
   150	              className="btn-secondary mt-4"
   151	            >
   152	              Clear Filters
   153	            </button>
   154	          </div>
   155	        ) : (
   156	          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
   157	            {markets.map((market) => (
   158	              <div key={market.id} className="card hover:shadow-lg transition-shadow">
   159	                {market.expand?.category && (
   160	                  <div className="mb-4">
   161	                    <span 
   162	                      className="inline-block text-white text-xs px-2 py-1 rounded-full"
   163	                      style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
   164	                    >
   165	                      {market.expand.category.name}
   166	                    </span>
   167	                  </div>
   168	                )}
   169	
   170	                <h3 className="text-xl font-semibold text-gray-900 mb-2">{market.name}</h3>
   171	                
   172	                <div className="flex items-center text-gray-600 mb-2">
   173	                  <MapPin className="h-4 w-4 mr-1" />
   174	                  <span>{market.suburb}, {market.state}</span>
   175	                </div>
   176	
   177	                {market.frequency && (
   178	                  <div className="flex items-center text-gray-600 mb-2">
   179	                    <Calendar className="h-4 w-4 mr-1" />
   180	                    <span>{market.frequency}</span>
   181	                  </div>
   182	                )}
   183	
   184	                {market.operating_hours && (
   185	                  <div className="flex items-center text-gray-600 mb-4">
   186	                    <Clock className="h-4 w-4 mr-1" />
   187	                    <span>{market.operating_hours}</span>
   188	                  </div>
   189	                )}
   190	
   191	                {market.description && (
   192	                  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
   193	                    {market.description.substring(0, 100)}...
   194	                  </p>
   195	                )}
   196	
   197	                <div className="flex gap-2">
   198	                  <Link 
   199	                    to={`/markets/${market.slug}`}
   200	                    className="btn-primary flex-1 text-center"
   201	                  >
   202	                    View Details
   203	                  </Link>
   204	                  {market.website && (
   205	                    <button className="btn-secondary px-3 py-2" title="Visit Website">
   206	                      üåê
   207	                    </button>
   208	                  )}
   209	                </div>
   210	              </div>
   211	            ))}
   212	          </div>
   213	        )}
   214	      </div>
   215	    </div>
   216	  )
   217	}

========================================

üìÅ FILE: src/pages/Register.jsx
   Size: 5.9K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Register() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    name: '',
    10	    email: '',
    11	    password: '',
    12	    role: 'customer'
    13	  })
    14	  
    15	  const { register, loading, error } = useAuth()
    16	  const navigate = useNavigate()
    17	
    18	  const handleSubmit = async (e) => {
    19	    e.preventDefault()
    20	    try {
    21	      await register(formData)
    22	      navigate('/dashboard')
    23	    } catch (err) {
    24	      // Error is handled by AuthContext
    25	      console.error('Registration failed:', err)
    26	    }
    27	  }
    28	
    29	  return (
    30	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    31	      <div className="max-w-md w-full space-y-8">
    32	        <div>
    33	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    34	            Join SA Markets
    35	          </h2>
    36	          <p className="mt-2 text-center text-sm text-gray-600">
    37	            Create your account to get started
    38	          </p>
    39	        </div>
    40	        
    41	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    42	          {error && (
    43	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    44	              {typeof error === 'object' ? error.general || 'Registration failed' : error}
    45	            </div>
    46	          )}
    47	          
    48	          <div className="space-y-4">
    49	            <div>
    50	              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
    51	                Full Name
    52	              </label>
    53	              <input
    54	                id="name"
    55	                name="name"
    56	                type="text"
    57	                required
    58	                className="input-field mt-1"
    59	                placeholder="Enter your full name"
    60	                value={formData.name}
    61	                onChange={(e) => setFormData({...formData, name: e.target.value})}
    62	                disabled={loading}
    63	              />
    64	              {error?.name && (
    65	                <p className="mt-1 text-sm text-red-600">{error.name}</p>
    66	              )}
    67	            </div>
    68	            
    69	            <div>
    70	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    71	                Email address
    72	              </label>
    73	              <input
    74	                id="email"
    75	                name="email"
    76	                type="email"
    77	                required
    78	                className="input-field mt-1"
    79	                placeholder="Enter your email"
    80	                value={formData.email}
    81	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    82	                disabled={loading}
    83	              />
    84	              {error?.email && (
    85	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    86	              )}
    87	            </div>
    88	            
    89	            <div>
    90	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    91	                Password
    92	              </label>
    93	              <div className="mt-1 relative">
    94	                <input
    95	                  id="password"
    96	                  name="password"
    97	                  type={showPassword ? 'text' : 'password'}
    98	                  required
    99	                  className="input-field pr-10"
   100	                  placeholder="Create a password"
   101	                  value={formData.password}
   102	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
   103	                  disabled={loading}
   104	                />
   105	                <button
   106	                  type="button"
   107	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
   108	                  onClick={() => setShowPassword(!showPassword)}
   109	                  disabled={loading}
   110	                >
   111	                  {showPassword ? (
   112	                    <EyeOff className="h-5 w-5 text-gray-400" />
   113	                  ) : (
   114	                    <Eye className="h-5 w-5 text-gray-400" />
   115	                  )}
   116	                </button>
   117	              </div>
   118	              {error?.password && (
   119	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   120	              )}
   121	            </div>
   122	            
   123	            <div>
   124	              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
   125	                I am a...
   126	              </label>
   127	              <select
   128	                id="role"
   129	                name="role"
   130	                className="input-field mt-1"
   131	                value={formData.role}
   132	                onChange={(e) => setFormData({...formData, role: e.target.value})}
   133	                disabled={loading}
   134	              >
   135	                <option value="customer">Market Customer</option>
   136	                <option value="stallholder">Stallholder/Vendor</option>
   137	                <option value="organizer">Market Organizer</option>
   138	              </select>
   139	              {error?.role && (
   140	                <p className="mt-1 text-sm text-red-600">{error.role}</p>
   141	              )}
   142	            </div>
   143	          </div>
   144	
   145	          <div>
   146	            <button 
   147	              type="submit" 
   148	              className="btn-primary w-full flex items-center justify-center"
   149	              disabled={loading}
   150	            >
   151	              {loading ? (
   152	                <>
   153	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   154	                  Creating account...
   155	                </>
   156	              ) : (
   157	                'Create Account'
   158	              )}
   159	            </button>
   160	          </div>
   161	
   162	          <div className="text-center">
   163	            <span className="text-sm text-gray-600">
   164	              Already have an account?{' '}
   165	              <Link to="/login" className="text-primary-600 hover:text-primary-500 font-medium">
   166	                Sign in here
   167	              </Link>
   168	            </span>
   169	          </div>
   170	        </form>
   171	      </div>
   172	    </div>
   173	  )
   174	}

========================================

üìÅ FILE: src/App.css
   Size: 606 | Modified: 2025-06-02
----------------------------------------
     1	#root {
     2	  max-width: 1280px;
     3	  margin: 0 auto;
     4	  padding: 2rem;
     5	  text-align: center;
     6	}
     7	
     8	.logo {
     9	  height: 6em;
    10	  padding: 1.5em;
    11	  will-change: filter;
    12	  transition: filter 300ms;
    13	}
    14	.logo:hover {
    15	  filter: drop-shadow(0 0 2em #646cffaa);
    16	}
    17	.logo.react:hover {
    18	  filter: drop-shadow(0 0 2em #61dafbaa);
    19	}
    20	
    21	@keyframes logo-spin {
    22	  from {
    23	    transform: rotate(0deg);
    24	  }
    25	  to {
    26	    transform: rotate(360deg);
    27	  }
    28	}
    29	
    30	@media (prefers-reduced-motion: no-preference) {
    31	  a:nth-of-type(2) .logo {
    32	    animation: logo-spin infinite 20s linear;
    33	  }
    34	}
    35	
    36	.card {
    37	  padding: 2em;
    38	}
    39	
    40	.read-the-docs {
    41	  color: #888;
    42	}

========================================

üìÅ FILE: src/App.jsx
   Size: 3.5K | Modified: 2025-06-03
----------------------------------------
     1	// src/App.jsx - Add CreateMarket route
     2	import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
     3	import { AuthProvider } from './contexts/AuthContext'
     4	import Layout from './components/layout/Layout'
     5	import Home from './pages/Home'
     6	import MarketList from './pages/MarketList'
     7	import MarketDetail from './pages/MarketDetail'
     8	import CreateMarket from './pages/CreateMarket'
     9	import Login from './pages/Login'
    10	import Register from './pages/Register'
    11	import Dashboard from './pages/Dashboard'
    12	import ProtectedRoute from './components/auth/ProtectedRoute'
    13	import './App.css'
    14	
    15	function App() {
    16	  return (
    17	    <AuthProvider>
    18	      <Router>
    19	        <Layout>
    20	          <Routes>
    21	            <Route path="/" element={<Home />} />
    22	            <Route path="/markets" element={<MarketList />} />
    23	            <Route path="/markets/:slug" element={<MarketDetail />} />
    24	            <Route path="/login" element={<Login />} />
    25	            <Route path="/register" element={<Register />} />
    26	            <Route 
    27	              path="/dashboard" 
    28	              element={
    29	                <ProtectedRoute>
    30	                  <Dashboard />
    31	                </ProtectedRoute>
    32	              } 
    33	            />
    34	            <Route 
    35	              path="/markets/create" 
    36	              element={
    37	                <ProtectedRoute requiredRole="organizer">
    38	                  <CreateMarket />
    39	                </ProtectedRoute>
    40	              } 
    41	            />
    42	            {/* Placeholder routes for future features */}
    43	            <Route 
    44	              path="/profile" 
    45	              element={
    46	                <ProtectedRoute>
    47	                  <div className="min-h-screen bg-gray-50 py-8">
    48	                    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    49	                      <h1 className="text-3xl font-bold text-gray-900 mb-4">Profile</h1>
    50	                      <p className="text-gray-600">Profile management coming soon...</p>
    51	                    </div>
    52	                  </div>
    53	                </ProtectedRoute>
    54	              } 
    55	            />
    56	            <Route 
    57	              path="/stallholders" 
    58	              element={
    59	                <div className="min-h-screen bg-gray-50 py-8">
    60	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    61	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Stallholders</h1>
    62	                    <p className="text-gray-600">Stallholder directory coming soon...</p>
    63	                  </div>
    64	                </div>
    65	              } 
    66	            />
    67	            <Route 
    68	              path="/organizers" 
    69	              element={
    70	                <div className="min-h-screen bg-gray-50 py-8">
    71	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Market Organizers</h1>
    73	                    <p className="text-gray-600">Market organizer tools coming soon...</p>
    74	                  </div>
    75	                </div>
    76	              } 
    77	            />
    78	            <Route 
    79	              path="/about" 
    80	              element={
    81	                <div className="min-h-screen bg-gray-50 py-8">
    82	                  <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    83	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">About SA Markets</h1>
    84	                    <p className="text-gray-600">About page coming soon...</p>
    85	                  </div>
    86	                </div>
    87	              } 
    88	            />
    89	          </Routes>
    90	        </Layout>
    91	      </Router>
    92	    </AuthProvider>
    93	  )
    94	}
    95	
    96	export default App

========================================

üìÅ FILE: src/assets/react.svg
   Size: 4.1K | Modified: 2025-06-02
----------------------------------------
     1	<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

========================================

üìÅ FILE: src/components/auth/ProtectedRoute.jsx
   Size: 749 | Modified: 2025-06-02
----------------------------------------
     1	// src/components/auth/ProtectedRoute.jsx
     2	import { Navigate, useLocation } from 'react-router-dom'
     3	import { useAuth } from '../../contexts/AuthContext'
     4	
     5	export default function ProtectedRoute({ children, requiredRole = null }) {
     6	  const { user, loading } = useAuth()
     7	  const location = useLocation()
     8	
     9	  if (loading) {
    10	    return (
    11	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    12	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    13	      </div>
    14	    )
    15	  }
    16	
    17	  if (!user) {
    18	    return <Navigate to="/login" state={{ from: location }} replace />
    19	  }
    20	
    21	  if (requiredRole && user.role !== requiredRole) {
    22	    return <Navigate to="/dashboard" replace />
    23	  }
    24	
    25	  return children
    26	}

========================================

üìÅ FILE: src/components/layout/Footer.jsx
   Size: 3.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { MapPin, Mail, Phone, Facebook, Instagram, Twitter } from 'lucide-react'
     3	
     4	export default function Footer() {
     5	  return (
     6	    <footer className="bg-gray-900 text-white">
     7	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
     8	        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
     9	          {/* Brand */}
    10	          <div className="col-span-1 md:col-span-2">
    11	            <div className="flex items-center space-x-2 mb-4">
    12	              <MapPin className="h-8 w-8 text-primary-400" />
    13	              <span className="text-xl font-bold">SA Markets Directory</span>
    14	            </div>
    15	            <p className="text-gray-300 mb-4 max-w-md">
    16	              Connecting communities through vibrant local markets across South Australia. 
    17	              Discover fresh produce, unique crafts, and local businesses in your area.
    18	            </p>
    19	            <div className="flex space-x-4">
    20	              <Facebook className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    21	              <Instagram className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    22	              <Twitter className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    23	            </div>
    24	          </div>
    25	
    26	          {/* Quick Links */}
    27	          <div>
    28	            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
    29	            <ul className="space-y-2">
    30	              <li><Link to="/markets" className="text-gray-300 hover:text-primary-400 transition-colors">Browse Markets</Link></li>
    31	              <li><Link to="/stallholders" className="text-gray-300 hover:text-primary-400 transition-colors">For Stallholders</Link></li>
    32	              <li><Link to="/organizers" className="text-gray-300 hover:text-primary-400 transition-colors">For Organizers</Link></li>
    33	              <li><Link to="/about" className="text-gray-300 hover:text-primary-400 transition-colors">About Us</Link></li>
    34	              <li><Link to="/contact" className="text-gray-300 hover:text-primary-400 transition-colors">Contact</Link></li>
    35	            </ul>
    36	          </div>
    37	
    38	          {/* Support */}
    39	          <div>
    40	            <h3 className="text-lg font-semibold mb-4">Support</h3>
    41	            <ul className="space-y-2">
    42	              <li><Link to="/help" className="text-gray-300 hover:text-primary-400 transition-colors">Help Center</Link></li>
    43	              <li><Link to="/privacy" className="text-gray-300 hover:text-primary-400 transition-colors">Privacy Policy</Link></li>
    44	              <li><Link to="/terms" className="text-gray-300 hover:text-primary-400 transition-colors">Terms of Service</Link></li>
    45	              <li>
    46	                <div className="flex items-center space-x-2 text-gray-300">
    47	                  <Mail className="h-4 w-4" />
    48	                  <span>hello@samarkets.com.au</span>
    49	                </div>
    50	              </li>
    51	            </ul>
    52	          </div>
    53	        </div>
    54	
    55	        <hr className="border-gray-800 my-8" />
    56	
    57	        <div className="flex flex-col md:flex-row justify-between items-center">
    58	          <p className="text-gray-400 text-sm">
    59	            ¬© 2025 SA Markets Directory. All rights reserved.
    60	          </p>
    61	          <p className="text-gray-400 text-sm mt-2 md:mt-0">
    62	            Built with ‚ù§Ô∏è for Australian communities
    63	          </p>
    64	        </div>
    65	      </div>
    66	    </footer>
    67	  )
    68	}

========================================

üìÅ FILE: src/components/layout/Header.jsx
   Size: 8.6K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/layout/Header.jsx - Updated with Auth Integration
     2	import { useState } from 'react'
     3	import { Link, useNavigate } from 'react-router-dom'
     4	import { Menu, X, MapPin, User, LogOut, Settings } from 'lucide-react'
     5	import { useAuth } from '../../contexts/AuthContext'
     6	
     7	export default function Header() {
     8	  const [isMenuOpen, setIsMenuOpen] = useState(false)
     9	  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
    10	  const { user, logout, isAuthenticated } = useAuth()
    11	  const navigate = useNavigate()
    12	
    13	  const handleLogout = () => {
    14	    logout()
    15	    navigate('/')
    16	    setIsUserMenuOpen(false)
    17	  }
    18	
    19	  const getRoleDisplayName = (role) => {
    20	    switch(role) {
    21	      case 'stallholder': return 'Stallholder'
    22	      case 'organizer': return 'Organizer'
    23	      default: return 'Customer'
    24	    }
    25	  }
    26	
    27	  return (
    28	    <header className="bg-white shadow-sm border-b">
    29	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    30	        <div className="flex justify-between items-center h-16">
    31	          {/* Logo */}
    32	          <Link to="/" className="flex items-center space-x-2">
    33	            <MapPin className="h-8 w-8 text-primary-600" />
    34	            <span className="text-xl font-bold text-gray-900">SA Markets</span>
    35	          </Link>
    36	
    37	          {/* Desktop Navigation */}
    38	          <nav className="hidden md:flex space-x-8">
    39	            <Link to="/markets" className="text-gray-700 hover:text-primary-600 transition-colors">
    40	              Browse Markets
    41	            </Link>
    42	            <Link to="/stallholders" className="text-gray-700 hover:text-primary-600 transition-colors">
    43	              For Stallholders
    44	            </Link>
    45	            <Link to="/organizers" className="text-gray-700 hover:text-primary-600 transition-colors">
    46	              For Organizers
    47	            </Link>
    48	            <Link to="/about" className="text-gray-700 hover:text-primary-600 transition-colors">
    49	              About
    50	            </Link>
    51	          </nav>
    52	
    53	          {/* Desktop Auth Section */}
    54	          <div className="hidden md:flex items-center space-x-4">
    55	            {isAuthenticated ? (
    56	              <div className="relative">
    57	                <button
    58	                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
    59	                  className="flex items-center space-x-2 text-gray-700 hover:text-primary-600 transition-colors"
    60	                >
    61	                  <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
    62	                    <User className="h-5 w-5 text-primary-600" />
    63	                  </div>
    64	                  <span className="font-medium">{user?.name || 'User'}</span>
    65	                </button>
    66	
    67	                {/* User Dropdown Menu */}
    68	                {isUserMenuOpen && (
    69	                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
    70	                    <div className="px-4 py-2 border-b border-gray-100">
    71	                      <p className="text-sm font-medium text-gray-900">{user?.name}</p>
    72	                      <p className="text-xs text-gray-500">{user?.email}</p>
    73	                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded-full">
    74	                        {getRoleDisplayName(user?.role)}
    75	                      </span>
    76	                    </div>
    77	                    
    78	                    <Link
    79	                      to="/dashboard"
    80	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    81	                      onClick={() => setIsUserMenuOpen(false)}
    82	                    >
    83	                      <User className="h-4 w-4 mr-3" />
    84	                      Dashboard
    85	                    </Link>
    86	                    
    87	                    <Link
    88	                      to="/profile"
    89	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    90	                      onClick={() => setIsUserMenuOpen(false)}
    91	                    >
    92	                      <Settings className="h-4 w-4 mr-3" />
    93	                      Profile Settings
    94	                    </Link>
    95	                    
    96	                    <hr className="my-1" />
    97	                    
    98	                    <button
    99	                      onClick={handleLogout}
   100	                      className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
   101	                    >
   102	                      <LogOut className="h-4 w-4 mr-3" />
   103	                      Sign Out
   104	                    </button>
   105	                  </div>
   106	                )}
   107	              </div>
   108	            ) : (
   109	              <>
   110	                <Link to="/login" className="text-gray-700 hover:text-primary-600 transition-colors">
   111	                  Log In
   112	                </Link>
   113	                <Link to="/register" className="btn-primary">
   114	                  Sign Up
   115	                </Link>
   116	              </>
   117	            )}
   118	          </div>
   119	
   120	          {/* Mobile menu button */}
   121	          <button
   122	            onClick={() => setIsMenuOpen(!isMenuOpen)}
   123	            className="md:hidden p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"
   124	          >
   125	            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
   126	          </button>
   127	        </div>
   128	
   129	        {/* Mobile Navigation */}
   130	        {isMenuOpen && (
   131	          <div className="md:hidden py-4 border-t">
   132	            <nav className="flex flex-col space-y-2">
   133	              <Link 
   134	                to="/markets" 
   135	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   136	                onClick={() => setIsMenuOpen(false)}
   137	              >
   138	                Browse Markets
   139	              </Link>
   140	              <Link 
   141	                to="/stallholders" 
   142	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   143	                onClick={() => setIsMenuOpen(false)}
   144	              >
   145	                For Stallholders
   146	              </Link>
   147	              <Link 
   148	                to="/organizers" 
   149	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   150	                onClick={() => setIsMenuOpen(false)}
   151	              >
   152	                For Organizers
   153	              </Link>
   154	              <Link 
   155	                to="/about" 
   156	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   157	                onClick={() => setIsMenuOpen(false)}
   158	              >
   159	                About
   160	              </Link>
   161	              
   162	              <hr className="my-2" />
   163	              
   164	              {isAuthenticated ? (
   165	                <>
   166	                  <div className="px-3 py-2">
   167	                    <p className="text-sm font-medium text-gray-900">{user?.name}</p>
   168	                    <p className="text-xs text-gray-500">{getRoleDisplayName(user?.role)}</p>
   169	                  </div>
   170	                  <Link 
   171	                    to="/dashboard" 
   172	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   173	                    onClick={() => setIsMenuOpen(false)}
   174	                  >
   175	                    Dashboard
   176	                  </Link>
   177	                  <Link 
   178	                    to="/profile" 
   179	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   180	                    onClick={() => setIsMenuOpen(false)}
   181	                  >
   182	                    Profile Settings
   183	                  </Link>
   184	                  <button
   185	                    onClick={() => {
   186	                      handleLogout()
   187	                      setIsMenuOpen(false)
   188	                    }}
   189	                    className="px-3 py-2 text-left text-red-600 hover:text-red-500 transition-colors"
   190	                  >
   191	                    Sign Out
   192	                  </button>
   193	                </>
   194	              ) : (
   195	                <>
   196	                  <Link 
   197	                    to="/login" 
   198	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   199	                    onClick={() => setIsMenuOpen(false)}
   200	                  >
   201	                    Log In
   202	                  </Link>
   203	                  <Link 
   204	                    to="/register" 
   205	                    className="px-3 py-2 btn-primary text-center mx-3"
   206	                    onClick={() => setIsMenuOpen(false)}
   207	                  >
   208	                    Sign Up
   209	                  </Link>
   210	                </>
   211	              )}
   212	            </nav>
   213	          </div>
   214	        )}
   215	      </div>
   216	      
   217	      {/* Overlay for user menu */}
   218	      {isUserMenuOpen && (
   219	        <div 
   220	          className="fixed inset-0 z-40" 
   221	          onClick={() => setIsUserMenuOpen(false)}
   222	        />
   223	      )}
   224	    </header>
   225	  )
   226	}

========================================

üìÅ FILE: src/components/layout/Layout.jsx
   Size: 287 | Modified: 2025-06-02
----------------------------------------
     1	import Header from './Header'
     2	import Footer from './Footer'
     3	
     4	export default function Layout({ children }) {
     5	  return (
     6	    <div className="min-h-screen flex flex-col">
     7	      <Header />
     8	      <main className="flex-grow">
     9	        {children}
    10	      </main>
    11	      <Footer />
    12	    </div>
    13	  )
    14	}

========================================

üìÅ FILE: src/components/market/AddressInput.jsx
   Size: 12K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/AddressInput.jsx - Google Places Integration
     2	import { useState, useEffect, useRef } from 'react'
     3	import { MapPin, Search, CheckCircle } from 'lucide-react'
     4	
     5	export default function AddressInput({ 
     6	  address, 
     7	  suburb, 
     8	  state, 
     9	  postcode, 
    10	  latitude, 
    11	  longitude,
    12	  onAddressChange 
    13	}) {
    14	  const [inputValue, setInputValue] = useState(address || '')
    15	  const [suggestions, setSuggestions] = useState([])
    16	  const [loading, setLoading] = useState(false)
    17	  const [isManualEntry, setIsManualEntry] = useState(false)
    18	  const [addressComponents, setAddressComponents] = useState({
    19	    address: address || '',
    20	    suburb: suburb || '',
    21	    state: state || 'SA',
    22	    postcode: postcode || '',
    23	    latitude: latitude || null,
    24	    longitude: longitude || null
    25	  })
    26	
    27	  const inputRef = useRef(null)
    28	  const autocompleteService = useRef(null)
    29	  const placesService = useRef(null)
    30	
    31	  useEffect(() => {
    32	    // Initialize Google Places API
    33	    if (window.google && window.google.maps) {
    34	      autocompleteService.current = new window.google.maps.places.AutocompleteService()
    35	      placesService.current = new window.google.maps.places.PlacesService(
    36	        document.createElement('div')
    37	      )
    38	    }
    39	  }, [])
    40	
    41	  useEffect(() => {
    42	    // Load Google Maps API if not already loaded
    43	    if (!window.google) {
    44	      const script = document.createElement('script')
    45	      script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}&libraries=places`
    46	      script.async = true
    47	      script.defer = true
    48	      script.onload = () => {
    49	        autocompleteService.current = new window.google.maps.places.AutocompleteService()
    50	        placesService.current = new window.google.maps.places.PlacesService(
    51	          document.createElement('div')
    52	        )
    53	      }
    54	      document.head.appendChild(script)
    55	    }
    56	  }, [])
    57	
    58	  const searchPlaces = async (query) => {
    59	    if (!autocompleteService.current || query.length < 3) {
    60	      setSuggestions([])
    61	      return
    62	    }
    63	
    64	    setLoading(true)
    65	    
    66	    const request = {
    67	      input: query,
    68	      componentRestrictions: { country: 'AU' },
    69	      types: ['address', 'establishment'],
    70	      fields: ['place_id', 'formatted_address', 'geometry', 'address_components']
    71	    }
    72	
    73	    autocompleteService.current.getPlacePredictions(request, (predictions, status) => {
    74	      setLoading(false)
    75	      if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {
    76	        setSuggestions(predictions.slice(0, 5))
    77	      } else {
    78	        setSuggestions([])
    79	      }
    80	    })
    81	  }
    82	
    83	  const selectPlace = (placeId) => {
    84	    if (!placesService.current) return
    85	
    86	    const request = {
    87	      placeId: placeId,
    88	      fields: ['formatted_address', 'geometry', 'address_components']
    89	    }
    90	
    91	    placesService.current.getDetails(request, (place, status) => {
    92	      if (status === window.google.maps.places.PlacesServiceStatus.OK && place) {
    93	        parseGooglePlace(place)
    94	        setSuggestions([])
    95	      }
    96	    })
    97	  }
    98	
    99	  const parseGooglePlace = (place) => {
   100	    const components = place.address_components
   101	    let parsedAddress = {
   102	      address: '',
   103	      suburb: '',
   104	      state: 'SA',
   105	      postcode: '',
   106	      latitude: place.geometry?.location?.lat() || null,
   107	      longitude: place.geometry?.location?.lng() || null
   108	    }
   109	
   110	    // Extract street number and route for address
   111	    const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name || ''
   112	    const route = components.find(c => c.types.includes('route'))?.long_name || ''
   113	    parsedAddress.address = `${streetNumber} ${route}`.trim()
   114	
   115	    // Extract suburb
   116	    const locality = components.find(c => 
   117	      c.types.includes('locality') || 
   118	      c.types.includes('sublocality') ||
   119	      c.types.includes('administrative_area_level_2')
   120	    )
   121	    parsedAddress.suburb = locality?.long_name || ''
   122	
   123	    // Extract state
   124	    const stateComponent = components.find(c => c.types.includes('administrative_area_level_1'))
   125	    if (stateComponent) {
   126	      const stateName = stateComponent.short_name
   127	      const stateMap = {
   128	        'NSW': 'NSW', 'VIC': 'VIC', 'QLD': 'QLD', 'SA': 'SA',
   129	        'WA': 'WA', 'TAS': 'TAS', 'NT': 'NT', 'ACT': 'ACT'
   130	      }
   131	      parsedAddress.state = stateMap[stateName] || 'SA'
   132	    }
   133	
   134	    // Extract postcode
   135	    const postcodeComponent = components.find(c => c.types.includes('postal_code'))
   136	    parsedAddress.postcode = postcodeComponent?.long_name || ''
   137	
   138	    setAddressComponents(parsedAddress)
   139	    setInputValue(place.formatted_address)
   140	    onAddressChange(parsedAddress)
   141	  }
   142	
   143	  const handleInputChange = (e) => {
   144	    const value = e.target.value
   145	    setInputValue(value)
   146	    
   147	    if (!isManualEntry) {
   148	      searchPlaces(value)
   149	    }
   150	  }
   151	
   152	  const handleManualEntry = () => {
   153	    setIsManualEntry(true)
   154	    setSuggestions([])
   155	    setInputValue('')
   156	  }
   157	
   158	  const handleManualChange = (field, value) => {
   159	    const updated = { ...addressComponents, [field]: value }
   160	    setAddressComponents(updated)
   161	    onAddressChange(updated)
   162	  }
   163	
   164	  const validateAustralianPostcode = (postcode) => {
   165	    return /^[0-9]{4}$/.test(postcode)
   166	  }
   167	
   168	  return (
   169	    <div className="space-y-4">
   170	      <div className="flex items-center justify-between">
   171	        <label className="block text-sm font-medium text-gray-700">
   172	          Market Address *
   173	        </label>
   174	        <button
   175	          type="button"
   176	          onClick={handleManualEntry}
   177	          className="text-sm text-primary-600 hover:text-primary-500"
   178	        >
   179	          Enter manually
   180	        </button>
   181	      </div>
   182	
   183	      {!isManualEntry ? (
   184	        /* Google Places Autocomplete */
   185	        <div className="relative">
   186	          <div className="relative">
   187	            <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   188	            <input
   189	              ref={inputRef}
   190	              type="text"
   191	              value={inputValue}
   192	              onChange={handleInputChange}
   193	              placeholder="Start typing the market address..."
   194	              className="input-field pl-10 pr-10"
   195	              autoComplete="off"
   196	            />
   197	            {loading && (
   198	              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
   199	                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
   200	              </div>
   201	            )}
   202	          </div>
   203	
   204	          {/* Suggestions Dropdown */}
   205	          {suggestions.length > 0 && (
   206	            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
   207	              {suggestions.map((suggestion) => (
   208	                <button
   209	                  key={suggestion.place_id}
   210	                  type="button"
   211	                  onClick={() => selectPlace(suggestion.place_id)}
   212	                  className="w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 first:rounded-t-lg last:rounded-b-lg"
   213	                >
   214	                  <div className="flex items-start">
   215	                    <MapPin className="h-4 w-4 text-gray-400 mt-1 mr-3 flex-shrink-0" />
   216	                    <div>
   217	                      <div className="font-medium text-gray-900 text-sm">
   218	                        {suggestion.structured_formatting?.main_text}
   219	                      </div>
   220	                      <div className="text-xs text-gray-500">
   221	                        {suggestion.structured_formatting?.secondary_text}
   222	                      </div>
   223	                    </div>
   224	                  </div>
   225	                </button>
   226	              ))}
   227	            </div>
   228	          )}
   229	
   230	          {/* Address Confirmation */}
   231	          {addressComponents.address && !loading && (
   232	            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
   233	              <div className="flex items-start">
   234	                <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 mr-2 flex-shrink-0" />
   235	                <div className="text-sm">
   236	                  <div className="font-medium text-green-800">Address confirmed:</div>
   237	                  <div className="text-green-700">
   238	                    {addressComponents.address}<br />
   239	                    {addressComponents.suburb}, {addressComponents.state} {addressComponents.postcode}
   240	                  </div>
   241	                  {addressComponents.latitude && (
   242	                    <div className="text-xs text-green-600 mt-1">
   243	                      Coordinates: {addressComponents.latitude.toFixed(6)}, {addressComponents.longitude.toFixed(6)}
   244	                    </div>
   245	                  )}
   246	                </div>
   247	              </div>
   248	            </div>
   249	          )}
   250	        </div>
   251	      ) : (
   252	        /* Manual Entry Form */
   253	        <div className="space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
   254	          <div className="flex items-center justify-between">
   255	            <h4 className="font-medium text-gray-900">Manual Address Entry</h4>
   256	            <button
   257	              type="button"
   258	              onClick={() => setIsManualEntry(false)}
   259	              className="text-sm text-primary-600 hover:text-primary-500"
   260	            >
   261	              Use address lookup
   262	            </button>
   263	          </div>
   264	
   265	          <div className="grid grid-cols-1 gap-4">
   266	            <div>
   267	              <label className="block text-sm font-medium text-gray-700 mb-1">
   268	                Street Address *
   269	              </label>
   270	              <input
   271	                type="text"
   272	                value={addressComponents.address}
   273	                onChange={(e) => handleManualChange('address', e.target.value)}
   274	                placeholder="123 Market Street"
   275	                className="input-field"
   276	                required
   277	              />
   278	            </div>
   279	
   280	            <div className="grid grid-cols-2 gap-4">
   281	              <div>
   282	                <label className="block text-sm font-medium text-gray-700 mb-1">
   283	                  Suburb *
   284	                </label>
   285	                <input
   286	                  type="text"
   287	                  value={addressComponents.suburb}
   288	                  onChange={(e) => handleManualChange('suburb', e.target.value)}
   289	                  placeholder="Adelaide"
   290	                  className="input-field"
   291	                  required
   292	                />
   293	              </div>
   294	
   295	              <div>
   296	                <label className="block text-sm font-medium text-gray-700 mb-1">
   297	                  State *
   298	                </label>
   299	                <select
   300	                  value={addressComponents.state}
   301	                  onChange={(e) => handleManualChange('state', e.target.value)}
   302	                  className="input-field"
   303	                  required
   304	                >
   305	                  <option value="SA">South Australia</option>
   306	                  <option value="VIC">Victoria</option>
   307	                  <option value="NSW">New South Wales</option>
   308	                  <option value="QLD">Queensland</option>
   309	                  <option value="WA">Western Australia</option>
   310	                  <option value="TAS">Tasmania</option>
   311	                  <option value="NT">Northern Territory</option>
   312	                  <option value="ACT">ACT</option>
   313	                </select>
   314	              </div>
   315	            </div>
   316	
   317	            <div className="w-32">
   318	              <label className="block text-sm font-medium text-gray-700 mb-1">
   319	                Postcode *
   320	              </label>
   321	              <input
   322	                type="text"
   323	                value={addressComponents.postcode}
   324	                onChange={(e) => handleManualChange('postcode', e.target.value)}
   325	                placeholder="5000"
   326	                pattern="[0-9]{4}"
   327	                maxLength="4"
   328	                className={`input-field ${
   329	                  addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode)
   330	                    ? 'border-red-300'
   331	                    : ''
   332	                }`}
   333	                required
   334	              />
   335	              {addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode) && (
   336	                <p className="mt-1 text-sm text-red-600">Please enter a valid 4-digit Australian postcode</p>
   337	              )}
   338	            </div>
   339	          </div>
   340	        </div>
   341	      )}
   342	    </div>
   343	  )
   344	}

========================================

üìÅ FILE: src/components/market/FlexibleFrequencySelector.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/FlexibleFrequencySelector.jsx
     2	import { useState, useEffect } from 'react'
     3	import { Calendar, Plus, X, Clock, Repeat } from 'lucide-react'
     4	
     5	export default function FlexibleFrequencySelector({ 
     6	  frequencyType, 
     7	  frequencyValue, 
     8	  frequencyDetails, 
     9	  onChange 
    10	}) {
    11	  const [localType, setLocalType] = useState(frequencyType || 'regular')
    12	  const [localValue, setLocalValue] = useState(frequencyValue || '')
    13	  const [localDetails, setLocalDetails] = useState(frequencyDetails || {})
    14	
    15	  useEffect(() => {
    16	    onChange({
    17	      frequencyType: localType,
    18	      frequencyValue: localValue,
    19	      frequencyDetails: localDetails
    20	    })
    21	  }, [localType, localValue, localDetails, onChange])
    22	
    23	  const handleTypeChange = (type) => {
    24	    setLocalType(type)
    25	    setLocalValue('')
    26	    setLocalDetails({})
    27	  }
    28	
    29	  const regularOptions = [
    30	    { value: 'daily', label: 'Daily', description: 'Every day' },
    31	    { value: 'weekly', label: 'Weekly', description: 'Every week' },
    32	    { value: 'fortnightly', label: 'Fortnightly', description: 'Every 2 weeks' },
    33	    { value: 'monthly', label: 'Monthly', description: 'Every month' }
    34	  ]
    35	
    36	  const weekDays = [
    37	    { value: 0, short: 'Sun', full: 'Sunday' },
    38	    { value: 1, short: 'Mon', full: 'Monday' },
    39	    { value: 2, short: 'Tue', full: 'Tuesday' },
    40	    { value: 3, short: 'Wed', full: 'Wednesday' },
    41	    { value: 4, short: 'Thu', full: 'Thursday' },
    42	    { value: 5, short: 'Fri', full: 'Friday' },
    43	    { value: 6, short: 'Sat', full: 'Saturday' }
    44	  ]
    45	
    46	  const weekNumbers = [
    47	    { value: 1, label: '1st' },
    48	    { value: 2, label: '2nd' },
    49	    { value: 3, label: '3rd' },
    50	    { value: 4, label: '4th' },
    51	    { value: -1, label: 'Last' }
    52	  ]
    53	
    54	  const handleMonthlyPatternChange = (weekNumber, dayOfWeek) => {
    55	    setLocalDetails({
    56	      weekNumber,
    57	      dayOfWeek,
    58	      description: `${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`
    59	    })
    60	    setLocalValue(`${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`)
    61	  }
    62	
    63	  const handleWeeklyPatternChange = (selectedDays) => {
    64	    const dayNames = selectedDays.map(day => weekDays.find(d => d.value === day)?.short).join(', ')
    65	    setLocalDetails({ selectedDays, dayNames })
    66	    setLocalValue(`Weekly: ${dayNames}`)
    67	  }
    68	
    69	  const addCustomDate = () => {
    70	    const newDate = prompt('Enter date (YYYY-MM-DD):')
    71	    if (newDate && /^\d{4}-\d{2}-\d{2}$/.test(newDate)) {
    72	      const currentDates = localDetails.customDates || []
    73	      setLocalDetails({
    74	        ...localDetails,
    75	        customDates: [...currentDates, newDate].sort()
    76	      })
    77	      setLocalValue(`${currentDates.length + 1} custom dates`)
    78	    }
    79	  }
    80	
    81	  const removeCustomDate = (dateToRemove) => {
    82	    const updatedDates = (localDetails.customDates || []).filter(date => date !== dateToRemove)
    83	    setLocalDetails({
    84	      ...localDetails,
    85	      customDates: updatedDates
    86	    })
    87	    setLocalValue(`${updatedDates.length} custom dates`)
    88	  }
    89	
    90	  return (
    91	    <div className="space-y-6">
    92	      {/* Type Selection */}
    93	      <div>
    94	        <label className="block text-sm font-medium text-gray-700 mb-3">
    95	          How often does your market run?
    96	        </label>
    97	        <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
    98	          <button
    99	            type="button"
   100	            onClick={() => handleTypeChange('regular')}
   101	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   102	              localType === 'regular'
   103	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   104	                : 'border-gray-200 hover:border-gray-300'
   105	            }`}
   106	          >
   107	            <div className="flex items-center">
   108	              <Repeat className="h-5 w-5 mr-3" />
   109	              <div>
   110	                <div className="font-medium">Regular</div>
   111	                <div className="text-sm text-gray-500">Daily, weekly, etc.</div>
   112	              </div>
   113	            </div>
   114	          </button>
   115	
   116	          <button
   117	            type="button"
   118	            onClick={() => handleTypeChange('weekly_pattern')}
   119	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   120	              localType === 'weekly_pattern'
   121	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   122	                : 'border-gray-200 hover:border-gray-300'
   123	            }`}
   124	          >
   125	            <div className="flex items-center">
   126	              <Calendar className="h-5 w-5 mr-3" />
   127	              <div>
   128	                <div className="font-medium">Weekly Pattern</div>
   129	                <div className="text-sm text-gray-500">Specific days each week</div>
   130	              </div>
   131	            </div>
   132	          </button>
   133	
   134	          <button
   135	            type="button"
   136	            onClick={() => handleTypeChange('monthly_pattern')}
   137	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   138	              localType === 'monthly_pattern'
   139	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   140	                : 'border-gray-200 hover:border-gray-300'
   141	            }`}
   142	          >
   143	            <div className="flex items-center">
   144	              <Calendar className="h-5 w-5 mr-3" />
   145	              <div>
   146	                <div className="font-medium">Monthly Pattern</div>
   147	                <div className="text-sm text-gray-500">3rd Wednesday, etc.</div>
   148	              </div>
   149	            </div>
   150	          </button>
   151	
   152	          <button
   153	            type="button"
   154	            onClick={() => handleTypeChange('custom_dates')}
   155	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   156	              localType === 'custom_dates'
   157	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   158	                : 'border-gray-200 hover:border-gray-300'
   159	            }`}
   160	          >
   161	            <div className="flex items-center">
   162	              <Clock className="h-5 w-5 mr-3" />
   163	              <div>
   164	                <div className="font-medium">Custom Dates</div>
   165	                <div className="text-sm text-gray-500">Specific dates only</div>
   166	              </div>
   167	            </div>
   168	          </button>
   169	        </div>
   170	      </div>
   171	
   172	      {/* Regular Pattern */}
   173	      {localType === 'regular' && (
   174	        <div>
   175	          <label className="block text-sm font-medium text-gray-700 mb-3">
   176	            Select frequency
   177	          </label>
   178	          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
   179	            {regularOptions.map((option) => (
   180	              <button
   181	                key={option.value}
   182	                type="button"
   183	                onClick={() => setLocalValue(option.value)}
   184	                className={`p-3 border-2 rounded-lg text-center transition-colors ${
   185	                  localValue === option.value
   186	                    ? 'border-primary-500 bg-primary-50 text-primary-700'
   187	                    : 'border-gray-200 hover:border-gray-300'
   188	                }`}
   189	              >
   190	                <div className="font-medium">{option.label}</div>
   191	                <div className="text-xs text-gray-500">{option.description}</div>
   192	              </button>
   193	            ))}
   194	          </div>
   195	        </div>
   196	      )}
   197	
   198	      {/* Weekly Pattern */}
   199	      {localType === 'weekly_pattern' && (
   200	        <div>
   201	          <label className="block text-sm font-medium text-gray-700 mb-3">
   202	            Select which days of the week
   203	          </label>
   204	          <div className="grid grid-cols-7 gap-2">
   205	            {weekDays.map((day) => {
   206	              const selectedDays = localDetails.selectedDays || []
   207	              const isSelected = selectedDays.includes(day.value)
   208	              
   209	              return (
   210	                <button
   211	                  key={day.value}
   212	                  type="button"
   213	                  onClick={() => {
   214	                    const newSelected = isSelected 
   215	                      ? selectedDays.filter(d => d !== day.value)
   216	                      : [...selectedDays, day.value].sort()
   217	                    handleWeeklyPatternChange(newSelected)
   218	                  }}
   219	                  className={`p-3 border-2 rounded-lg text-center transition-colors ${
   220	                    isSelected
   221	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   222	                      : 'border-gray-200 hover:border-gray-300'
   223	                  }`}
   224	                >
   225	                  <div className="font-medium text-sm">{day.short}</div>
   226	                </button>
   227	              )
   228	            })}
   229	          </div>
   230	          {localDetails.selectedDays?.length > 0 && (
   231	            <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   232	              Market runs: {localDetails.dayNames}
   233	            </div>
   234	          )}
   235	        </div>
   236	      )}
   237	
   238	      {/* Monthly Pattern */}
   239	      {localType === 'monthly_pattern' && (
   240	        <div className="space-y-4">
   241	          <label className="block text-sm font-medium text-gray-700">
   242	            Select which week and day of the month
   243	          </label>
   244	          
   245	          <div>
   246	            <div className="text-sm text-gray-600 mb-2">Week of the month:</div>
   247	            <div className="grid grid-cols-5 gap-2">
   248	              {weekNumbers.map((week) => (
   249	                <button
   250	                  key={week.value}
   251	                  type="button"
   252	                  onClick={() => handleMonthlyPatternChange(week.value, localDetails.dayOfWeek || 0)}
   253	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   254	                    localDetails.weekNumber === week.value
   255	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   256	                      : 'border-gray-200 hover:border-gray-300'
   257	                  }`}
   258	                >
   259	                  <div className="font-medium text-sm">{week.label}</div>
   260	                </button>
   261	              ))}
   262	            </div>
   263	          </div>
   264	
   265	          <div>
   266	            <div className="text-sm text-gray-600 mb-2">Day of the week:</div>
   267	            <div className="grid grid-cols-7 gap-2">
   268	              {weekDays.map((day) => (
   269	                <button
   270	                  key={day.value}
   271	                  type="button"
   272	                  onClick={() => handleMonthlyPatternChange(localDetails.weekNumber || 1, day.value)}
   273	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   274	                    localDetails.dayOfWeek === day.value
   275	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   276	                      : 'border-gray-200 hover:border-gray-300'
   277	                  }`}
   278	                >
   279	                  <div className="font-medium text-sm">{day.short}</div>
   280	                </button>
   281	              ))}
   282	            </div>
   283	          </div>
   284	
   285	          {localDetails.description && (
   286	            <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   287	              Market runs: {localDetails.description} of each month
   288	            </div>
   289	          )}
   290	        </div>
   291	      )}
   292	
   293	      {/* Custom Dates */}
   294	      {localType === 'custom_dates' && (
   295	        <div className="space-y-4">
   296	          <div className="flex items-center justify-between">
   297	            <label className="block text-sm font-medium text-gray-700">
   298	              Custom market dates
   299	            </label>
   300	            <button
   301	              type="button"
   302	              onClick={addCustomDate}
   303	              className="flex items-center px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700"
   304	            >
   305	              <Plus className="h-4 w-4 mr-1" />
   306	              Add Date
   307	            </button>
   308	          </div>
   309	
   310	          {localDetails.customDates?.length > 0 ? (
   311	            <div className="space-y-2">
   312	              {localDetails.customDates.map((date, index) => (
   313	                <div key={index} className="flex items-center justify-between p-2 border border-gray-200 rounded">
   314	                  <span className="text-sm">{new Date(date).toLocaleDateString()}</span>
   315	                  <button
   316	                    type="button"
   317	                    onClick={() => removeCustomDate(date)}
   318	                    className="text-red-500 hover:text-red-700"
   319	                  >
   320	                    <X className="h-4 w-4" />
   321	                  </button>
   322	                </div>
   323	              ))}
   324	            </div>
   325	          ) : (
   326	            <div className="p-4 bg-gray-50 border border-gray-200 rounded text-center text-gray-500">
   327	              No custom dates added yet. Click "Add Date" to specify when your market runs.
   328	            </div>
   329	          )}
   330	        </div>
   331	      )}
   332	
   333	      {/* Current Selection Summary */}
   334	      {localValue && (
   335	        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
   336	          <div className="flex items-center text-blue-800">
   337	            <Calendar className="h-5 w-5 mr-2" />
   338	            <div>
   339	              <div className="font-medium">Market Schedule:</div>
   340	              <div className="text-sm">{localValue}</div>
   341	              {localType === 'custom_dates' && localDetails.customDates?.length > 0 && (
   342	                <div className="text-xs mt-1">
   343	                  Next date: {new Date(Math.min(...localDetails.customDates.map(d => new Date(d)))).toLocaleDateString()}
   344	                </div>
   345	              )}
   346	            </div>
   347	          </div>
   348	        </div>
   349	      )}
   350	    </div>
   351	  )
   352	}

========================================

üìÅ FILE: src/components/market/TimeInput.jsx
   Size: 4.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/TimeInput.jsx
     2	import { useState } from 'react'
     3	import { Clock } from 'lucide-react'
     4	
     5	export default function TimeInput({ 
     6	  startTime, 
     7	  endTime, 
     8	  onStartTimeChange, 
     9	  onEndTimeChange,
    10	  error 
    11	}) {
    12	  const [timeError, setTimeError] = useState('')
    13	
    14	  const validateTimes = (start, end) => {
    15	    if (!start || !end) return ''
    16	    
    17	    const startMinutes = timeToMinutes(start)
    18	    const endMinutes = timeToMinutes(end)
    19	    
    20	    if (startMinutes >= endMinutes) {
    21	      return 'End time must be after start time'
    22	    }
    23	    
    24	    const duration = endMinutes - startMinutes
    25	    if (duration < 60) { // Less than 1 hour
    26	      return 'Market should run for at least 1 hour'
    27	    }
    28	    
    29	    if (duration > 720) { // More than 12 hours
    30	      return 'Market duration seems unusually long'
    31	    }
    32	    
    33	    return ''
    34	  }
    35	
    36	  const timeToMinutes = (time) => {
    37	    const [hours, minutes] = time.split(':').map(Number)
    38	    return hours * 60 + minutes
    39	  }
    40	
    41	  const formatDuration = (start, end) => {
    42	    if (!start || !end) return ''
    43	    
    44	    const startMinutes = timeToMinutes(start)
    45	    const endMinutes = timeToMinutes(end)
    46	    const duration = endMinutes - startMinutes
    47	    
    48	    const hours = Math.floor(duration / 60)
    49	    const mins = duration % 60
    50	    
    51	    return `${hours}h ${mins > 0 ? `${mins}m` : ''}`
    52	  }
    53	
    54	  const handleStartChange = (value) => {
    55	    onStartTimeChange(value)
    56	    const error = validateTimes(value, endTime)
    57	    setTimeError(error)
    58	  }
    59	
    60	  const handleEndChange = (value) => {
    61	    onEndTimeChange(value)
    62	    const error = validateTimes(startTime, value)
    63	    setTimeError(error)
    64	  }
    65	
    66	  const quickTimeOptions = [
    67	    { label: 'Early Morning', start: '06:00', end: '10:00' },
    68	    { label: 'Morning Market', start: '08:00', end: '12:00' },
    69	    { label: 'Weekend Market', start: '08:00', end: '14:00' },
    70	    { label: 'Afternoon Market', start: '14:00', end: '18:00' },
    71	    { label: 'Evening Market', start: '16:00', end: '20:00' }
    72	  ]
    73	
    74	  const setQuickTime = (start, end) => {
    75	    handleStartChange(start)
    76	    handleEndChange(end)
    77	  }
    78	
    79	  return (
    80	    <div className="space-y-4">
    81	      <label className="block text-sm font-medium text-gray-700">
    82	        Operating Hours *
    83	      </label>
    84	
    85	      {/* Quick Time Presets */}
    86	      <div>
    87	        <div className="text-sm text-gray-600 mb-2">Quick presets:</div>
    88	        <div className="flex flex-wrap gap-2">
    89	          {quickTimeOptions.map((option) => (
    90	            <button
    91	              key={option.label}
    92	              type="button"
    93	              onClick={() => setQuickTime(option.start, option.end)}
    94	              className="px-3 py-1 text-xs border border-gray-300 rounded-full hover:bg-gray-50 transition-colors"
    95	            >
    96	              {option.label}
    97	            </button>
    98	          ))}
    99	        </div>
   100	      </div>
   101	
   102	      {/* Time Inputs */}
   103	      <div className="grid grid-cols-2 gap-4">
   104	        <div>
   105	          <label className="block text-xs font-medium text-gray-600 mb-1">
   106	            Start Time
   107	          </label>
   108	          <div className="relative">
   109	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   110	            <input
   111	              type="time"
   112	              value={startTime}
   113	              onChange={(e) => handleStartChange(e.target.value)}
   114	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   115	              required
   116	            />
   117	          </div>
   118	        </div>
   119	
   120	        <div>
   121	          <label className="block text-xs font-medium text-gray-600 mb-1">
   122	            End Time
   123	          </label>
   124	          <div className="relative">
   125	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   126	            <input
   127	              type="time"
   128	              value={endTime}
   129	              onChange={(e) => handleEndChange(e.target.value)}
   130	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   131	              required
   132	            />
   133	          </div>
   134	        </div>
   135	      </div>
   136	
   137	      {/* Duration Display */}
   138	      {startTime && endTime && !timeError && (
   139	        <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   140	          Duration: {formatDuration(startTime, endTime)}
   141	        </div>
   142	      )}
   143	
   144	      {/* Error Display */}
   145	      {(timeError || error) && (
   146	        <div className="text-sm text-red-600">
   147	          {timeError || error}
   148	        </div>
   149	      )}
   150	    </div>
   151	  )
   152	}

========================================

üìÅ FILE: src/contexts/AuthContext.jsx
   Size: 2.5K | Modified: 2025-06-02
----------------------------------------
     1	import React, { createContext, useContext, useState, useEffect } from 'react';
     2	import pb, { auth, handlePocketBaseError } from '../lib/pocketbase';
     3	
     4	const AuthContext = createContext({});
     5	
     6	export const useAuth = () => {
     7	  const context = useContext(AuthContext);
     8	  if (!context) {
     9	    throw new Error('useAuth must be used within an AuthProvider');
    10	  }
    11	  return context;
    12	};
    13	
    14	export const AuthProvider = ({ children }) => {
    15	  const [user, setUser] = useState(null);
    16	  const [loading, setLoading] = useState(true);
    17	  const [error, setError] = useState(null);
    18	
    19	  useEffect(() => {
    20	    if (pb.authStore.isValid) {
    21	      setUser(pb.authStore.model);
    22	    }
    23	    setLoading(false);
    24	
    25	    const unsubscribe = pb.authStore.onChange((token, model) => {
    26	      setUser(model);
    27	    });
    28	
    29	    return unsubscribe;
    30	  }, []);
    31	
    32	  const login = async (email, password) => {
    33	    try {
    34	      setLoading(true);
    35	      setError(null);
    36	      
    37	      const authData = await auth.login(email, password);
    38	      setUser(authData.record);
    39	      
    40	      return authData;
    41	    } catch (err) {
    42	      const errorData = handlePocketBaseError(err);
    43	      setError(errorData);
    44	      throw errorData;
    45	    } finally {
    46	      setLoading(false);
    47	    }
    48	  };
    49	
    50	  const register = async (userData) => {
    51	    try {
    52	      setLoading(true);
    53	      setError(null);
    54	      
    55	      const user = await auth.register({
    56	        ...userData,
    57	        emailVisibility: true,
    58	        passwordConfirm: userData.password
    59	      });
    60	
    61	      const authData = await auth.login(userData.email, userData.password);
    62	      setUser(authData.record);
    63	      
    64	      return authData;
    65	    } catch (err) {
    66	      const errorData = handlePocketBaseError(err);
    67	      setError(errorData);
    68	      throw errorData;
    69	    } finally {
    70	      setLoading(false);
    71	    }
    72	  };
    73	
    74	  const logout = () => {
    75	    auth.logout();
    76	    setUser(null);
    77	    setError(null);
    78	  };
    79	
    80	  const updateProfile = async (userData) => {
    81	    try {
    82	      setLoading(true);
    83	      setError(null);
    84	      
    85	      const updatedUser = await pb.collection('users').update(user.id, userData);
    86	      setUser(updatedUser);
    87	      
    88	      return updatedUser;
    89	    } catch (err) {
    90	      const errorData = handlePocketBaseError(err);
    91	      setError(errorData);
    92	      throw errorData;
    93	    } finally {
    94	      setLoading(false);
    95	    }
    96	  };
    97	
    98	  const value = {
    99	    user,
   100	    loading,
   101	    error,
   102	    login,
   103	    register,
   104	    logout,
   105	    updateProfile,
   106	    isAuthenticated: !!user
   107	  };
   108	
   109	  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
   110	};

========================================

üìÅ FILE: src/hooks/useApplications.js
   Size: 1.9K | Modified: 2025-06-02
----------------------------------------
     1	// src/hooks/useApplications.js - Fixed import
     2	import { useState, useEffect } from 'react';
     3	import ApplicationService from '../services/ApplicationService.js';
     4	
     5	export const useApplications = (stallholderId, filters = {}) => {
     6	  const [applications, setApplications] = useState([]);
     7	  const [loading, setLoading] = useState(true);
     8	  const [error, setError] = useState(null);
     9	  const [pagination, setPagination] = useState(null);
    10	
    11	  useEffect(() => {
    12	    if (stallholderId) {
    13	      fetchApplications();
    14	    }
    15	  }, [stallholderId, filters]);
    16	
    17	  const fetchApplications = async () => {
    18	    try {
    19	      setLoading(true);
    20	      const result = await ApplicationService.getStallholderApplications(stallholderId, filters);
    21	      setApplications(result.items);
    22	      setPagination({
    23	        page: result.page,
    24	        perPage: result.perPage,
    25	        totalItems: result.totalItems,
    26	        totalPages: result.totalPages
    27	      });
    28	    } catch (err) {
    29	      setError(err.message);
    30	    } finally {
    31	      setLoading(false);
    32	    }
    33	  };
    34	
    35	  const submitApplication = async (applicationData) => {
    36	    try {
    37	      const newApplication = await ApplicationService.submitApplication(applicationData);
    38	      setApplications(prev => [newApplication, ...prev]);
    39	      return newApplication;
    40	    } catch (err) {
    41	      setError(err.message);
    42	      throw err;
    43	    }
    44	  };
    45	
    46	  const cancelApplication = async (applicationId) => {
    47	    try {
    48	      await ApplicationService.cancelApplication(applicationId);
    49	      setApplications(prev => 
    50	        prev.map(app => 
    51	          app.id === applicationId 
    52	            ? { ...app, status: 'cancelled' }
    53	            : app
    54	        )
    55	      );
    56	    } catch (err) {
    57	      setError(err.message);
    58	      throw err;
    59	    }
    60	  };
    61	
    62	  return {
    63	    applications,
    64	    loading,
    65	    error,
    66	    pagination,
    67	    submitApplication,
    68	    cancelApplication,
    69	    refetch: fetchApplications
    70	  };
    71	};

========================================

üìÅ FILE: src/hooks/useStallholder.js
   Size: 2.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/hooks/useStallholder.js - Complete Implementation
     2	import { useState, useEffect } from 'react';
     3	import StallholderService from '../services/StallholderService.js';
     4	import { useAuth } from '../contexts/AuthContext';
     5	
     6	export const useStallholder = () => {
     7	  const [stallholder, setStallholder] = useState(null);
     8	  const [loading, setLoading] = useState(true);
     9	  const [error, setError] = useState(null);
    10	  const { user } = useAuth();
    11	
    12	  useEffect(() => {
    13	    if (user && user.role === 'stallholder') {
    14	      fetchStallholder();
    15	    } else {
    16	      setLoading(false);
    17	    }
    18	  }, [user]);
    19	
    20	  const fetchStallholder = async () => {
    21	    try {
    22	      setLoading(true);
    23	      setError(null);
    24	      
    25	      // Get stallholder profile for current user
    26	      const result = await StallholderService.getStallholders({
    27	        user: user.id
    28	      });
    29	      
    30	      if (result.items.length > 0) {
    31	        setStallholder(result.items[0]);
    32	      }
    33	    } catch (err) {
    34	      console.error('Error fetching stallholder:', err);
    35	      setError(err.message);
    36	    } finally {
    37	      setLoading(false);
    38	    }
    39	  };
    40	
    41	  const updateStallholder = async (data) => {
    42	    try {
    43	      setLoading(true);
    44	      setError(null);
    45	      
    46	      if (!stallholder) {
    47	        throw new Error('No stallholder profile to update');
    48	      }
    49	      
    50	      const updated = await StallholderService.updateStallholder(stallholder.id, data);
    51	      setStallholder(updated);
    52	      return updated;
    53	    } catch (err) {
    54	      console.error('Error updating stallholder:', err);
    55	      setError(err.message);
    56	      throw err;
    57	    } finally {
    58	      setLoading(false);
    59	    }
    60	  };
    61	
    62	  const createStallholder = async (data) => {
    63	    try {
    64	      setLoading(true);
    65	      setError(null);
    66	      
    67	      if (!user) {
    68	        throw new Error('User must be logged in to create stallholder profile');
    69	      }
    70	      
    71	      const created = await StallholderService.createStallholder({
    72	        ...data,
    73	        user: user.id
    74	      });
    75	      
    76	      setStallholder(created);
    77	      return created;
    78	    } catch (err) {
    79	      console.error('Error creating stallholder:', err);
    80	      setError(err.message);
    81	      throw err;
    82	    } finally {
    83	      setLoading(false);
    84	    }
    85	  };
    86	
    87	  return {
    88	    stallholder,
    89	    loading,
    90	    error,
    91	    updateStallholder,
    92	    createStallholder,
    93	    refetch: fetchStallholder,
    94	    hasProfile: !!stallholder
    95	  };
    96	};

========================================

üìÅ FILE: src/index.css
   Size: 813 | Modified: 2025-06-02
----------------------------------------
     1	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
     2	
     3	@tailwind base;
     4	@tailwind components;
     5	@tailwind utilities;
     6	
     7	@layer base {
     8	  html {
     9	    font-family: 'Inter', system-ui, sans-serif;
    10	  }
    11	}
    12	
    13	@layer components {
    14	  .btn-primary {
    15	    @apply bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    16	  }
    17	  
    18	  .btn-secondary {
    19	    @apply bg-secondary-500 hover:bg-secondary-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    20	  }
    21	  
    22	  .card {
    23	    @apply bg-white rounded-lg shadow-md border border-gray-200 p-6;
    24	  }
    25	  
    26	  .input-field {
    27	    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent;
    28	  }
    29	}

========================================

üìÅ FILE: src/lib/constants.js
   Size: 1.5K | Modified: 2025-06-02
----------------------------------------
     1	export const USER_ROLES = {
     2	  CUSTOMER: 'customer',
     3	  ORGANIZER: 'organizer', 
     4	  STALLHOLDER: 'stallholder'
     5	};
     6	
     7	export const MARKET_FREQUENCIES = {
     8	  DAILY: 'Daily',
     9	  WEEKLY: 'Weekly',
    10	  FIRST_SATURDAY: '1st Saturday',
    11	  FIRST_SUNDAY: '1st Sunday',
    12	  SECOND_SATURDAY: '2nd Saturday',
    13	  SECOND_SUNDAY: '2nd Sunday',
    14	  THIRD_SATURDAY: '3rd Saturday',
    15	  THIRD_SUNDAY: '3rd Sunday',
    16	  FOURTH_SATURDAY: '4th Saturday',
    17	  FOURTH_SUNDAY: '4th Sunday',
    18	  SPECIFIC_DATES: 'Specific Dates',
    19	  SEASONAL: 'Seasonal',
    20	  MONTHLY: 'Monthly'
    21	};
    22	
    23	export const MARKET_CATEGORIES = {
    24	  FARMERS: 'Farmers Market',
    25	  CRAFT: 'Craft & Artisan',
    26	  COMMUNITY: 'Community Market',
    27	  SPECIALTY: 'Specialty Market',
    28	  FOOD: 'Food Market',
    29	  VINTAGE: 'Vintage & Antiques',
    30	  GENERAL: 'General Market'
    31	};
    32	
    33	export const AUSTRALIAN_STATES = {
    34	  SA: 'South Australia',
    35	  VIC: 'Victoria',
    36	  NSW: 'New South Wales',
    37	  QLD: 'Queensland',
    38	  WA: 'Western Australia',
    39	  TAS: 'Tasmania',
    40	  NT: 'Northern Territory',
    41	  ACT: 'Australian Capital Territory'
    42	};
    43	
    44	export const SUBSCRIPTION_TIERS = {
    45	  FREE: 'free',
    46	  BASIC: 'basic',
    47	  PREMIUM: 'premium',
    48	  ENTERPRISE: 'enterprise'
    49	};
    50	
    51	export const APPLICATION_STATUS = {
    52	  PENDING: 'pending',
    53	  APPROVED: 'approved',
    54	  REJECTED: 'rejected',
    55	  WAITLISTED: 'waitlisted'
    56	};
    57	
    58	export const SEARCH_RADIUS_OPTIONS = [
    59	  { value: 5, label: '5 km' },
    60	  { value: 10, label: '10 km' },
    61	  { value: 25, label: '25 km' },
    62	  { value: 50, label: '50 km' },
    63	  { value: 100, label: '100 km' }
    64	];

========================================

üìÅ FILE: src/lib/pocketbase.js
   Size: 1.4K | Modified: 2025-06-02
----------------------------------------
     1	import PocketBase from 'pocketbase';
     2	
     3	const pb = new PocketBase(import.meta.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     4	
     5	// Configure authentication
     6	pb.autoCancellation(false);
     7	
     8	// Export the instance
     9	export default pb;
    10	
    11	// Helper functions for common operations
    12	export const auth = {
    13	  // Login user
    14	  async login(email, password) {
    15	    return await pb.collection('users').authWithPassword(email, password);
    16	  },
    17	
    18	  // Register user
    19	  async register(data) {
    20	    return await pb.collection('users').create(data);
    21	  },
    22	
    23	  // Logout
    24	  logout() {
    25	    pb.authStore.clear();
    26	  },
    27	
    28	  // Get current user
    29	  getCurrentUser() {
    30	    return pb.authStore.model;
    31	  },
    32	
    33	  // Check if user is authenticated
    34	  isAuthenticated() {
    35	    return pb.authStore.isValid;
    36	  },
    37	
    38	  // Subscribe to auth changes
    39	  onChange(callback) {
    40	    return pb.authStore.onChange(callback);
    41	  }
    42	};
    43	
    44	// Helper for handling API errors
    45	export const handlePocketBaseError = (error) => {
    46	  console.error('PocketBase Error:', error);
    47	  
    48	  if (error?.response?.data) {
    49	    // Extract field-specific errors
    50	    const fieldErrors = {};
    51	    Object.entries(error.response.data).forEach(([field, fieldError]) => {
    52	      fieldErrors[field] = fieldError.message || fieldError;
    53	    });
    54	    return fieldErrors;
    55	  }
    56	  
    57	  return { general: error.message || 'An unexpected error occurred' };
    58	};

========================================

üìÅ FILE: src/main.jsx
   Size: 229 | Modified: 2025-06-02
----------------------------------------
     1	import { StrictMode } from 'react'
     2	import { createRoot } from 'react-dom/client'
     3	import './index.css'
     4	import App from './App.jsx'
     5	
     6	createRoot(document.getElementById('root')).render(
     7	  <StrictMode>
     8	    <App />
     9	  </StrictMode>,
    10	)

========================================

üìÅ FILE: src/pages/CreateMarket.jsx
   Size: 20K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/CreateMarket.jsx - Market Creation Form
     2	import { useState, useEffect } from 'react'
     3	import { useNavigate } from 'react-router-dom'
     4	import { Save, ArrowLeft, MapPin, Clock, Calendar, DollarSign } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	import marketService from '../services/marketService'
     7	
     8	export default function CreateMarket() {
     9	  const [loading, setLoading] = useState(false)
    10	  const [categories, setCategories] = useState([])
    11	  const [error, setError] = useState(null)
    12	  const [formData, setFormData] = useState({
    13	    name: '',
    14	    category: '',
    15	    description: '',
    16	    address: '',
    17	    suburb: '',
    18	    state: 'SA',
    19	    postcode: '',
    20	    frequency: '',
    21	    operating_hours: '',
    22	    contact_email: '',
    23	    contact_phone: '',
    24	    website: '',
    25	    facilities: [],
    26	    stall_fee: '',
    27	    application_fee: '',
    28	    bond_required: false,
    29	    bond_amount: '',
    30	    insurance_required: true,
    31	    power_available: false,
    32	    parking_available: true,
    33	    accessibility_notes: ''
    34	  })
    35	
    36	  const { user } = useAuth()
    37	  const navigate = useNavigate()
    38	
    39	  // Redirect if not organizer
    40	  useEffect(() => {
    41	    if (user && user.role !== 'organizer') {
    42	      navigate('/dashboard')
    43	    }
    44	  }, [user, navigate])
    45	
    46	  useEffect(() => {
    47	    fetchCategories()
    48	  }, [])
    49	
    50	  const fetchCategories = async () => {
    51	    try {
    52	      const categoriesData = await marketService.getCategories()
    53	      setCategories(categoriesData)
    54	    } catch (error) {
    55	      console.error('Error fetching categories:', error)
    56	    }
    57	  }
    58	
    59	  const handleChange = (e) => {
    60	    const { name, value, type, checked } = e.target
    61	    setFormData(prev => ({
    62	      ...prev,
    63	      [name]: type === 'checkbox' ? checked : value
    64	    }))
    65	  }
    66	
    67	  const handleFacilitiesChange = (facility) => {
    68	    setFormData(prev => ({
    69	      ...prev,
    70	      facilities: prev.facilities.includes(facility)
    71	        ? prev.facilities.filter(f => f !== facility)
    72	        : [...prev.facilities, facility]
    73	    }))
    74	  }
    75	
    76	  const createSlug = (name) => {
    77	    return name
    78	      .toLowerCase()
    79	      .replace(/[^a-z0-9\s-]/g, '')
    80	      .replace(/\s+/g, '-')
    81	      .replace(/-+/g, '-')
    82	      .trim()
    83	  }
    84	
    85	  const handleSubmit = async (e) => {
    86	    e.preventDefault()
    87	    setLoading(true)
    88	    setError(null)
    89	
    90	    try {
    91	      const marketData = {
    92	        ...formData,
    93	        slug: createSlug(formData.name),
    94	        organizer: user.id,
    95	        active: true,
    96	        stall_fee: formData.stall_fee ? parseFloat(formData.stall_fee) : null,
    97	        application_fee: formData.application_fee ? parseFloat(formData.application_fee) : null,
    98	        bond_amount: formData.bond_amount ? parseFloat(formData.bond_amount) : null
    99	      }
   100	
   101	      const newMarket = await marketService.createMarket(marketData)
   102	      navigate(`/markets/${newMarket.slug}`)
   103	    } catch (err) {
   104	      console.error('Error creating market:', err)
   105	      setError(err.message || 'Failed to create market')
   106	    } finally {
   107	      setLoading(false)
   108	    }
   109	  }
   110	
   111	  const facilityOptions = [
   112	    'Toilets', 'Parking', 'Food Court', 'ATM', 'Wheelchair Access',
   113	    'Children\'s Area', 'Entertainment', 'Seating', 'Shelter/Cover',
   114	    'Storage', 'Loading Dock', 'Security'
   115	  ]
   116	
   117	  const frequencyOptions = [
   118	    'Daily', 'Weekly', 'Fortnightly', 'Monthly',
   119	    'First Saturday', 'First Sunday', 'Second Saturday', 'Second Sunday',
   120	    'Third Saturday', 'Third Sunday', 'Fourth Saturday', 'Fourth Sunday',
   121	    'Specific Dates', 'Seasonal'
   122	  ]
   123	
   124	  if (user && user.role !== 'organizer') {
   125	    return (
   126	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
   127	        <div className="text-center">
   128	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Access Restricted</h2>
   129	          <p className="text-gray-600">Only market organizers can create markets.</p>
   130	        </div>
   131	      </div>
   132	    )
   133	  }
   134	
   135	  return (
   136	    <div className="min-h-screen bg-gray-50 py-8">
   137	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
   138	        {/* Header */}
   139	        <div className="mb-8">
   140	          <button
   141	            onClick={() => navigate('/dashboard')}
   142	            className="flex items-center text-primary-600 hover:text-primary-500 mb-4"
   143	          >
   144	            <ArrowLeft className="h-5 w-5 mr-2" />
   145	            Back to Dashboard
   146	          </button>
   147	          <h1 className="text-3xl font-bold text-gray-900">Create New Market</h1>
   148	          <p className="text-gray-600 mt-2">
   149	            Set up your market listing to attract stallholders and customers
   150	          </p>
   151	        </div>
   152	
   153	        <form onSubmit={handleSubmit} className="space-y-8">
   154	          {error && (
   155	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
   156	              {error}
   157	            </div>
   158	          )}
   159	
   160	          {/* Basic Information */}
   161	          <div className="bg-white rounded-lg shadow p-6">
   162	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   163	              <MapPin className="h-5 w-5 mr-2 text-primary-600" />
   164	              Basic Information
   165	            </h2>
   166	            
   167	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   168	              <div className="md:col-span-2">
   169	                <label className="block text-sm font-medium text-gray-700 mb-2">
   170	                  Market Name *
   171	                </label>
   172	                <input
   173	                  type="text"
   174	                  name="name"
   175	                  required
   176	                  className="input-field"
   177	                  value={formData.name}
   178	                  onChange={handleChange}
   179	                  placeholder="e.g. Adelaide Central Market"
   180	                />
   181	              </div>
   182	
   183	              <div>
   184	                <label className="block text-sm font-medium text-gray-700 mb-2">
   185	                  Category *
   186	                </label>
   187	                <select
   188	                  name="category"
   189	                  required
   190	                  className="input-field"
   191	                  value={formData.category}
   192	                  onChange={handleChange}
   193	                >
   194	                  <option value="">Select a category</option>
   195	                  {categories.map((category) => (
   196	                    <option key={category.id} value={category.id}>
   197	                      {category.name}
   198	                    </option>
   199	                  ))}
   200	                </select>
   201	              </div>
   202	
   203	              <div>
   204	                <label className="block text-sm font-medium text-gray-700 mb-2">
   205	                  State
   206	                </label>
   207	                <select
   208	                  name="state"
   209	                  className="input-field"
   210	                  value={formData.state}
   211	                  onChange={handleChange}
   212	                >
   213	                  <option value="SA">South Australia</option>
   214	                  <option value="VIC">Victoria</option>
   215	                  <option value="NSW">New South Wales</option>
   216	                  <option value="QLD">Queensland</option>
   217	                  <option value="WA">Western Australia</option>
   218	                  <option value="TAS">Tasmania</option>
   219	                  <option value="NT">Northern Territory</option>
   220	                  <option value="ACT">ACT</option>
   221	                </select>
   222	              </div>
   223	
   224	              <div className="md:col-span-2">
   225	                <label className="block text-sm font-medium text-gray-700 mb-2">
   226	                  Description
   227	                </label>
   228	                <textarea
   229	                  name="description"
   230	                  rows={4}
   231	                  className="input-field"
   232	                  value={formData.description}
   233	                  onChange={handleChange}
   234	                  placeholder="Describe your market, its atmosphere, and what makes it special..."
   235	                />
   236	              </div>
   237	            </div>
   238	          </div>
   239	
   240	          {/* Location Details */}
   241	          <div className="bg-white rounded-lg shadow p-6">
   242	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   243	              Location Details
   244	            </h2>
   245	            
   246	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   247	              <div className="md:col-span-2">
   248	                <label className="block text-sm font-medium text-gray-700 mb-2">
   249	                  Street Address *
   250	                </label>
   251	                <input
   252	                  type="text"
   253	                  name="address"
   254	                  required
   255	                  className="input-field"
   256	                  value={formData.address}
   257	                  onChange={handleChange}
   258	                  placeholder="123 Market Street"
   259	                />
   260	              </div>
   261	
   262	              <div>
   263	                <label className="block text-sm font-medium text-gray-700 mb-2">
   264	                  Suburb *
   265	                </label>
   266	                <input
   267	                  type="text"
   268	                  name="suburb"
   269	                  required
   270	                  className="input-field"
   271	                  value={formData.suburb}
   272	                  onChange={handleChange}
   273	                  placeholder="Adelaide"
   274	                />
   275	              </div>
   276	
   277	              <div>
   278	                <label className="block text-sm font-medium text-gray-700 mb-2">
   279	                  Postcode *
   280	                </label>
   281	                <input
   282	                  type="text"
   283	                  name="postcode"
   284	                  required
   285	                  pattern="[0-9]{4}"
   286	                  className="input-field"
   287	                  value={formData.postcode}
   288	                  onChange={handleChange}
   289	                  placeholder="5000"
   290	                />
   291	              </div>
   292	            </div>
   293	          </div>
   294	
   295	          {/* Schedule & Operations */}
   296	          <div className="bg-white rounded-lg shadow p-6">
   297	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   298	              <Calendar className="h-5 w-5 mr-2 text-primary-600" />
   299	              Schedule & Operations
   300	            </h2>
   301	            
   302	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   303	              <div>
   304	                <label className="block text-sm font-medium text-gray-700 mb-2">
   305	                  Frequency *
   306	                </label>
   307	                <select
   308	                  name="frequency"
   309	                  required
   310	                  className="input-field"
   311	                  value={formData.frequency}
   312	                  onChange={handleChange}
   313	                >
   314	                  <option value="">Select frequency</option>
   315	                  {frequencyOptions.map((freq) => (
   316	                    <option key={freq} value={freq}>
   317	                      {freq}
   318	                    </option>
   319	                  ))}
   320	                </select>
   321	              </div>
   322	
   323	              <div>
   324	                <label className="block text-sm font-medium text-gray-700 mb-2">
   325	                  Operating Hours
   326	                </label>
   327	                <input
   328	                  type="text"
   329	                  name="operating_hours"
   330	                  className="input-field"
   331	                  value={formData.operating_hours}
   332	                  onChange={handleChange}
   333	                  placeholder="8:00 AM - 2:00 PM"
   334	                />
   335	              </div>
   336	            </div>
   337	          </div>
   338	
   339	          {/* Contact Information */}
   340	          <div className="bg-white rounded-lg shadow p-6">
   341	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   342	              Contact Information
   343	            </h2>
   344	            
   345	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   346	              <div>
   347	                <label className="block text-sm font-medium text-gray-700 mb-2">
   348	                  Contact Email *
   349	                </label>
   350	                <input
   351	                  type="email"
   352	                  name="contact_email"
   353	                  required
   354	                  className="input-field"
   355	                  value={formData.contact_email}
   356	                  onChange={handleChange}
   357	                  placeholder="info@yourmarket.com"
   358	                />
   359	              </div>
   360	
   361	              <div>
   362	                <label className="block text-sm font-medium text-gray-700 mb-2">
   363	                  Contact Phone
   364	                </label>
   365	                <input
   366	                  type="tel"
   367	                  name="contact_phone"
   368	                  className="input-field"
   369	                  value={formData.contact_phone}
   370	                  onChange={handleChange}
   371	                  placeholder="08 1234 5678"
   372	                />
   373	              </div>
   374	
   375	              <div className="md:col-span-2">
   376	                <label className="block text-sm font-medium text-gray-700 mb-2">
   377	                  Website
   378	                </label>
   379	                <input
   380	                  type="url"
   381	                  name="website"
   382	                  className="input-field"
   383	                  value={formData.website}
   384	                  onChange={handleChange}
   385	                  placeholder="https://yourmarket.com"
   386	                />
   387	              </div>
   388	            </div>
   389	          </div>
   390	
   391	          {/* Facilities */}
   392	          <div className="bg-white rounded-lg shadow p-6">
   393	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   394	              Facilities & Amenities
   395	            </h2>
   396	            
   397	            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   398	              {facilityOptions.map((facility) => (
   399	                <label key={facility} className="flex items-center">
   400	                  <input
   401	                    type="checkbox"
   402	                    checked={formData.facilities.includes(facility)}
   403	                    onChange={() => handleFacilitiesChange(facility)}
   404	                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   405	                  />
   406	                  <span className="ml-2 text-sm text-gray-700">{facility}</span>
   407	                </label>
   408	              ))}
   409	            </div>
   410	
   411	            <div className="mt-6">
   412	              <label className="block text-sm font-medium text-gray-700 mb-2">
   413	                Accessibility Notes
   414	              </label>
   415	              <textarea
   416	                name="accessibility_notes"
   417	                rows={3}
   418	                className="input-field"
   419	                value={formData.accessibility_notes}
   420	                onChange={handleChange}
   421	                placeholder="Describe accessibility features, parking, wheelchair access, etc."
   422	              />
   423	            </div>
   424	          </div>
   425	
   426	          {/* Pricing & Requirements */}
   427	          <div className="bg-white rounded-lg shadow p-6">
   428	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   429	              <DollarSign className="h-5 w-5 mr-2 text-primary-600" />
   430	              Pricing & Requirements
   431	            </h2>
   432	            
   433	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   434	              <div>
   435	                <label className="block text-sm font-medium text-gray-700 mb-2">
   436	                  Stall Fee (per market day)
   437	                </label>
   438	                <div className="relative">
   439	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   440	                  <input
   441	                    type="number"
   442	                    name="stall_fee"
   443	                    min="0"
   444	                    step="0.01"
   445	                    className="input-field pl-8"
   446	                    value={formData.stall_fee}
   447	                    onChange={handleChange}
   448	                    placeholder="50.00"
   449	                  />
   450	                </div>
   451	              </div>
   452	
   453	              <div>
   454	                <label className="block text-sm font-medium text-gray-700 mb-2">
   455	                  Application Fee
   456	                </label>
   457	                <div className="relative">
   458	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   459	                  <input
   460	                    type="number"
   461	                    name="application_fee"
   462	                    min="0"
   463	                    step="0.01"
   464	                    className="input-field pl-8"
   465	                    value={formData.application_fee}
   466	                    onChange={handleChange}
   467	                    placeholder="10.00"
   468	                  />
   469	                </div>
   470	              </div>
   471	
   472	              <div className="md:col-span-2">
   473	                <div className="space-y-4">
   474	                  <label className="flex items-center">
   475	                    <input
   476	                      type="checkbox"
   477	                      name="bond_required"
   478	                      checked={formData.bond_required}
   479	                      onChange={handleChange}
   480	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   481	                    />
   482	                    <span className="ml-2 text-sm text-gray-700">Bond Required</span>
   483	                  </label>
   484	
   485	                  {formData.bond_required && (
   486	                    <div className="ml-6">
   487	                      <label className="block text-sm font-medium text-gray-700 mb-2">
   488	                        Bond Amount
   489	                      </label>
   490	                      <div className="relative max-w-xs">
   491	                        <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   492	                        <input
   493	                          type="number"
   494	                          name="bond_amount"
   495	                          min="0"
   496	                          step="0.01"
   497	                          className="input-field pl-8"
   498	                          value={formData.bond_amount}
   499	                          onChange={handleChange}
   500	                          placeholder="100.00"
   501	                        />
   502	                      </div>
   503	                    </div>
   504	                  )}
   505	
   506	                  <label className="flex items-center">
   507	                    <input
   508	                      type="checkbox"
   509	                      name="insurance_required"
   510	                      checked={formData.insurance_required}
   511	                      onChange={handleChange}
   512	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   513	                    />
   514	                    <span className="ml-2 text-sm text-gray-700">Public Liability Insurance Required</span>
   515	                  </label>
   516	
   517	                  <label className="flex items-center">
   518	                    <input
   519	                      type="checkbox"
   520	                      name="power_available"
   521	                      checked={formData.power_available}
   522	                      onChange={handleChange}
   523	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   524	                    />
   525	                    <span className="ml-2 text-sm text-gray-700">Power Available for Stalls</span>
   526	                  </label>
   527	
   528	                  <label className="flex items-center">
   529	                    <input
   530	                      type="checkbox"
   531	                      name="parking_available"
   532	                      checked={formData.parking_available}
   533	                      onChange={handleChange}
   534	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   535	                    />
   536	                    <span className="ml-2 text-sm text-gray-700">Parking Available</span>
   537	                  </label>
   538	                </div>
   539	              </div>
   540	            </div>
   541	          </div>
   542	
   543	          {/* Submit Button */}
   544	          <div className="flex justify-end space-x-4">
   545	            <button
   546	              type="button"
   547	              onClick={() => navigate('/dashboard')}
   548	              className="btn-secondary"
   549	              disabled={loading}
   550	            >
   551	              Cancel
   552	            </button>
   553	            <button
   554	              type="submit"
   555	              className="btn-primary flex items-center"
   556	              disabled={loading}
   557	            >
   558	              {loading ? (
   559	                <>
   560	                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
   561	                  Creating Market...
   562	                </>
   563	              ) : (
   564	                <>
   565	                  <Save className="h-4 w-4 mr-2" />
   566	                  Create Market
   567	                </>
   568	              )}
   569	            </button>
   570	          </div>
   571	        </form>
   572	      </div>
   573	    </div>
   574	  )
   575	}

========================================

üìÅ FILE: src/pages/Dashboard.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/Dashboard.jsx - Fixed Role Detection
     2	import { useState, useEffect } from 'react'
     3	import { Link } from 'react-router-dom'
     4	import { User, MapPin, ShoppingBag, BarChart3, Plus, Calendar, Users } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	
     7	export default function Dashboard() {
     8	  const { user, loading } = useAuth()
     9	
    10	  // Debug: Let's see what user object looks like
    11	  useEffect(() => {
    12	    console.log('Dashboard - Current user:', user)
    13	    console.log('Dashboard - User role:', user?.role)
    14	  }, [user])
    15	
    16	  if (loading) {
    17	    return (
    18	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    19	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    20	      </div>
    21	    )
    22	  }
    23	
    24	  if (!user) {
    25	    return (
    26	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    27	        <div className="text-center">
    28	          <p className="text-gray-600">Please log in to access your dashboard.</p>
    29	          <Link to="/login" className="btn-primary mt-4">
    30	            Log In
    31	          </Link>
    32	        </div>
    33	      </div>
    34	    )
    35	  }
    36	
    37	  const renderRoleSpecificContent = () => {
    38	    console.log('Rendering content for role:', user.role) // Debug log
    39	    
    40	    switch (user.role) {
    41	      case 'stallholder':
    42	        return <StallholderDashboard user={user} />
    43	      case 'organizer':
    44	        return <OrganizerDashboard user={user} />
    45	      case 'customer':
    46	      default:
    47	        return <CustomerDashboard user={user} />
    48	    }
    49	  }
    50	
    51	  const getRoleDisplayName = (role) => {
    52	    switch(role) {
    53	      case 'stallholder': return 'Stallholder'
    54	      case 'organizer': return 'Market Organizer'
    55	      case 'customer': return 'Customer'
    56	      default: return 'User'
    57	    }
    58	  }
    59	
    60	  return (
    61	    <div className="min-h-screen bg-gray-50 py-8">
    62	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    63	        {/* Header */}
    64	        <div className="mb-8">
    65	          <h1 className="text-3xl font-bold text-gray-900 mb-2">
    66	            Welcome back, {user.name}!
    67	          </h1>
    68	          <div className="flex items-center space-x-4">
    69	            <p className="text-gray-600">
    70	              {user.role === 'stallholder' && 'Manage your stallholder profile and applications'}
    71	              {user.role === 'organizer' && 'Manage your markets and stallholder applications'}
    72	              {(user.role === 'customer' || !user.role) && 'Discover and save your favorite markets'}
    73	            </p>
    74	            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
    75	              {getRoleDisplayName(user.role)}
    76	            </span>
    77	          </div>
    78	        </div>
    79	
    80	        {/* Debug Info (remove this after testing) */}
    81	        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
    82	          <h3 className="text-sm font-medium text-blue-800 mb-2">Debug Info:</h3>
    83	          <p className="text-xs text-blue-600">User ID: {user.id}</p>
    84	          <p className="text-xs text-blue-600">User Role: {user.role || 'undefined'}</p>
    85	          <p className="text-xs text-blue-600">User Email: {user.email}</p>
    86	        </div>
    87	
    88	        {renderRoleSpecificContent()}
    89	      </div>
    90	    </div>
    91	  )
    92	}
    93	
    94	// Customer Dashboard Component
    95	const CustomerDashboard = ({ user }) => {
    96	  return (
    97	    <div>
    98	      <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
    99	        <p className="text-green-800 font-medium">‚úÖ Customer Dashboard Loaded</p>
   100	      </div>
   101	
   102	      {/* Quick Stats */}
   103	      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
   104	        <div className="card">
   105	          <div className="flex items-center">
   106	            <div className="bg-primary-100 rounded-lg p-3">
   107	              <MapPin className="h-6 w-6 text-primary-600" />
   108	            </div>
   109	            <div className="ml-4">
   110	              <p className="text-2xl font-bold text-gray-900">12</p>
   111	              <p className="text-gray-600">Favorite Markets</p>
   112	            </div>
   113	          </div>
   114	        </div>
   115	        <div className="card">
   116	          <div className="flex items-center">
   117	            <div className="bg-secondary-100 rounded-lg p-3">
   118	              <Calendar className="h-6 w-6 text-secondary-600" />
   119	            </div>
   120	            <div className="ml-4">
   121	              <p className="text-2xl font-bold text-gray-900">3</p>
   122	              <p className="text-gray-600">This Weekend</p>
   123	            </div>
   124	          </div>
   125	        </div>
   126	        <div className="card">
   127	          <div className="flex items-center">
   128	            <div className="bg-green-100 rounded-lg p-3">
   129	              <User className="h-6 w-6 text-green-600" />
   130	            </div>
   131	            <div className="ml-4">
   132	              <p className="text-2xl font-bold text-gray-900">Free</p>
   133	              <p className="text-gray-600">Current Plan</p>
   134	            </div>
   135	          </div>
   136	        </div>
   137	      </div>
   138	
   139	      {/* Quick Actions */}
   140	      <div className="bg-white rounded-lg shadow p-6">
   141	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   142	        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   143	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   144	            <MapPin className="h-8 w-8 text-primary-600 mr-4" />
   145	            <div>
   146	              <h3 className="font-medium text-gray-900">Browse Markets</h3>
   147	              <p className="text-sm text-gray-600">Find new markets in your area</p>
   148	            </div>
   149	          </Link>
   150	          <Link to="/register?role=stallholder" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   151	            <ShoppingBag className="h-8 w-8 text-secondary-600 mr-4" />
   152	            <div>
   153	              <h3 className="font-medium text-gray-900">Become a Stallholder</h3>
   154	              <p className="text-sm text-gray-600">Start selling at local markets</p>
   155	            </div>
   156	          </Link>
   157	        </div>
   158	      </div>
   159	    </div>
   160	  )
   161	}
   162	
   163	// Stallholder Dashboard Component
   164	const StallholderDashboard = ({ user }) => {
   165	  return (
   166	    <div>
   167	      <div className="mb-4 p-4 bg-purple-50 border border-purple-200 rounded-lg">
   168	        <p className="text-purple-800 font-medium">‚úÖ Stallholder Dashboard Loaded</p>
   169	      </div>
   170	
   171	      {/* Quick Stats */}
   172	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   173	        <div className="card">
   174	          <div className="flex items-center">
   175	            <div className="bg-primary-100 rounded-lg p-3">
   176	              <ShoppingBag className="h-6 w-6 text-primary-600" />
   177	            </div>
   178	            <div className="ml-4">
   179	              <p className="text-2xl font-bold text-gray-900">5</p>
   180	              <p className="text-gray-600">Active Applications</p>
   181	            </div>
   182	          </div>
   183	        </div>
   184	        <div className="card">
   185	          <div className="flex items-center">
   186	            <div className="bg-green-100 rounded-lg p-3">
   187	              <BarChart3 className="h-6 w-6 text-green-600" />
   188	            </div>
   189	            <div className="ml-4">
   190	              <p className="text-2xl font-bold text-gray-900">3</p>
   191	              <p className="text-gray-600">Approved</p>
   192	            </div>
   193	          </div>
   194	        </div>
   195	        <div className="card">
   196	          <div className="flex items-center">
   197	            <div className="bg-yellow-100 rounded-lg p-3">
   198	              <Calendar className="h-6 w-6 text-yellow-600" />
   199	            </div>
   200	            <div className="ml-4">
   201	              <p className="text-2xl font-bold text-gray-900">2</p>
   202	              <p className="text-gray-600">This Weekend</p>
   203	            </div>
   204	          </div>
   205	        </div>
   206	        <div className="card">
   207	          <div className="flex items-center">
   208	            <div className="bg-purple-100 rounded-lg p-3">
   209	              <User className="h-6 w-6 text-purple-600" />
   210	            </div>
   211	            <div className="ml-4">
   212	              <p className="text-2xl font-bold text-gray-900">4.8</p>
   213	              <p className="text-gray-600">Rating</p>
   214	            </div>
   215	          </div>
   216	        </div>
   217	      </div>
   218	
   219	      {/* Quick Actions */}
   220	      <div className="bg-white rounded-lg shadow p-6">
   221	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   222	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   223	          <Link to="/profile" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   224	            <User className="h-8 w-8 text-primary-600 mr-4" />
   225	            <div>
   226	              <h3 className="font-medium text-gray-900">Update Profile</h3>
   227	              <p className="text-sm text-gray-600">Edit your business details</p>
   228	            </div>
   229	          </Link>
   230	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   231	            <MapPin className="h-8 w-8 text-secondary-600 mr-4" />
   232	            <div>
   233	              <h3 className="font-medium text-gray-900">Find Markets</h3>
   234	              <p className="text-sm text-gray-600">Discover new opportunities</p>
   235	            </div>
   236	          </Link>
   237	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   238	            <Plus className="h-8 w-8 text-green-600 mr-4" />
   239	            <div>
   240	              <h3 className="font-medium text-gray-900">Apply to Market</h3>
   241	              <p className="text-sm text-gray-600">Submit new application</p>
   242	            </div>
   243	          </button>
   244	        </div>
   245	      </div>
   246	    </div>
   247	  )
   248	}
   249	
   250	// Organizer Dashboard Component
   251	const OrganizerDashboard = ({ user }) => {
   252	  return (
   253	    <div>
   254	      <div className="mb-4 p-4 bg-orange-50 border border-orange-200 rounded-lg">
   255	        <p className="text-orange-800 font-medium">‚úÖ Organizer Dashboard Loaded</p>
   256	      </div>
   257	
   258	      {/* Quick Stats */}
   259	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   260	        <div className="card">
   261	          <div className="flex items-center">
   262	            <div className="bg-primary-100 rounded-lg p-3">
   263	              <MapPin className="h-6 w-6 text-primary-600" />
   264	            </div>
   265	            <div className="ml-4">
   266	              <p className="text-2xl font-bold text-gray-900">3</p>
   267	              <p className="text-gray-600">Active Markets</p>
   268	            </div>
   269	          </div>
   270	        </div>
   271	        <div className="card">
   272	          <div className="flex items-center">
   273	            <div className="bg-secondary-100 rounded-lg p-3">
   274	              <Users className="h-6 w-6 text-secondary-600" />
   275	            </div>
   276	            <div className="ml-4">
   277	              <p className="text-2xl font-bold text-gray-900">47</p>
   278	              <p className="text-gray-600">Total Stallholders</p>
   279	            </div>
   280	          </div>
   281	        </div>
   282	        <div className="card">
   283	          <div className="flex items-center">
   284	            <div className="bg-yellow-100 rounded-lg p-3">
   285	              <ShoppingBag className="h-6 w-6 text-yellow-600" />
   286	            </div>
   287	            <div className="ml-4">
   288	              <p className="text-2xl font-bold text-gray-900">12</p>
   289	              <p className="text-gray-600">Pending Applications</p>
   290	            </div>
   291	          </div>
   292	        </div>
   293	        <div className="card">
   294	          <div className="flex items-center">
   295	            <div className="bg-green-100 rounded-lg p-3">
   296	              <BarChart3 className="h-6 w-6 text-green-600" />
   297	            </div>
   298	            <div className="ml-4">
   299	              <p className="text-2xl font-bold text-gray-900">$2,450</p>
   300	              <p className="text-gray-600">Monthly Revenue</p>
   301	            </div>
   302	          </div>
   303	        </div>
   304	      </div>
   305	
   306	      {/* Quick Actions */}
   307	      <div className="bg-white rounded-lg shadow p-6">
   308	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   309	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   310	          <Link to="/markets/create" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   311	            <Plus className="h-8 w-8 text-primary-600 mr-4" />
   312	            <div>
   313	              <h3 className="font-medium text-gray-900">Create Market</h3>
   314	              <p className="text-sm text-gray-600">Add a new market listing</p>
   315	            </div>
   316	          </Link>
   317	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   318	            <Users className="h-8 w-8 text-secondary-600 mr-4" />
   319	            <div>
   320	              <h3 className="font-medium text-gray-900">Manage Applications</h3>
   321	              <p className="text-sm text-gray-600">Review stallholder requests</p>
   322	            </div>
   323	          </button>
   324	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   325	            <BarChart3 className="h-8 w-8 text-green-600 mr-4" />
   326	            <div>
   327	              <h3 className="font-medium text-gray-900">View Analytics</h3>
   328	              <p className="text-sm text-gray-600">Market performance data</p>
   329	            </div>
   330	          </button>
   331	        </div>
   332	      </div>
   333	    </div>
   334	  )
   335	}

========================================

üìÅ FILE: src/pages/DatabaseTest.jsx
   Size: 7.7K | Modified: 2025-06-03
----------------------------------------
     1	// PocketBase Verification Component
     2	// Add this to src/pages/DatabaseTest.jsx for internal verification
     3	
     4	import { useState, useEffect } from 'react'
     5	import pb from '../lib/pocketbase'
     6	import { CheckCircle, XCircle, AlertCircle, RefreshCw } from 'lucide-react'
     7	
     8	export default function DatabaseTest() {
     9	  const [status, setStatus] = useState({
    10	    loading: true,
    11	    pocketbaseOnline: false,
    12	    collections: {},
    13	    dataCounts: {},
    14	    errors: []
    15	  })
    16	
    17	  const checkDatabase = async () => {
    18	    setStatus(prev => ({ ...prev, loading: true, errors: [] }))
    19	    
    20	    try {
    21	      const collections = ['users', 'markets', 'market_categories', 'stallholders', 'applications', 'reviews']
    22	      const collectionStatus = {}
    23	      const dataStatus = {}
    24	      const errors = []
    25	
    26	      // Check PocketBase health
    27	      const healthCheck = await fetch(`${pb.baseUrl}/api/health`)
    28	      const pocketbaseOnline = healthCheck.ok
    29	
    30	      // Check each collection
    31	      for (const collection of collections) {
    32	        try {
    33	          const result = await pb.collection(collection).getList(1, 1)
    34	          collectionStatus[collection] = true
    35	          dataStatus[collection] = result.totalItems
    36	        } catch (error) {
    37	          collectionStatus[collection] = false
    38	          dataStatus[collection] = 0
    39	          errors.push(`${collection}: ${error.message}`)
    40	        }
    41	      }
    42	
    43	      // Test market query specifically
    44	      try {
    45	        const markets = await pb.collection('markets').getList(1, 3, {
    46	          expand: 'category'
    47	        })
    48	        console.log('Sample markets found:', markets.items)
    49	      } catch (error) {
    50	        errors.push(`Market query failed: ${error.message}`)
    51	      }
    52	
    53	      setStatus({
    54	        loading: false,
    55	        pocketbaseOnline,
    56	        collections: collectionStatus,
    57	        dataCounts: dataStatus,
    58	        errors
    59	      })
    60	
    61	    } catch (error) {
    62	      setStatus(prev => ({
    63	        ...prev,
    64	        loading: false,
    65	        pocketbaseOnline: false,
    66	        errors: [`General error: ${error.message}`]
    67	      }))
    68	    }
    69	  }
    70	
    71	  useEffect(() => {
    72	    checkDatabase()
    73	  }, [])
    74	
    75	  const StatusIcon = ({ status }) => {
    76	    if (status === true) return <CheckCircle className="h-5 w-5 text-green-500" />
    77	    if (status === false) return <XCircle className="h-5 w-5 text-red-500" />
    78	    return <AlertCircle className="h-5 w-5 text-yellow-500" />
    79	  }
    80	
    81	  return (
    82	    <div className="min-h-screen bg-gray-50 py-8">
    83	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    84	        <div className="mb-8">
    85	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Database Verification</h1>
    86	          <p className="text-gray-600">
    87	            Checking PocketBase collections and data integrity
    88	          </p>
    89	          <button 
    90	            onClick={checkDatabase}
    91	            className="mt-4 btn-primary inline-flex items-center"
    92	            disabled={status.loading}
    93	          >
    94	            <RefreshCw className={`h-4 w-4 mr-2 ${status.loading ? 'animate-spin' : ''}`} />
    95	            Refresh Check
    96	          </button>
    97	        </div>
    98	
    99	        {/* PocketBase Status */}
   100	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   101	          <h2 className="text-xl font-semibold mb-4">PocketBase Status</h2>
   102	          <div className="flex items-center">
   103	            <StatusIcon status={status.pocketbaseOnline} />
   104	            <span className="ml-2">
   105	              {status.pocketbaseOnline ? 'Online and responding' : 'Offline or not responding'}
   106	            </span>
   107	          </div>
   108	          <p className="text-sm text-gray-500 mt-2">URL: {pb.baseUrl}</p>
   109	        </div>
   110	
   111	        {/* Collections Status */}
   112	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   113	          <h2 className="text-xl font-semibold mb-4">Collections Status</h2>
   114	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   115	            {Object.entries(status.collections).map(([collection, exists]) => (
   116	              <div key={collection} className="flex items-center justify-between p-3 border rounded">
   117	                <div className="flex items-center">
   118	                  <StatusIcon status={exists} />
   119	                  <span className="ml-2 font-medium">{collection}</span>
   120	                </div>
   121	                <span className="text-sm text-gray-500">
   122	                  {status.dataCounts[collection]} records
   123	                </span>
   124	              </div>
   125	            ))}
   126	          </div>
   127	        </div>
   128	
   129	        {/* Data Summary */}
   130	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   131	          <h2 className="text-xl font-semibold mb-4">Data Summary</h2>
   132	          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   133	            <div className="text-center p-4 bg-blue-50 rounded">
   134	              <div className="text-2xl font-bold text-blue-600">
   135	                {status.dataCounts.markets || 0}
   136	              </div>
   137	              <div className="text-sm text-blue-800">Markets</div>
   138	            </div>
   139	            <div className="text-center p-4 bg-green-50 rounded">
   140	              <div className="text-2xl font-bold text-green-600">
   141	                {status.dataCounts.stallholders || 0}
   142	              </div>
   143	              <div className="text-sm text-green-800">Stallholders</div>
   144	            </div>
   145	            <div className="text-center p-4 bg-purple-50 rounded">
   146	              <div className="text-2xl font-bold text-purple-600">
   147	                {status.dataCounts.applications || 0}
   148	              </div>
   149	              <div className="text-sm text-purple-800">Applications</div>
   150	            </div>
   151	            <div className="text-center p-4 bg-yellow-50 rounded">
   152	              <div className="text-2xl font-bold text-yellow-600">
   153	                {status.dataCounts.users || 0}
   154	              </div>
   155	              <div className="text-sm text-yellow-800">Users</div>
   156	            </div>
   157	            <div className="text-center p-4 bg-red-50 rounded">
   158	              <div className="text-2xl font-bold text-red-600">
   159	                {status.dataCounts.reviews || 0}
   160	              </div>
   161	              <div className="text-sm text-red-800">Reviews</div>
   162	            </div>
   163	            <div className="text-center p-4 bg-indigo-50 rounded">
   164	              <div className="text-2xl font-bold text-indigo-600">
   165	                {status.dataCounts.market_categories || 0}
   166	              </div>
   167	              <div className="text-sm text-indigo-800">Categories</div>
   168	            </div>
   169	          </div>
   170	        </div>
   171	
   172	        {/* Errors */}
   173	        {status.errors.length > 0 && (
   174	          <div className="bg-white rounded-lg shadow p-6 mb-6">
   175	            <h2 className="text-xl font-semibold mb-4 text-red-600">Issues Detected</h2>
   176	            <div className="space-y-2">
   177	              {status.errors.map((error, index) => (
   178	                <div key={index} className="flex items-start">
   179	                  <XCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0" />
   180	                  <span className="text-sm text-red-700">{error}</span>
   181	                </div>
   182	              ))}
   183	            </div>
   184	          </div>
   185	        )}
   186	
   187	        {/* Quick Actions */}
   188	        <div className="bg-white rounded-lg shadow p-6">
   189	          <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
   190	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   191	            <button 
   192	              onClick={() => window.open(`${pb.baseUrl}/_/`, '_blank')}
   193	              className="btn-secondary"
   194	            >
   195	              Open PocketBase Admin
   196	            </button>
   197	            <button 
   198	              onClick={() => window.location.href = '/markets'}
   199	              className="btn-primary"
   200	            >
   201	              Test Market Listing
   202	            </button>
   203	          </div>
   204	        </div>
   205	      </div>
   206	    </div>
   207	  )
   208	}
   209	
   210	// Add this route to your App.jsx for testing:
   211	// <Route path="/database-test" element={<DatabaseTest />} />

========================================

üìÅ FILE: src/pages/Home.jsx
   Size: 4.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { Search, MapPin, Users, ShoppingBag, ArrowRight } from 'lucide-react'
     3	
     4	export default function Home() {
     5	  return (
     6	    <div>
     7	      {/* Hero Section */}
     8	      <section className="bg-gradient-to-br from-primary-600 to-primary-800 text-white">
     9	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    10	          <div className="text-center">
    11	            <h1 className="text-4xl md:text-6xl font-bold mb-6">
    12	              Discover Local Markets
    13	              <span className="block text-secondary-400">Across South Australia</span>
    14	            </h1>
    15	            <p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto text-primary-100">
    16	              Connect with vibrant local markets, fresh produce, unique crafts, and community experiences right in your neighborhood.
    17	            </p>
    18	            <div className="flex flex-col sm:flex-row gap-4 justify-center">
    19	              <Link to="/markets" className="btn-secondary text-lg px-8 py-3">
    20	                <Search className="h-5 w-5 mr-2" />
    21	                Browse Markets
    22	              </Link>
    23	              <Link to="/register" className="bg-white text-primary-600 hover:bg-gray-100 font-medium py-3 px-8 rounded-lg transition-colors text-lg">
    24	                Join as Stallholder
    25	              </Link>
    26	            </div>
    27	          </div>
    28	        </div>
    29	      </section>
    30	
    31	      {/* Features Section */}
    32	      <section className="py-20 bg-white">
    33	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center mb-16">
    35	            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
    36	              Why Choose SA Markets?
    37	            </h2>
    38	            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
    39	              We're building stronger communities by connecting local markets, stallholders, and customers across South Australia.
    40	            </p>
    41	          </div>
    42	
    43	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
    44	            <div className="text-center">
    45	              <div className="bg-primary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    46	                <MapPin className="h-8 w-8 text-primary-600" />
    47	              </div>
    48	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Find Markets Nearby</h3>
    49	              <p className="text-gray-600">
    50	                Discover farmers markets, craft fairs, and community markets in your local area with our interactive map and search tools.
    51	              </p>
    52	            </div>
    53	
    54	            <div className="text-center">
    55	              <div className="bg-secondary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    56	                <Users className="h-8 w-8 text-secondary-600" />
    57	              </div>
    58	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Connect Communities</h3>
    59	              <p className="text-gray-600">
    60	                Join a vibrant network of local producers, artisans, and market-goers who share a passion for community and quality.
    61	              </p>
    62	            </div>
    63	
    64	            <div className="text-center">
    65	              <div className="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    66	                <ShoppingBag className="h-8 w-8 text-green-600" />
    67	              </div>
    68	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Support Local Business</h3>
    69	              <p className="text-gray-600">
    70	                Shop directly from local farmers, makers, and small businesses while supporting your community's economic growth.
    71	              </p>
    72	            </div>
    73	          </div>
    74	        </div>
    75	      </section>
    76	
    77	      {/* CTA Section */}
    78	      <section className="py-16 bg-gray-50">
    79	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    80	          <h2 className="text-3xl font-bold text-gray-900 mb-4">
    81	            Ready to explore local markets?
    82	          </h2>
    83	          <p className="text-xl text-gray-600 mb-8">
    84	            Join thousands of South Australians discovering amazing local products and experiences.
    85	          </p>
    86	          <Link to="/markets" className="btn-primary text-lg px-8 py-3 inline-flex items-center">
    87	            Start Exploring
    88	            <ArrowRight className="h-5 w-5 ml-2" />
    89	          </Link>
    90	        </div>
    91	      </section>
    92	    </div>
    93	  )
    94	}

========================================

üìÅ FILE: src/pages/Login.jsx
   Size: 5.2K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate, useLocation } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Login() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    email: '',
    10	    password: ''
    11	  })
    12	  
    13	  const { login, loading, error } = useAuth()
    14	  const navigate = useNavigate()
    15	  const location = useLocation()
    16	  
    17	  const from = location.state?.from?.pathname || '/dashboard'
    18	
    19	  const handleSubmit = async (e) => {
    20	    e.preventDefault()
    21	    try {
    22	      await login(formData.email, formData.password)
    23	      navigate(from, { replace: true })
    24	    } catch (err) {
    25	      // Error is handled by AuthContext
    26	      console.error('Login failed:', err)
    27	    }
    28	  }
    29	
    30	  return (
    31	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    32	      <div className="max-w-md w-full space-y-8">
    33	        <div>
    34	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    35	            Welcome back
    36	          </h2>
    37	          <p className="mt-2 text-center text-sm text-gray-600">
    38	            Sign in to your account
    39	          </p>
    40	        </div>
    41	        
    42	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    43	          {error && (
    44	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    45	              {typeof error === 'object' ? error.general || 'Login failed' : error}
    46	            </div>
    47	          )}
    48	          
    49	          <div className="space-y-4">
    50	            <div>
    51	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    52	                Email address
    53	              </label>
    54	              <input
    55	                id="email"
    56	                name="email"
    57	                type="email"
    58	                required
    59	                className="input-field mt-1"
    60	                placeholder="Enter your email"
    61	                value={formData.email}
    62	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    63	                disabled={loading}
    64	              />
    65	              {error?.email && (
    66	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    67	              )}
    68	            </div>
    69	            
    70	            <div>
    71	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    72	                Password
    73	              </label>
    74	              <div className="mt-1 relative">
    75	                <input
    76	                  id="password"
    77	                  name="password"
    78	                  type={showPassword ? 'text' : 'password'}
    79	                  required
    80	                  className="input-field pr-10"
    81	                  placeholder="Enter your password"
    82	                  value={formData.password}
    83	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
    84	                  disabled={loading}
    85	                />
    86	                <button
    87	                  type="button"
    88	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
    89	                  onClick={() => setShowPassword(!showPassword)}
    90	                  disabled={loading}
    91	                >
    92	                  {showPassword ? (
    93	                    <EyeOff className="h-5 w-5 text-gray-400" />
    94	                  ) : (
    95	                    <Eye className="h-5 w-5 text-gray-400" />
    96	                  )}
    97	                </button>
    98	              </div>
    99	              {error?.password && (
   100	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   101	              )}
   102	            </div>
   103	          </div>
   104	
   105	          <div className="flex items-center justify-between">
   106	            <div className="flex items-center">
   107	              <input
   108	                id="remember-me"
   109	                name="remember-me"
   110	                type="checkbox"
   111	                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   112	              />
   113	              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
   114	                Remember me
   115	              </label>
   116	            </div>
   117	
   118	            <div className="text-sm">
   119	              <Link to="/forgot-password" className="text-primary-600 hover:text-primary-500">
   120	                Forgot your password?
   121	              </Link>
   122	            </div>
   123	          </div>
   124	
   125	          <div>
   126	            <button 
   127	              type="submit" 
   128	              className="btn-primary w-full flex items-center justify-center"
   129	              disabled={loading}
   130	            >
   131	              {loading ? (
   132	                <>
   133	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   134	                  Signing in...
   135	                </>
   136	              ) : (
   137	                'Sign in'
   138	              )}
   139	            </button>
   140	          </div>
   141	
   142	          <div className="text-center">
   143	            <span className="text-sm text-gray-600">
   144	              Don't have an account?{' '}
   145	              <Link to="/register" className="text-primary-600 hover:text-primary-500 font-medium">
   146	                Sign up here
   147	              </Link>
   148	            </span>
   149	          </div>
   150	        </form>
   151	      </div>
   152	    </div>
   153	  )
   154	}

========================================

üìÅ FILE: src/pages/MarketDetail.jsx
   Size: 5.1K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { useParams, Link } from 'react-router-dom'
     3	import { MapPin, Clock, Calendar, ArrowLeft } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketDetail() {
     7	  const { slug } = useParams()
     8	  const [market, setMarket] = useState(null)
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	
    12	  useEffect(() => {
    13	    fetchMarket()
    14	  }, [slug])
    15	
    16	  const fetchMarket = async () => {
    17	    try {
    18	      setLoading(true)
    19	      setError(null)
    20	      const marketData = await marketService.getMarket(slug)
    21	      setMarket(marketData)
    22	    } catch (error) {
    23	      console.error('Error fetching market:', error)
    24	      setError('Market not found or failed to load.')
    25	    } finally {
    26	      setLoading(false)
    27	    }
    28	  }
    29	
    30	  if (loading) {
    31	    return (
    32	      <div className="min-h-screen bg-gray-50 py-8">
    33	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center py-12">
    35	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    36	            <p className="mt-4 text-gray-600">Loading market details...</p>
    37	          </div>
    38	        </div>
    39	      </div>
    40	    )
    41	  }
    42	
    43	  if (error || !market) {
    44	    return (
    45	      <div className="min-h-screen bg-gray-50 py-8">
    46	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    47	          <div className="text-center py-12">
    48	            <p className="text-red-600 mb-4">{error}</p>
    49	            <Link to="/markets" className="btn-primary">
    50	              Back to Markets
    51	            </Link>
    52	          </div>
    53	        </div>
    54	      </div>
    55	    )
    56	  }
    57	
    58	  return (
    59	    <div className="min-h-screen bg-gray-50 py-8">
    60	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    61	        <Link to="/markets" className="inline-flex items-center text-primary-600 hover:text-primary-500 mb-6">
    62	          <ArrowLeft className="h-5 w-5 mr-2" />
    63	          Back to Markets
    64	        </Link>
    65	
    66	        <div className="bg-white rounded-lg shadow p-8 mb-8">
    67	          {market.expand?.category && (
    68	            <div className="mb-4">
    69	              <span 
    70	                className="inline-block text-white text-sm px-3 py-1 rounded-full"
    71	                style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
    72	              >
    73	                {market.expand.category.name}
    74	              </span>
    75	            </div>
    76	          )}
    77	
    78	          <h1 className="text-4xl font-bold text-gray-900 mb-4">{market.name}</h1>
    79	          
    80	          <div className="flex items-center text-gray-600 mb-6">
    81	            <MapPin className="h-5 w-5 mr-2" />
    82	            <span>{market.address || `${market.suburb}, ${market.state}`}</span>
    83	          </div>
    84	          
    85	          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    86	            {market.frequency && (
    87	              <div className="flex items-center">
    88	                <Calendar className="h-5 w-5 text-primary-600 mr-3" />
    89	                <div>
    90	                  <p className="font-medium text-gray-900">Schedule</p>
    91	                  <p className="text-gray-600">{market.frequency}</p>
    92	                </div>
    93	              </div>
    94	            )}
    95	
    96	            {market.operating_hours && (
    97	              <div className="flex items-center">
    98	                <Clock className="h-5 w-5 text-primary-600 mr-3" />
    99	                <div>
   100	                  <p className="font-medium text-gray-900">Hours</p>
   101	                  <p className="text-gray-600">{market.operating_hours}</p>
   102	                </div>
   103	              </div>
   104	            )}
   105	
   106	            {market.website && (
   107	              <div className="flex items-center">
   108	                <div>
   109	                  <p className="font-medium text-gray-900">Website</p>
   110	                  <a 
   111	                    href={market.website} 
   112	                    target="_blank" 
   113	                    rel="noopener noreferrer"
   114	                    className="text-primary-600 hover:underline"
   115	                  >
   116	                    Visit Site
   117	                  </a>
   118	                </div>
   119	              </div>
   120	            )}
   121	          </div>
   122	        </div>
   123	
   124	        {market.description && (
   125	          <div className="bg-white rounded-lg shadow p-8 mb-8">
   126	            <h2 className="text-2xl font-bold text-gray-900 mb-4">About This Market</h2>
   127	            <div className="text-gray-600 leading-relaxed">
   128	              {market.description}
   129	            </div>
   130	          </div>
   131	        )}
   132	
   133	        <div className="bg-white rounded-lg shadow p-8">
   134	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Interested in Selling Here?</h2>
   135	          <p className="text-gray-600 mb-6">
   136	            Connect with the market organizers to learn about stallholder opportunities, 
   137	            application requirements, and available spaces.
   138	          </p>
   139	          <div className="flex flex-col sm:flex-row gap-4">
   140	            <Link to="/register" className="btn-primary">
   141	              Apply as Stallholder
   142	            </Link>
   143	            <button className="btn-secondary">
   144	              Contact Organizer
   145	            </button>
   146	          </div>
   147	        </div>
   148	      </div>
   149	    </div>
   150	  )
   151	}

========================================

üìÅ FILE: src/pages/MarketList.jsx
   Size: 7.3K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { Link } from 'react-router-dom'
     3	import { Search, Filter, MapPin, Clock, Calendar } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketList() {
     7	  const [markets, setMarkets] = useState([])
     8	  const [categories, setCategories] = useState([])
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	  const [filters, setFilters] = useState({
    12	    search: '',
    13	    category: '',
    14	    state: 'SA'
    15	  })
    16	
    17	  useEffect(() => {
    18	    fetchData()
    19	  }, [filters])
    20	
    21	  const fetchData = async () => {
    22	    try {
    23	      setLoading(true)
    24	      setError(null)
    25	
    26	      // Fetch categories
    27	      const categoriesData = await marketService.getCategories()
    28	      setCategories(categoriesData)
    29	
    30	      // Fetch markets with filters
    31	      const marketsData = await marketService.getMarkets({
    32	        search: filters.search,
    33	        category: filters.category,
    34	        state: filters.state,
    35	        perPage: 50
    36	      })
    37	      
    38	      setMarkets(marketsData.items || [])
    39	    } catch (error) {
    40	      console.error('Error fetching data:', error)
    41	      setError('Failed to load markets. Please try again.')
    42	    } finally {
    43	      setLoading(false)
    44	    }
    45	  }
    46	
    47	  const handleSearchChange = (e) => {
    48	    setFilters({ ...filters, search: e.target.value })
    49	  }
    50	
    51	  const handleCategoryChange = (categoryId) => {
    52	    setFilters({ ...filters, category: categoryId })
    53	  }
    54	
    55	  if (loading) {
    56	    return (
    57	      <div className="min-h-screen bg-gray-50 py-8">
    58	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    59	          <div className="text-center py-12">
    60	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    61	            <p className="mt-4 text-gray-600">Loading markets...</p>
    62	          </div>
    63	        </div>
    64	      </div>
    65	    )
    66	  }
    67	
    68	  if (error) {
    69	    return (
    70	      <div className="min-h-screen bg-gray-50 py-8">
    71	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	          <div className="text-center py-12">
    73	            <p className="text-red-600">{error}</p>
    74	            <button 
    75	              onClick={fetchData}
    76	              className="btn-primary mt-4"
    77	            >
    78	              Try Again
    79	            </button>
    80	          </div>
    81	        </div>
    82	      </div>
    83	    )
    84	  }
    85	
    86	  return (
    87	    <div className="min-h-screen bg-gray-50 py-8">
    88	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    89	        <div className="mb-8">
    90	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Browse Markets</h1>
    91	          <p className="text-gray-600">
    92	            Discover {markets.length} local markets across South Australia
    93	          </p>
    94	        </div>
    95	
    96	        <div className="bg-white rounded-lg shadow p-6 mb-8">
    97	          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
    98	            <div className="md:col-span-6">
    99	              <div className="relative">
   100	                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   101	                <input
   102	                  type="text"
   103	                  placeholder="Search markets by name or location..."
   104	                  className="input-field pl-10"
   105	                  value={filters.search}
   106	                  onChange={handleSearchChange}
   107	                />
   108	              </div>
   109	            </div>
   110	
   111	            <div className="md:col-span-4">
   112	              <select
   113	                className="input-field"
   114	                value={filters.category}
   115	                onChange={(e) => handleCategoryChange(e.target.value)}
   116	              >
   117	                <option value="">All Categories</option>
   118	                {categories.map((category) => (
   119	                  <option key={category.id} value={category.id}>
   120	                    {category.name}
   121	                  </option>
   122	                ))}
   123	              </select>
   124	            </div>
   125	
   126	            <div className="md:col-span-2">
   127	              <select
   128	                className="input-field"
   129	                value={filters.state}
   130	                onChange={(e) => setFilters({ ...filters, state: e.target.value })}
   131	              >
   132	                <option value="SA">South Australia</option>
   133	                <option value="VIC">Victoria</option>
   134	                <option value="NSW">New South Wales</option>
   135	                <option value="QLD">Queensland</option>
   136	                <option value="WA">Western Australia</option>
   137	                <option value="TAS">Tasmania</option>
   138	                <option value="NT">Northern Territory</option>
   139	                <option value="ACT">ACT</option>
   140	              </select>
   141	            </div>
   142	          </div>
   143	        </div>
   144	
   145	        {markets.length === 0 ? (
   146	          <div className="text-center py-12">
   147	            <p className="text-gray-600">No markets found matching your criteria.</p>
   148	            <button 
   149	              onClick={() => setFilters({ search: '', category: '', state: 'SA' })}
   150	              className="btn-secondary mt-4"
   151	            >
   152	              Clear Filters
   153	            </button>
   154	          </div>
   155	        ) : (
   156	          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
   157	            {markets.map((market) => (
   158	              <div key={market.id} className="card hover:shadow-lg transition-shadow">
   159	                {market.expand?.category && (
   160	                  <div className="mb-4">
   161	                    <span 
   162	                      className="inline-block text-white text-xs px-2 py-1 rounded-full"
   163	                      style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
   164	                    >
   165	                      {market.expand.category.name}
   166	                    </span>
   167	                  </div>
   168	                )}
   169	
   170	                <h3 className="text-xl font-semibold text-gray-900 mb-2">{market.name}</h3>
   171	                
   172	                <div className="flex items-center text-gray-600 mb-2">
   173	                  <MapPin className="h-4 w-4 mr-1" />
   174	                  <span>{market.suburb}, {market.state}</span>
   175	                </div>
   176	
   177	                {market.frequency && (
   178	                  <div className="flex items-center text-gray-600 mb-2">
   179	                    <Calendar className="h-4 w-4 mr-1" />
   180	                    <span>{market.frequency}</span>
   181	                  </div>
   182	                )}
   183	
   184	                {market.operating_hours && (
   185	                  <div className="flex items-center text-gray-600 mb-4">
   186	                    <Clock className="h-4 w-4 mr-1" />
   187	                    <span>{market.operating_hours}</span>
   188	                  </div>
   189	                )}
   190	
   191	                {market.description && (
   192	                  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
   193	                    {market.description.substring(0, 100)}...
   194	                  </p>
   195	                )}
   196	
   197	                <div className="flex gap-2">
   198	                  <Link 
   199	                    to={`/markets/${market.slug}`}
   200	                    className="btn-primary flex-1 text-center"
   201	                  >
   202	                    View Details
   203	                  </Link>
   204	                  {market.website && (
   205	                    <button className="btn-secondary px-3 py-2" title="Visit Website">
   206	                      üåê
   207	                    </button>
   208	                  )}
   209	                </div>
   210	              </div>
   211	            ))}
   212	          </div>
   213	        )}
   214	      </div>
   215	    </div>
   216	  )
   217	}

========================================

üìÅ FILE: src/pages/Register.jsx
   Size: 5.9K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Register() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    name: '',
    10	    email: '',
    11	    password: '',
    12	    role: 'customer'
    13	  })
    14	  
    15	  const { register, loading, error } = useAuth()
    16	  const navigate = useNavigate()
    17	
    18	  const handleSubmit = async (e) => {
    19	    e.preventDefault()
    20	    try {
    21	      await register(formData)
    22	      navigate('/dashboard')
    23	    } catch (err) {
    24	      // Error is handled by AuthContext
    25	      console.error('Registration failed:', err)
    26	    }
    27	  }
    28	
    29	  return (
    30	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    31	      <div className="max-w-md w-full space-y-8">
    32	        <div>
    33	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    34	            Join SA Markets
    35	          </h2>
    36	          <p className="mt-2 text-center text-sm text-gray-600">
    37	            Create your account to get started
    38	          </p>
    39	        </div>
    40	        
    41	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    42	          {error && (
    43	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    44	              {typeof error === 'object' ? error.general || 'Registration failed' : error}
    45	            </div>
    46	          )}
    47	          
    48	          <div className="space-y-4">
    49	            <div>
    50	              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
    51	                Full Name
    52	              </label>
    53	              <input
    54	                id="name"
    55	                name="name"
    56	                type="text"
    57	                required
    58	                className="input-field mt-1"
    59	                placeholder="Enter your full name"
    60	                value={formData.name}
    61	                onChange={(e) => setFormData({...formData, name: e.target.value})}
    62	                disabled={loading}
    63	              />
    64	              {error?.name && (
    65	                <p className="mt-1 text-sm text-red-600">{error.name}</p>
    66	              )}
    67	            </div>
    68	            
    69	            <div>
    70	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    71	                Email address
    72	              </label>
    73	              <input
    74	                id="email"
    75	                name="email"
    76	                type="email"
    77	                required
    78	                className="input-field mt-1"
    79	                placeholder="Enter your email"
    80	                value={formData.email}
    81	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    82	                disabled={loading}
    83	              />
    84	              {error?.email && (
    85	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    86	              )}
    87	            </div>
    88	            
    89	            <div>
    90	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    91	                Password
    92	              </label>
    93	              <div className="mt-1 relative">
    94	                <input
    95	                  id="password"
    96	                  name="password"
    97	                  type={showPassword ? 'text' : 'password'}
    98	                  required
    99	                  className="input-field pr-10"
   100	                  placeholder="Create a password"
   101	                  value={formData.password}
   102	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
   103	                  disabled={loading}
   104	                />
   105	                <button
   106	                  type="button"
   107	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
   108	                  onClick={() => setShowPassword(!showPassword)}
   109	                  disabled={loading}
   110	                >
   111	                  {showPassword ? (
   112	                    <EyeOff className="h-5 w-5 text-gray-400" />
   113	                  ) : (
   114	                    <Eye className="h-5 w-5 text-gray-400" />
   115	                  )}
   116	                </button>
   117	              </div>
   118	              {error?.password && (
   119	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   120	              )}
   121	            </div>
   122	            
   123	            <div>
   124	              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
   125	                I am a...
   126	              </label>
   127	              <select
   128	                id="role"
   129	                name="role"
   130	                className="input-field mt-1"
   131	                value={formData.role}
   132	                onChange={(e) => setFormData({...formData, role: e.target.value})}
   133	                disabled={loading}
   134	              >
   135	                <option value="customer">Market Customer</option>
   136	                <option value="stallholder">Stallholder/Vendor</option>
   137	                <option value="organizer">Market Organizer</option>
   138	              </select>
   139	              {error?.role && (
   140	                <p className="mt-1 text-sm text-red-600">{error.role}</p>
   141	              )}
   142	            </div>
   143	          </div>
   144	
   145	          <div>
   146	            <button 
   147	              type="submit" 
   148	              className="btn-primary w-full flex items-center justify-center"
   149	              disabled={loading}
   150	            >
   151	              {loading ? (
   152	                <>
   153	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   154	                  Creating account...
   155	                </>
   156	              ) : (
   157	                'Create Account'
   158	              )}
   159	            </button>
   160	          </div>
   161	
   162	          <div className="text-center">
   163	            <span className="text-sm text-gray-600">
   164	              Already have an account?{' '}
   165	              <Link to="/login" className="text-primary-600 hover:text-primary-500 font-medium">
   166	                Sign in here
   167	              </Link>
   168	            </span>
   169	          </div>
   170	        </form>
   171	      </div>
   172	    </div>
   173	  )
   174	}

========================================

üìÅ FILE: src/scripts/auth-manager.js
   Size: 5.2K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/auth-manager.js - Fixed Authentication System
     2	import fs from 'fs/promises';
     3	import { existsSync } from 'fs';
     4	import crypto from 'crypto';
     5	import os from 'os';
     6	import path from 'path';
     7	import { createInterface } from 'readline';
     8	
     9	class AuthManager {
    10	  constructor() {
    11	    this.configDir = path.join(os.homedir(), '.sa-markets');
    12	    this.tokenFile = path.join(this.configDir, 'auth.json');
    13	    this.encryptionKey = this.getOrCreateEncryptionKey();
    14	  }
    15	
    16	  async ensureConfigDir() {
    17	    if (!existsSync(this.configDir)) {
    18	      await fs.mkdir(this.configDir, { recursive: true, mode: 0o700 });
    19	    }
    20	  }
    21	
    22	  getOrCreateEncryptionKey() {
    23	    // Use a combination of machine-specific data for encryption
    24	    const machineId = os.hostname() + os.platform() + os.arch();
    25	    return crypto.createHash('sha256').update(machineId).digest();
    26	  }
    27	
    28	  encrypt(text) {
    29	    const iv = crypto.randomBytes(16);
    30	    const cipher = crypto.createCipheriv('aes-256-cbc', this.encryptionKey, iv);
    31	    let encrypted = cipher.update(text, 'utf8', 'hex');
    32	    encrypted += cipher.final('hex');
    33	    return iv.toString('hex') + ':' + encrypted;
    34	  }
    35	
    36	  decrypt(encryptedData) {
    37	    try {
    38	      const [ivHex, encrypted] = encryptedData.split(':');
    39	      const iv = Buffer.from(ivHex, 'hex');
    40	      const decipher = crypto.createDecipheriv('aes-256-cbc', this.encryptionKey, iv);
    41	      let decrypted = decipher.update(encrypted, 'hex', 'utf8');
    42	      decrypted += decipher.final('utf8');
    43	      return decrypted;
    44	    } catch (error) {
    45	      throw new Error('Failed to decrypt stored credentials');
    46	    }
    47	  }
    48	
    49	  async saveCredentials(email, password, token) {
    50	    try {
    51	      await this.ensureConfigDir();
    52	      
    53	      const credentials = {
    54	        email: this.encrypt(email),
    55	        password: this.encrypt(password),
    56	        token: this.encrypt(token),
    57	        timestamp: Date.now(),
    58	        expiresAt: Date.now() + (7 * 24 * 60 * 60 * 1000) // 7 days
    59	      };
    60	
    61	      await fs.writeFile(this.tokenFile, JSON.stringify(credentials, null, 2), { mode: 0o600 });
    62	      console.log('üîê Credentials saved securely');
    63	    } catch (error) {
    64	      console.error('‚ùå Error saving credentials:', error.message);
    65	    }
    66	  }
    67	
    68	  async loadCredentials() {
    69	    try {
    70	      if (!existsSync(this.tokenFile)) {
    71	        return null;
    72	      }
    73	
    74	      const credentialsData = await fs.readFile(this.tokenFile, 'utf8');
    75	      const credentials = JSON.parse(credentialsData);
    76	
    77	      // Check if credentials are expired
    78	      if (Date.now() > credentials.expiresAt) {
    79	        await this.clearCredentials();
    80	        return null;
    81	      }
    82	
    83	      return {
    84	        email: this.decrypt(credentials.email),
    85	        password: this.decrypt(credentials.password),
    86	        token: this.decrypt(credentials.token),
    87	        timestamp: credentials.timestamp,
    88	        expiresAt: credentials.expiresAt
    89	      };
    90	    } catch (error) {
    91	      console.error('‚ùå Error loading credentials:', error.message);
    92	      await this.clearCredentials(); // Clear corrupted credentials
    93	      return null;
    94	    }
    95	  }
    96	
    97	  async clearCredentials() {
    98	    try {
    99	      if (existsSync(this.tokenFile)) {
   100	        await fs.unlink(this.tokenFile);
   101	        console.log('üóëÔ∏è  Stored credentials cleared');
   102	      }
   103	    } catch (error) {
   104	      console.error('‚ùå Error clearing credentials:', error.message);
   105	    }
   106	  }
   107	}
   108	
   109	// Fixed password input with better cross-platform support
   110	class PasswordInput {
   111	  static async getPassword(prompt = 'Password: ') {
   112	    return new Promise((resolve) => {
   113	      const rl = createInterface({
   114	        input: process.stdin,
   115	        output: process.stdout
   116	      });
   117	
   118	      process.stdout.write(prompt);
   119	      
   120	      let password = '';
   121	      let stdin = process.stdin;
   122	      
   123	      // Hide input
   124	      stdin.setRawMode(true);
   125	      stdin.resume();
   126	      stdin.setEncoding('utf8');
   127	
   128	      const onData = (char) => {
   129	        switch (char) {
   130	          case '\n':
   131	          case '\r':
   132	          case '\u0004': // Ctrl+D
   133	            stdin.setRawMode(false);
   134	            stdin.pause();
   135	            stdin.removeListener('data', onData);
   136	            rl.close();
   137	            process.stdout.write('\n');
   138	            resolve(password);
   139	            break;
   140	          case '\u0003': // Ctrl+C
   141	            console.log('\n^C');
   142	            process.exit(1);
   143	            break;
   144	          case '\u007f': // Backspace
   145	          case '\b': // Backspace on Windows
   146	            if (password.length > 0) {
   147	              password = password.slice(0, -1);
   148	              process.stdout.write('\b \b');
   149	            }
   150	            break;
   151	          default:
   152	            // Only accept printable characters
   153	            if (char.charCodeAt(0) >= 32 && char.charCodeAt(0) < 127) {
   154	              password += char;
   155	              process.stdout.write('*');
   156	            }
   157	            break;
   158	        }
   159	      };
   160	
   161	      stdin.on('data', onData);
   162	    });
   163	  }
   164	
   165	  static async getInput(prompt) {
   166	    const rl = createInterface({
   167	      input: process.stdin,
   168	      output: process.stdout
   169	    });
   170	
   171	    try {
   172	      const answer = await new Promise((resolve) => {
   173	        rl.question(prompt, (answer) => {
   174	          resolve(answer);
   175	        });
   176	      });
   177	      return answer.trim();
   178	    } finally {
   179	      rl.close();
   180	    }
   181	  }
   182	}
   183	
   184	export { AuthManager, PasswordInput };

========================================

üìÅ FILE: src/scripts/manage-database.js
   Size: 11K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/manage-database.js - ES Module Version
     2	import PocketBase from 'pocketbase';
     3	import fs from 'fs';
     4	
     5	const pb = new PocketBase(process.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     6	
     7	class DatabaseManager {
     8	  constructor() {
     9	    this.newMarketFields = [
    10	      // Enhanced Schedule Fields
    11	      { name: "frequency_type", type: "select", required: false, options: {
    12	        maxSelect: 1, values: ["regular", "weekly_pattern", "monthly_pattern", "custom_dates"]
    13	      }},
    14	      { name: "frequency_details", type: "json", required: false },
    15	      { name: "start_time", type: "text", required: false },
    16	      { name: "end_time", type: "text", required: false },
    17	      { name: "setup_time", type: "text", required: false },
    18	      { name: "packdown_time", type: "text", required: false },
    19	      
    20	      // Enhanced Location Fields
    21	      { name: "latitude", type: "number", required: false },
    22	      { name: "longitude", type: "number", required: false },
    23	      { name: "venue_type", type: "select", required: false, options: {
    24	        maxSelect: 1, values: ["outdoor", "indoor", "covered", "mixed"]
    25	      }},
    26	      
    27	      // Amenities (boolean fields)
    28	      { name: "toilets", type: "bool", required: false },
    29	      { name: "parking", type: "bool", required: false },
    30	      { name: "food_court", type: "bool", required: false },
    31	      { name: "atm", type: "bool", required: false },
    32	      { name: "wheelchair_access", type: "bool", required: false },
    33	      { name: "childrens_area", type: "bool", required: false },
    34	      { name: "entertainment", type: "bool", required: false },
    35	      { name: "seating", type: "bool", required: false },
    36	      { name: "weather_protection", type: "bool", required: false },
    37	      { name: "storage_available", type: "bool", required: false },
    38	      { name: "loading_dock", type: "bool", required: false },
    39	      { name: "security", type: "bool", required: false },
    40	      { name: "wifi", type: "bool", required: false },
    41	      { name: "pet_friendly", type: "bool", required: false },
    42	      
    43	      // Enhanced Fee Structure
    44	      { name: "fee_structure", type: "json", required: false },
    45	      { name: "base_stall_fee", type: "number", required: false },
    46	      { name: "application_fee", type: "number", required: false },
    47	      { name: "bond_required", type: "bool", required: false },
    48	      { name: "bond_amount", type: "number", required: false },
    49	      
    50	      // Stallholder Requirements
    51	      { name: "insurance_required", type: "bool", required: false },
    52	      { name: "insurance_minimum", type: "number", required: false },
    53	      { name: "abn_required", type: "bool", required: false },
    54	      { name: "power_available", type: "bool", required: false },
    55	      { name: "power_cost", type: "number", required: false },
    56	      
    57	      // Capacity
    58	      { name: "max_stalls", type: "number", required: false },
    59	      { name: "stall_sizes", type: "json", required: false },
    60	      
    61	      // Media
    62	      { name: "featured_image", type: "file", required: false, options: { maxSelect: 1, maxSize: 5242880 } },
    63	      { name: "gallery_images", type: "file", required: false, options: { maxSelect: 10, maxSize: 5242880 } },
    64	      
    65	      // Analytics
    66	      { name: "view_count", type: "number", required: false },
    67	      { name: "favorite_count", type: "number", required: false }
    68	    ];
    69	  }
    70	
    71	  async addFieldsToMarkets() {
    72	    try {
    73	      console.log('üîÑ Adding new fields to markets collection...');
    74	      
    75	      // Get current markets collection
    76	      const collection = await pb.collections.getOne('markets');
    77	      const currentFields = collection.schema.map(field => field.name);
    78	      
    79	      console.log(`üìã Current fields: ${currentFields.length}`);
    80	      console.log(`üìã Fields to add: ${this.newMarketFields.length}`);
    81	      
    82	      // Add new fields that don't exist
    83	      let fieldsAdded = 0;
    84	      const updatedSchema = [...collection.schema];
    85	      
    86	      for (const newField of this.newMarketFields) {
    87	        if (!currentFields.includes(newField.name)) {
    88	          updatedSchema.push(newField);
    89	          fieldsAdded++;
    90	          console.log(`‚úÖ Will add field: ${newField.name} (${newField.type})`);
    91	        } else {
    92	          console.log(`‚è≠Ô∏è  Field already exists: ${newField.name}`);
    93	        }
    94	      }
    95	      
    96	      if (fieldsAdded > 0) {
    97	        console.log(`üîÑ Updating collection with ${fieldsAdded} new fields...`);
    98	        
    99	        // Update the collection with new schema
   100	        await pb.collections.update(collection.id, {
   101	          schema: updatedSchema
   102	        });
   103	        
   104	        console.log(`üéâ Successfully added ${fieldsAdded} new fields to markets collection!`);
   105	      } else {
   106	        console.log('‚úÖ All fields already exist, no updates needed.');
   107	      }
   108	      
   109	    } catch (error) {
   110	      console.error('‚ùå Error updating markets collection:', error);
   111	      
   112	      // More detailed error information
   113	      if (error.response) {
   114	        console.error('Response data:', error.response.data);
   115	      }
   116	      
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  async backupSchema() {
   122	    try {
   123	      console.log('üíæ Creating schema backup...');
   124	      
   125	      const collections = ['users', 'markets', 'market_categories', 'stallholders', 'applications', 'reviews'];
   126	      const backup = {
   127	        timestamp: new Date().toISOString(),
   128	        collections: {}
   129	      };
   130	      
   131	      for (const name of collections) {
   132	        try {
   133	          const collection = await pb.collections.getOne(name);
   134	          backup.collections[name] = collection;
   135	          console.log(`‚úÖ Backed up ${name} (${collection.schema.length} fields)`);
   136	        } catch (error) {
   137	          console.log(`‚ö†Ô∏è  Could not backup ${name}: Collection not found`);
   138	        }
   139	      }
   140	
   141	      const backupFile = `schema-backup-${new Date().toISOString().split('T')[0]}.json`;
   142	      fs.writeFileSync(backupFile, JSON.stringify(backup, null, 2));
   143	      console.log(`üíæ Schema backup saved to: ${backupFile}`);
   144	      
   145	      return backupFile;
   146	    } catch (error) {
   147	      console.error('‚ùå Error creating backup:', error);
   148	      throw error;
   149	    }
   150	  }
   151	
   152	  async validateConnection() {
   153	    try {
   154	      console.log('üîç Testing PocketBase connection...');
   155	      const response = await fetch(`${pb.baseUrl}/api/health`);
   156	      if (response.ok) {
   157	        console.log('‚úÖ PocketBase is running');
   158	        return true;
   159	      } else {
   160	        console.log('‚ùå PocketBase health check failed');
   161	        return false;
   162	      }
   163	    } catch (error) {
   164	      console.log('‚ùå Cannot connect to PocketBase:', error.message);
   165	      return false;
   166	    }
   167	  }
   168	
   169	  async listCollections() {
   170	    try {
   171	      console.log('üìã Current collections:');
   172	      const collections = await pb.collections.getFullList();
   173	      collections.forEach(col => {
   174	        console.log(`  üìÅ ${col.name} (${col.schema.length} fields)`);
   175	      });
   176	      return collections;
   177	    } catch (error) {
   178	      console.error('‚ùå Error listing collections:', error);
   179	      throw error;
   180	    }
   181	  }
   182	
   183	  async showMarketFields() {
   184	    try {
   185	      const collection = await pb.collections.getOne('markets');
   186	      console.log(`\nüìã Current markets collection fields (${collection.schema.length}):`);
   187	      collection.schema.forEach((field, index) => {
   188	        const required = field.required ? 'üî¥ REQUIRED' : '‚ö™ optional';
   189	        console.log(`  ${index + 1}. ${field.name} (${field.type}) ${required}`);
   190	      });
   191	      return collection.schema;
   192	    } catch (error) {
   193	      console.error('‚ùå Error showing market fields:', error);
   194	      throw error;
   195	    }
   196	  }
   197	
   198	  async checkMissingFields() {
   199	    try {
   200	      const collection = await pb.collections.getOne('markets');
   201	      const currentFields = collection.schema.map(field => field.name);
   202	      
   203	      const missingFields = this.newMarketFields.filter(
   204	        newField => !currentFields.includes(newField.name)
   205	      );
   206	      
   207	      console.log(`\nüîç Missing fields analysis:`);
   208	      console.log(`üìä Current fields: ${currentFields.length}`);
   209	      console.log(`üìä Available to add: ${this.newMarketFields.length}`);
   210	      console.log(`üìä Missing fields: ${missingFields.length}`);
   211	      
   212	      if (missingFields.length > 0) {
   213	        console.log(`\nüìã Missing fields:`);
   214	        missingFields.forEach((field, index) => {
   215	          console.log(`  ${index + 1}. ${field.name} (${field.type})`);
   216	        });
   217	      } else {
   218	        console.log(`\n‚úÖ All fields are already present!`);
   219	      }
   220	      
   221	      return missingFields;
   222	    } catch (error) {
   223	      console.error('‚ùå Error checking missing fields:', error);
   224	      throw error;
   225	    }
   226	  }
   227	}
   228	
   229	// CLI Interface
   230	async function main() {
   231	  const args = process.argv.slice(2);
   232	  const command = args[0];
   233	  
   234	  const manager = new DatabaseManager();
   235	
   236	  // Test connection first
   237	  const connected = await manager.validateConnection();
   238	  if (!connected) {
   239	    console.log('\n‚ùå Cannot connect to PocketBase.');
   240	    console.log('Make sure PocketBase is running: ./pocketbase serve');
   241	    console.log('Expected URL: http://localhost:8090');
   242	    process.exit(1);
   243	  }
   244	
   245	  try {
   246	    switch (command) {
   247	      case 'backup':
   248	        await manager.backupSchema();
   249	        break;
   250	        
   251	      case 'update':
   252	        console.log('üöÄ Starting markets collection update...\n');
   253	        await manager.backupSchema();
   254	        console.log(''); // Empty line
   255	        await manager.addFieldsToMarkets();
   256	        console.log('\n‚úÖ Update complete!');
   257	        console.log('Run "node scripts/manage-database.js fields" to see updated schema');
   258	        break;
   259	        
   260	      case 'list':
   261	        await manager.listCollections();
   262	        break;
   263	        
   264	      case 'fields':
   265	        await manager.showMarketFields();
   266	        break;
   267	        
   268	      case 'check':
   269	        await manager.checkMissingFields();
   270	        break;
   271	        
   272	      case 'validate':
   273	        await manager.listCollections();
   274	        await manager.showMarketFields();
   275	        await manager.checkMissingFields();
   276	        break;
   277	        
   278	      default:
   279	        console.log(`
   280	üóÑÔ∏è  Database Schema Manager
   281	
   282	Usage:
   283	  node scripts/manage-database.js <command>
   284	
   285	Commands:
   286	  backup    - Create backup of current schema
   287	  update    - Add new fields to markets collection (with backup)
   288	  list      - Show all collections
   289	  fields    - Show current market fields
   290	  check     - Check which fields are missing
   291	  validate  - Complete analysis (list + fields + check)
   292	
   293	Recommended workflow:
   294	  1. node scripts/manage-database.js check     # See what will be added
   295	  2. node scripts/manage-database.js backup   # Create backup
   296	  3. node scripts/manage-database.js update   # Apply changes
   297	  4. node scripts/manage-database.js fields   # Verify results
   298	
   299	Examples:
   300	  node scripts/manage-database.js check
   301	  node scripts/manage-database.js update
   302	  node scripts/manage-database.js validate
   303	        `);
   304	    }
   305	  } catch (error) {
   306	    console.error('\n‚ùå Command failed:', error.message);
   307	    process.exit(1);
   308	  }
   309	}
   310	
   311	main().catch(error => {
   312	  console.error('\n‚ùå Script failed:', error.message);
   313	  process.exit(1);
   314	});

========================================

üìÅ FILE: src/scripts/output.log
   Size: 42K | Modified: 2025-06-04
----------------------------------------
     1	================================================================================
     2	SA Markets Directory - Schema Manager Log
     3	Started: 2025-06-04T04:38:43.506Z
     4	Completed: 2025-06-04T04:38:43.506Z
     5	Duration: 0.00s
     6	Command: apply
     7	PocketBase URL: http://localhost:8090
     8	================================================================================
     9	
    10	[2025-06-04T04:38:41.334Z] INFO: üîç Testing PocketBase connection...
    11	[2025-06-04T04:38:41.346Z] DEBUG: Testing connection to: http://localhost:8090
    12	[2025-06-04T04:38:41.403Z] DEBUG: Health check response: 200
    13	[2025-06-04T04:38:41.403Z] INFO: ‚úÖ PocketBase is running
    14	[2025-06-04T04:38:41.403Z] INFO: üöÄ Applying schema changes to database...
    15	[2025-06-04T04:38:41.403Z] INFO: 
    16	üîê Admin authentication required
    17	[2025-06-04T04:38:41.404Z] DEBUG: PocketBase URL: http://localhost:8090
    18	[2025-06-04T04:38:41.404Z] INFO: üîç Checking for stored credentials...
    19	[2025-06-04T04:38:41.406Z] INFO: üîë Using stored credentials...
    20	[2025-06-04T04:38:41.406Z] DEBUG: Stored creds for: admin@test.com
    21	[2025-06-04T04:38:41.407Z] DEBUG: Attempting authentication for: admin@test.com
    22	[2025-06-04T04:38:41.420Z] DEBUG: Authentication error: {"url":"http://localhost:8090/api/collections/_superusers/auth-with-password","status":404,"response":{"code":404,"message":"The requested resource wasn't found.","data":{}},"isAbort":false,"originalError":{"url":"http://localhost:8090/api/collections/_superusers/auth-with-password","status":404,"data":{"code":404,"message":"The requested resource wasn't found.","data":{}}},"name":"ClientResponseError 404"}
    23	[2025-06-04T04:38:41.420Z] DEBUG: Trying alternative authentication method...
    24	[2025-06-04T04:38:41.703Z] INFO: üîê Credentials saved securely
    25	[2025-06-04T04:38:41.703Z] INFO: ‚úÖ Authentication successful with stored credentials
    26	[2025-06-04T04:38:41.703Z] INFO: ‚ÑπÔ∏è  Stored credentials expire in 7 days
    27	[2025-06-04T04:38:41.707Z] DEBUG: Schema loaded from ./schema/database.json
    28	[2025-06-04T04:38:41.707Z] INFO: ‚úÖ Loaded schema v2.0.0
    29	[2025-06-04T04:38:41.707Z] INFO: üìã Collections defined: 10
    30	[2025-06-04T04:38:41.707Z] INFO: üìã Collections:
    31	[2025-06-04T04:38:41.707Z] INFO:   - users (auth) - 4 fields
    32	[2025-06-04T04:38:41.707Z] INFO:   - market_categories (base) - 5 fields
    33	[2025-06-04T04:38:41.707Z] INFO:   - amenity_types (base) - 5 fields
    34	[2025-06-04T04:38:41.707Z] INFO:   - markets (base) - 27 fields
    35	[2025-06-04T04:38:41.707Z] INFO:   - market_amenities (base) - 4 fields
    36	[2025-06-04T04:38:41.707Z] INFO:   - market_schedules (base) - 8 fields
    37	[2025-06-04T04:38:41.707Z] INFO:   - market_fees (base) - 10 fields
    38	[2025-06-04T04:38:41.707Z] INFO:   - stallholders (base) - 14 fields
    39	[2025-06-04T04:38:41.707Z] INFO:   - applications (base) - 10 fields
    40	[2025-06-04T04:38:41.708Z] INFO:   - reviews (base) - 8 fields
    41	[2025-06-04T04:38:41.708Z] DEBUG: Building collection ID mapping...
    42	[2025-06-04T04:38:41.723Z] DEBUG: Collection ID mapping built: 21 mappings
    43	[2025-06-04T04:38:41.723Z] INFO: üìã Collection ID Mapping:
    44	[2025-06-04T04:38:41.723Z] DEBUG:   users: _pb_users_auth_
    45	[2025-06-04T04:38:41.723Z] DEBUG:   USERS_ID: _pb_users_auth_
    46	[2025-06-04T04:38:41.723Z] DEBUG:   _pb_users_auth_: _pb_users_auth_
    47	[2025-06-04T04:38:41.723Z] DEBUG:   market_categories: o8aksmzfhlw04g0
    48	[2025-06-04T04:38:41.723Z] DEBUG:   MARKET_CATEGORIES_ID: o8aksmzfhlw04g0
    49	[2025-06-04T04:38:41.723Z] DEBUG:   markets: 4f3nr3ssrl6oqc0
    50	[2025-06-04T04:38:41.723Z] DEBUG:   MARKETS_ID: 4f3nr3ssrl6oqc0
    51	[2025-06-04T04:38:41.723Z] DEBUG:   stallholders: 9isenkwpz24w58h
    52	[2025-06-04T04:38:41.723Z] DEBUG:   STALLHOLDERS_ID: 9isenkwpz24w58h
    53	[2025-06-04T04:38:41.723Z] DEBUG:   applications: 3p4wlpx9oyop082
    54	[2025-06-04T04:38:41.723Z] DEBUG:   APPLICATIONS_ID: 3p4wlpx9oyop082
    55	[2025-06-04T04:38:41.723Z] DEBUG:   reviews: zxozxtdi8ik5wja
    56	[2025-06-04T04:38:41.723Z] DEBUG:   REVIEWS_ID: zxozxtdi8ik5wja
    57	[2025-06-04T04:38:41.724Z] DEBUG:   amenity_types: 8ise5fvjffnrk3n
    58	[2025-06-04T04:38:41.724Z] DEBUG:   AMENITY_TYPES_ID: 8ise5fvjffnrk3n
    59	[2025-06-04T04:38:41.724Z] DEBUG:   market_amenities: cfu5z15uxga798n
    60	[2025-06-04T04:38:41.724Z] DEBUG:   MARKET_AMENITIES_ID: cfu5z15uxga798n
    61	[2025-06-04T04:38:41.724Z] DEBUG:   market_schedules: k770tganiekaal2
    62	[2025-06-04T04:38:41.724Z] DEBUG:   MARKET_SCHEDULES_ID: k770tganiekaal2
    63	[2025-06-04T04:38:41.724Z] DEBUG:   market_fees: lunwvjcf99uyi5e
    64	[2025-06-04T04:38:41.724Z] DEBUG:   MARKET_FEES_ID: lunwvjcf99uyi5e
    65	[2025-06-04T04:38:41.724Z] DEBUG: Fetching collections from PocketBase...
    66	[2025-06-04T04:38:41.735Z] DEBUG: Found 10 collections
    67	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: users
    68	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: market_categories
    69	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: markets
    70	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: stallholders
    71	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: applications
    72	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: reviews
    73	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: amenity_types
    74	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: market_amenities
    75	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: market_schedules
    76	[2025-06-04T04:38:41.735Z] DEBUG: Processing collection: market_fees
    77	[2025-06-04T04:38:41.735Z] DEBUG: Defined collections: users, market_categories, amenity_types, markets, market_amenities, market_schedules, market_fees, stallholders, applications, reviews
    78	[2025-06-04T04:38:41.735Z] DEBUG: Current collections: users, market_categories, markets, stallholders, applications, reviews, amenity_types, market_amenities, market_schedules, market_fees
    79	[2025-06-04T04:38:41.738Z] INFO: 
    80	üìä SCHEMA COMPARISON RESULTS
    81	[2025-06-04T04:38:41.738Z] INFO: =====================================
    82	[2025-06-04T04:38:41.738Z] INFO: 
    83	üîÑ Collections to UPDATE (10):
    84	[2025-06-04T04:38:41.738Z] INFO:   üìÅ users:
    85	[2025-06-04T04:38:41.738Z] INFO:     ‚ûï Add field: phone (text)
    86	[2025-06-04T04:38:41.738Z] INFO:     ‚ûï Add field: email_verified (bool)
    87	[2025-06-04T04:38:41.739Z] INFO:     ‚ûï Add field: subscription_tier (select)
    88	[2025-06-04T04:38:41.739Z] INFO:     ‚ûñ Remove field: name (text)
    89	[2025-06-04T04:38:41.739Z] INFO:     ‚ûñ Remove field: avatar (file)
    90	[2025-06-04T04:38:41.739Z] INFO:     üîß Modify field: role
    91	[2025-06-04T04:38:41.739Z] INFO:   üìÅ market_categories:
    92	[2025-06-04T04:38:41.739Z] INFO:     üîß Modify field: name
    93	[2025-06-04T04:38:41.739Z] INFO:     üîß Modify field: description
    94	[2025-06-04T04:38:41.739Z] INFO:     üîß Modify field: color
    95	[2025-06-04T04:38:41.740Z] INFO:     üîß Modify field: icon
    96	[2025-06-04T04:38:41.740Z] INFO:     üîß Modify field: sort_order
    97	[2025-06-04T04:38:41.740Z] INFO:     üîê Modify rule: listRule
    98	[2025-06-04T04:38:41.741Z] INFO:     üîê Modify rule: viewRule
    99	[2025-06-04T04:38:41.741Z] INFO:   üìÅ amenity_types:
   100	[2025-06-04T04:38:41.741Z] INFO:     üîß Modify field: name
   101	[2025-06-04T04:38:41.741Z] INFO:     üîß Modify field: description
   102	[2025-06-04T04:38:41.741Z] INFO:     üîß Modify field: icon
   103	[2025-06-04T04:38:41.741Z] INFO:     üîß Modify field: category
   104	[2025-06-04T04:38:41.742Z] INFO:     üîß Modify field: active
   105	[2025-06-04T04:38:41.742Z] INFO:     üîê Modify rule: listRule
   106	[2025-06-04T04:38:41.742Z] INFO:     üîê Modify rule: viewRule
   107	[2025-06-04T04:38:41.742Z] INFO:   üìÅ markets:
   108	[2025-06-04T04:38:41.743Z] INFO:     ‚ûï Add field: category (relation)
   109	[2025-06-04T04:38:41.743Z] INFO:     ‚ûï Add field: organizer (relation)
   110	[2025-06-04T04:38:41.743Z] INFO:     ‚ûï Add field: postcode (text)
   111	[2025-06-04T04:38:41.743Z] INFO:     ‚ûï Add field: latitude (number)
   112	[2025-06-04T04:38:41.743Z] INFO:     ‚ûï Add field: longitude (number)
   113	[2025-06-04T04:38:41.744Z] INFO:     ‚ûï Add field: venue_type (select)
   114	[2025-06-04T04:38:41.744Z] INFO:     ‚ûï Add field: contact_phone (text)
   115	[2025-06-04T04:38:41.744Z] INFO:     ‚ûï Add field: social_media (json)
   116	[2025-06-04T04:38:41.745Z] INFO:     ‚ûï Add field: max_stalls (number)
   117	[2025-06-04T04:38:41.745Z] INFO:     ‚ûï Add field: insurance_minimum (number)
   118	[2025-06-04T04:38:41.745Z] INFO:     ‚ûï Add field: abn_required (bool)
   119	[2025-06-04T04:38:41.746Z] INFO:     ‚ûï Add field: waiting_list_enabled (bool)
   120	[2025-06-04T04:38:41.746Z] INFO:     ‚ûï Add field: featured_image (file)
   121	[2025-06-04T04:38:41.746Z] INFO:     ‚ûï Add field: gallery_images (file)
   122	[2025-06-04T04:38:41.747Z] INFO:     ‚ûï Add field: view_count (number)
   123	[2025-06-04T04:38:41.747Z] INFO:     ‚ûï Add field: favorite_count (number)
   124	[2025-06-04T04:38:41.747Z] INFO:     ‚ûï Add field: average_rating (number)
   125	[2025-06-04T04:38:41.749Z] INFO:     ‚ûï Add field: total_reviews (number)
   126	[2025-06-04T04:38:41.749Z] INFO:     ‚ûñ Remove field: frequency (text)
   127	[2025-06-04T04:38:41.749Z] INFO:     ‚ûñ Remove field: operating_hours (text)
   128	[2025-06-04T04:38:41.749Z] INFO:     üîß Modify field: name
   129	[2025-06-04T04:38:41.750Z] INFO:     üîß Modify field: slug
   130	[2025-06-04T04:38:41.750Z] INFO:     üîß Modify field: description
   131	[2025-06-04T04:38:41.750Z] INFO:     üîß Modify field: address
   132	[2025-06-04T04:38:41.750Z] INFO:     üîß Modify field: suburb
   133	[2025-06-04T04:38:41.751Z] INFO:     üîß Modify field: state
   134	[2025-06-04T04:38:41.751Z] INFO:     üîß Modify field: contact_email
   135	[2025-06-04T04:38:41.751Z] INFO:     üîß Modify field: website
   136	[2025-06-04T04:38:41.751Z] INFO:     üîß Modify field: active
   137	[2025-06-04T04:38:41.752Z] INFO:     üîê Modify rule: createRule
   138	[2025-06-04T04:38:41.753Z] INFO:     üîê Modify rule: updateRule
   139	[2025-06-04T04:38:41.753Z] INFO:     üîê Modify rule: deleteRule
   140	[2025-06-04T04:38:41.753Z] INFO:   üìÅ market_amenities:
   141	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: market
   142	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: amenity_type
   143	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: available
   144	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: notes
   145	[2025-06-04T04:38:41.755Z] INFO:     üîê Modify rule: listRule
   146	[2025-06-04T04:38:41.755Z] INFO:     üîê Modify rule: viewRule
   147	[2025-06-04T04:38:41.755Z] INFO:   üìÅ market_schedules:
   148	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: market
   149	[2025-06-04T04:38:41.755Z] INFO:     üîß Modify field: schedule_type
   150	[2025-06-04T04:38:41.756Z] INFO:     üîß Modify field: schedule_data
   151	[2025-06-04T04:38:41.756Z] INFO:     üîß Modify field: start_time
   152	[2025-06-04T04:38:41.756Z] INFO:     üîß Modify field: end_time
   153	[2025-06-04T04:38:41.756Z] INFO:     üîß Modify field: start_date
   154	[2025-06-04T04:38:41.756Z] INFO:     üîß Modify field: end_date
   155	[2025-06-04T04:38:41.757Z] INFO:     üîß Modify field: active
   156	[2025-06-04T04:38:41.757Z] INFO:     üîê Modify rule: listRule
   157	[2025-06-04T04:38:41.757Z] INFO:     üîê Modify rule: viewRule
   158	[2025-06-04T04:38:41.758Z] INFO:   üìÅ market_fees:
   159	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: market
   160	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: fee_type
   161	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: fee_name
   162	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: amount
   163	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: currency
   164	[2025-06-04T04:38:41.758Z] INFO:     üîß Modify field: frequency
   165	[2025-06-04T04:38:41.759Z] INFO:     üîß Modify field: conditions
   166	[2025-06-04T04:38:41.759Z] INFO:     üîß Modify field: valid_from
   167	[2025-06-04T04:38:41.760Z] INFO:     üîß Modify field: valid_until
   168	[2025-06-04T04:38:41.760Z] INFO:     üîß Modify field: active
   169	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: listRule
   170	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: viewRule
   171	[2025-06-04T04:38:41.760Z] INFO:   üìÅ stallholders:
   172	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: user (relation)
   173	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: business_description (text)
   174	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: abn (text)
   175	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: contact_phone (text)
   176	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: social_media (json)
   177	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: power_required (bool)
   178	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: space_requirements (text)
   179	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: rating (number)
   180	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: reviews_count (number)
   181	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: is_verified (bool)
   182	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: subscription_tier (select)
   183	[2025-06-04T04:38:41.760Z] INFO:     ‚ûñ Remove field: description (editor)
   184	[2025-06-04T04:38:41.760Z] INFO:     ‚ûñ Remove field: active (bool)
   185	[2025-06-04T04:38:41.760Z] INFO:     üîß Modify field: business_name
   186	[2025-06-04T04:38:41.760Z] INFO:     üîß Modify field: product_categories
   187	[2025-06-04T04:38:41.760Z] INFO:     üîß Modify field: website
   188	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: listRule
   189	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: viewRule
   190	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: createRule
   191	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: updateRule
   192	[2025-06-04T04:38:41.760Z] INFO:     üîê Modify rule: deleteRule
   193	[2025-06-04T04:38:41.760Z] INFO:   üìÅ applications:
   194	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: stallholder (relation)
   195	[2025-06-04T04:38:41.760Z] INFO:     ‚ûï Add field: market (relation)
   196	[2025-06-04T04:38:41.761Z] INFO:     ‚ûï Add field: application_date (date)
   197	[2025-06-04T04:38:41.761Z] INFO:     ‚ûï Add field: message (text)
   198	[2025-06-04T04:38:41.761Z] INFO:     ‚ûï Add field: payment_status (select)
   199	[2025-06-04T04:38:41.761Z] INFO:     ‚ûï Add field: payment_amount (number)
   200	[2025-06-04T04:38:41.761Z] INFO:     ‚ûï Add field: stall_assignment (text)
   201	[2025-06-04T04:38:41.761Z] INFO:     ‚ûñ Remove field: stallholder_notes (text)
   202	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: status
   203	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: requested_dates
   204	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: organizer_notes
   205	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: listRule
   206	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: viewRule
   207	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: createRule
   208	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: updateRule
   209	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: deleteRule
   210	[2025-06-04T04:38:41.761Z] INFO:   üìÅ reviews:
   211	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: reviewer
   212	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: target_type
   213	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: target_id
   214	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: rating
   215	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: title
   216	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: comment
   217	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: helpful_votes
   218	[2025-06-04T04:38:41.761Z] INFO:     üîß Modify field: verified_purchase
   219	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: listRule
   220	[2025-06-04T04:38:41.761Z] INFO:     üîê Modify rule: viewRule
   221	[2025-06-04T04:38:41.761Z] INFO: 
   222	=====================================
   223	[2025-06-04T04:38:41.761Z] INFO: üí° Run "node scripts/schema-manager.js apply" to apply these changes
   224	[2025-06-04T04:38:43.066Z] INFO: 
   225	üîÑ User confirmed schema application: "yes"
   226	[2025-06-04T04:38:43.066Z] DEBUG: Resolving collection ID placeholders...
   227	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field category: MARKET_CATEGORIES_ID -> o8aksmzfhlw04g0
   228	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field organizer: _pb_users_auth_ -> _pb_users_auth_
   229	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field market: MARKETS_ID -> 4f3nr3ssrl6oqc0
   230	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field amenity_type: AMENITY_TYPES_ID -> 8ise5fvjffnrk3n
   231	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field market: MARKETS_ID -> 4f3nr3ssrl6oqc0
   232	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field market: MARKETS_ID -> 4f3nr3ssrl6oqc0
   233	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field user: _pb_users_auth_ -> _pb_users_auth_
   234	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field stallholder: STALLHOLDERS_ID -> 9isenkwpz24w58h
   235	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field market: MARKETS_ID -> 4f3nr3ssrl6oqc0
   236	[2025-06-04T04:38:43.066Z] DEBUG: Resolved relation field reviewer: _pb_users_auth_ -> _pb_users_auth_
   237	[2025-06-04T04:38:43.066Z] DEBUG: Collection IDs resolved successfully
   238	[2025-06-04T04:38:43.066Z] DEBUG: Original schema collections: users, market_categories, amenity_types, markets, market_amenities, market_schedules, market_fees, stallholders, applications, reviews
   239	[2025-06-04T04:38:43.066Z] DEBUG: Resolved schema collections: users, market_categories, amenity_types, markets, market_amenities, market_schedules, market_fees, stallholders, applications, reviews
   240	[2025-06-04T04:38:43.066Z] INFO: 
   241	üìã Non-relational collections to create: 0
   242	[2025-06-04T04:38:43.066Z] INFO: üìã Relational collections to create: 0
   243	[2025-06-04T04:38:43.066Z] INFO: 
   244	üîÑ Updating 10 existing collections...
   245	[2025-06-04T04:38:43.066Z] INFO: 
   246	üîÑ Updating collection: users
   247	[2025-06-04T04:38:43.070Z] DEBUG: Found schema using original name: users
   248	[2025-06-04T04:38:43.070Z] DEBUG: Updating collection users with: {
   249	  "schema": [
   250	    {
   251	      "name": "role",
   252	      "type": "select",
   253	      "required": true,
   254	      "options": {
   255	        "maxSelect": 1,
   256	        "values": [
   257	          "customer",
   258	          "stallholder",
   259	          "organizer"
   260	        ]
   261	      },
   262	      "description": "User role in the platform"
   263	    },
   264	    {
   265	      "name": "phone",
   266	      "type": "text",
   267	      "required": false,
   268	      "options": {
   269	        "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   270	      },
   271	      "description": "Australian phone number"
   272	    },
   273	    {
   274	      "name": "email_verified",
   275	      "type": "bool",
   276	      "required": false,
   277	      "description": "Email verification status"
   278	    },
   279	    {
   280	      "name": "subscription_tier",
   281	      "type": "select",
   282	      "required": false,
   283	      "options": {
   284	        "maxSelect": 1,
   285	        "values": [
   286	          "free",
   287	          "basic",
   288	          "premium",
   289	          "enterprise"
   290	        ]
   291	      },
   292	      "description": "Subscription level"
   293	    }
   294	  ],
   295	  "listRule": "id = @request.auth.id",
   296	  "viewRule": "id = @request.auth.id",
   297	  "createRule": null,
   298	  "updateRule": "id = @request.auth.id",
   299	  "deleteRule": "id = @request.auth.id"
   300	}
   301	[2025-06-04T04:38:43.092Z] INFO:   ‚úÖ Updated: users (6 changes)
   302	[2025-06-04T04:38:43.092Z] INFO: 
   303	üîÑ Updating collection: market_categories
   304	[2025-06-04T04:38:43.093Z] DEBUG: Found schema using original name: market_categories
   305	[2025-06-04T04:38:43.093Z] DEBUG: Updating collection market_categories with: {
   306	  "schema": [
   307	    {
   308	      "name": "name",
   309	      "type": "text",
   310	      "required": true,
   311	      "options": {
   312	        "min": 2,
   313	        "max": 50
   314	      },
   315	      "description": "Category name"
   316	    },
   317	    {
   318	      "name": "description",
   319	      "type": "text",
   320	      "required": false,
   321	      "options": {
   322	        "max": 200
   323	      },
   324	      "description": "Category description"
   325	    },
   326	    {
   327	      "name": "color",
   328	      "type": "text",
   329	      "required": false,
   330	      "options": {
   331	        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
   332	      },
   333	      "description": "Hex color code for UI"
   334	    },
   335	    {
   336	      "name": "icon",
   337	      "type": "text",
   338	      "required": false,
   339	      "options": {
   340	        "max": 50
   341	      },
   342	      "description": "Icon identifier"
   343	    },
   344	    {
   345	      "name": "sort_order",
   346	      "type": "number",
   347	      "required": false,
   348	      "options": {
   349	        "min": 0
   350	      },
   351	      "description": "Display order"
   352	    }
   353	  ],
   354	  "listRule": null,
   355	  "viewRule": null,
   356	  "createRule": "@request.auth.role = \"organizer\"",
   357	  "updateRule": "@request.auth.role = \"organizer\"",
   358	  "deleteRule": "@request.auth.role = \"organizer\""
   359	}
   360	[2025-06-04T04:38:43.119Z] INFO:   ‚úÖ Updated: market_categories (7 changes)
   361	[2025-06-04T04:38:43.119Z] INFO: 
   362	üîÑ Updating collection: amenity_types
   363	[2025-06-04T04:38:43.121Z] DEBUG: Found schema using original name: amenity_types
   364	[2025-06-04T04:38:43.121Z] DEBUG: Updating collection amenity_types with: {
   365	  "schema": [
   366	    {
   367	      "name": "name",
   368	      "type": "text",
   369	      "required": true,
   370	      "options": {
   371	        "min": 2,
   372	        "max": 50
   373	      },
   374	      "description": "Amenity name (Toilets, Parking, etc.)"
   375	    },
   376	    {
   377	      "name": "description",
   378	      "type": "text",
   379	      "required": false,
   380	      "options": {
   381	        "max": 200
   382	      },
   383	      "description": "Description of amenity"
   384	    },
   385	    {
   386	      "name": "icon",
   387	      "type": "text",
   388	      "required": false,
   389	      "options": {
   390	        "max": 50
   391	      },
   392	      "description": "Icon for UI"
   393	    },
   394	    {
   395	      "name": "category",
   396	      "type": "select",
   397	      "required": false,
   398	      "options": {
   399	        "maxSelect": 1,
   400	        "values": [
   401	          "facility",
   402	          "service",
   403	          "accessibility"
   404	        ]
   405	      },
   406	      "description": "Amenity category"
   407	    },
   408	    {
   409	      "name": "active",
   410	      "type": "bool",
   411	      "required": false,
   412	      "description": "Is this amenity type active"
   413	    }
   414	  ],
   415	  "listRule": null,
   416	  "viewRule": null,
   417	  "createRule": "@request.auth.role = \"organizer\"",
   418	  "updateRule": "@request.auth.role = \"organizer\"",
   419	  "deleteRule": "@request.auth.role = \"organizer\""
   420	}
   421	[2025-06-04T04:38:43.146Z] INFO:   ‚úÖ Updated: amenity_types (7 changes)
   422	[2025-06-04T04:38:43.146Z] INFO: 
   423	üîÑ Updating collection: markets
   424	[2025-06-04T04:38:43.147Z] DEBUG: Found schema using original name: markets
   425	[2025-06-04T04:38:43.148Z] DEBUG: Updating collection markets with: {
   426	  "schema": [
   427	    {
   428	      "name": "name",
   429	      "type": "text",
   430	      "required": true,
   431	      "options": {
   432	        "min": 2,
   433	        "max": 100
   434	      },
   435	      "description": "Market name"
   436	    },
   437	    {
   438	      "name": "slug",
   439	      "type": "text",
   440	      "required": true,
   441	      "options": {
   442	        "pattern": "^[a-z0-9-]+$",
   443	        "min": 2,
   444	        "max": 100
   445	      },
   446	      "description": "URL-friendly identifier"
   447	    },
   448	    {
   449	      "name": "description",
   450	      "type": "text",
   451	      "required": false,
   452	      "options": {
   453	        "max": 2000
   454	      },
   455	      "description": "Market description"
   456	    },
   457	    {
   458	      "name": "category",
   459	      "type": "relation",
   460	      "required": true,
   461	      "options": {
   462	        "collectionId": "o8aksmzfhlw04g0",
   463	        "cascadeDelete": false,
   464	        "minSelect": null,
   465	        "maxSelect": 1,
   466	        "displayFields": [
   467	          "name"
   468	        ]
   469	      },
   470	      "description": "Market category"
   471	    },
   472	    {
   473	      "name": "organizer",
   474	      "type": "relation",
   475	      "required": true,
   476	      "options": {
   477	        "collectionId": "_pb_users_auth_",
   478	        "cascadeDelete": false,
   479	        "minSelect": null,
   480	        "maxSelect": 1,
   481	        "displayFields": [
   482	          "name",
   483	          "email"
   484	        ]
   485	      },
   486	      "description": "Market organizer"
   487	    },
   488	    {
   489	      "name": "address",
   490	      "type": "text",
   491	      "required": true,
   492	      "options": {
   493	        "max": 200
   494	      },
   495	      "description": "Street address"
   496	    },
   497	    {
   498	      "name": "suburb",
   499	      "type": "text",
   500	      "required": true,
   501	      "options": {
   502	        "max": 50
   503	      },
   504	      "description": "Suburb/City"
   505	    },
   506	    {
   507	      "name": "state",
   508	      "type": "select",
   509	      "required": true,
   510	      "options": {
   511	        "maxSelect": 1,
   512	        "values": [
   513	          "SA",
   514	          "VIC",
   515	          "NSW",
   516	          "QLD",
   517	          "WA",
   518	          "TAS",
   519	          "NT",
   520	          "ACT"
   521	        ]
   522	      },
   523	      "description": "Australian state"
   524	    },
   525	    {
   526	      "name": "postcode",
   527	      "type": "text",
   528	      "required": false,
   529	      "options": {
   530	        "pattern": "^[0-9]{4}$"
   531	      },
   532	      "description": "Australian postcode"
   533	    },
   534	    {
   535	      "name": "latitude",
   536	      "type": "number",
   537	      "required": false,
   538	      "description": "GPS latitude"
   539	    },
   540	    {
   541	      "name": "longitude",
   542	      "type": "number",
   543	      "required": false,
   544	      "description": "GPS longitude"
   545	    },
   546	    {
   547	      "name": "venue_type",
   548	      "type": "select",
   549	      "required": false,
   550	      "options": {
   551	        "maxSelect": 1,
   552	        "values": [
   553	          "outdoor",
   554	          "indoor",
   555	          "covered",
   556	          "mixed"
   557	        ]
   558	      },
   559	      "description": "Venue type"
   560	    },
   561	    {
   562	      "name": "contact_email",
   563	      "type": "email",
   564	      "required": true,
   565	      "description": "Market contact email"
   566	    },
   567	    {
   568	      "name": "contact_phone",
   569	      "type": "text",
   570	      "required": false,
   571	      "options": {
   572	        "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   573	      },
   574	      "description": "Market contact phone"
   575	    },
   576	    {
   577	      "name": "website",
   578	      "type": "url",
   579	      "required": false,
   580	      "description": "Market website"
   581	    },
   582	    {
   583	      "name": "social_media",
   584	      "type": "json",
   585	      "required": false,
   586	      "options": {
   587	        "maxSize": 2000000
   588	      },
   589	      "description": "Social media links"
   590	    },
   591	    {
   592	      "name": "max_stalls",
   593	      "type": "number",
   594	      "required": false,
   595	      "options": {
   596	        "min": 1
   597	      },
   598	      "description": "Maximum number of stalls"
   599	    },
   600	    {
   601	      "name": "insurance_minimum",
   602	      "type": "number",
   603	      "required": false,
   604	      "options": {
   605	        "min": 0
   606	      },
   607	      "description": "Minimum insurance coverage required"
   608	    },
   609	    {
   610	      "name": "abn_required",
   611	      "type": "bool",
   612	      "required": false,
   613	      "description": "ABN required for stallholders"
   614	    },
   615	    {
   616	      "name": "waiting_list_enabled",
   617	      "type": "bool",
   618	      "required": false,
   619	      "description": "Enable waiting list when full"
   620	    },
   621	    {
   622	      "name": "featured_image",
   623	      "type": "file",
   624	      "required": false,
   625	      "options": {
   626	        "maxSelect": 1,
   627	        "maxSize": 5242880,
   628	        "mimeTypes": [
   629	          "image/jpeg",
   630	          "image/png",
   631	          "image/webp"
   632	        ]
   633	      },
   634	      "description": "Main market image"
   635	    },
   636	    {
   637	      "name": "gallery_images",
   638	      "type": "file",
   639	      "required": false,
   640	      "options": {
   641	        "maxSelect": 10,
   642	        "maxSize": 5242880,
   643	        "mimeTypes": [
   644	          "image/jpeg",
   645	          "image/png",
   646	          "image/webp"
   647	        ]
   648	      },
   649	      "description": "Market gallery images"
   650	    },
   651	    {
   652	      "name": "active",
   653	      "type": "bool",
   654	      "required": false,
   655	      "description": "Market is active/published"
   656	    },
   657	    {
   658	      "name": "view_count",
   659	      "type": "number",
   660	      "required": false,
   661	      "options": {
   662	        "min": 0
   663	      },
   664	      "description": "Profile view count"
   665	    },
   666	    {
   667	      "name": "favorite_count",
   668	      "type": "number",
   669	      "required": false,
   670	      "options": {
   671	        "min": 0
   672	      },
   673	      "description": "Times favorited by users"
   674	    },
   675	    {
   676	      "name": "average_rating",
   677	      "type": "number",
   678	      "required": false,
   679	      "options": {
   680	        "min": 0,
   681	        "max": 5
   682	      },
   683	      "description": "Average user rating"
   684	    },
   685	    {
   686	      "name": "total_reviews",
   687	      "type": "number",
   688	      "required": false,
   689	      "options": {
   690	        "min": 0
   691	      },
   692	      "description": "Total number of reviews"
   693	    }
   694	  ],
   695	  "listRule": null,
   696	  "viewRule": null,
   697	  "createRule": "@request.auth.id != \"\" && @request.auth.role = \"organizer\"",
   698	  "updateRule": "@request.auth.id = organizer.id",
   699	  "deleteRule": "@request.auth.id = organizer.id"
   700	}
   701	[2025-06-04T04:38:43.244Z] INFO:   ‚úÖ Updated: markets (32 changes)
   702	[2025-06-04T04:38:43.244Z] INFO: 
   703	üîÑ Updating collection: market_amenities
   704	[2025-06-04T04:38:43.246Z] DEBUG: Found schema using original name: market_amenities
   705	[2025-06-04T04:38:43.246Z] DEBUG: Updating collection market_amenities with: {
   706	  "schema": [
   707	    {
   708	      "name": "market",
   709	      "type": "relation",
   710	      "required": true,
   711	      "options": {
   712	        "collectionId": "4f3nr3ssrl6oqc0",
   713	        "cascadeDelete": true,
   714	        "minSelect": null,
   715	        "maxSelect": 1,
   716	        "displayFields": [
   717	          "name"
   718	        ]
   719	      },
   720	      "description": "Related market"
   721	    },
   722	    {
   723	      "name": "amenity_type",
   724	      "type": "relation",
   725	      "required": true,
   726	      "options": {
   727	        "collectionId": "8ise5fvjffnrk3n",
   728	        "cascadeDelete": false,
   729	        "minSelect": null,
   730	        "maxSelect": 1,
   731	        "displayFields": [
   732	          "name"
   733	        ]
   734	      },
   735	      "description": "Type of amenity"
   736	    },
   737	    {
   738	      "name": "available",
   739	      "type": "bool",
   740	      "required": false,
   741	      "description": "Is this amenity available"
   742	    },
   743	    {
   744	      "name": "notes",
   745	      "type": "text",
   746	      "required": false,
   747	      "options": {
   748	        "max": 200
   749	      },
   750	      "description": "Optional notes about this amenity"
   751	    }
   752	  ],
   753	  "listRule": null,
   754	  "viewRule": null,
   755	  "createRule": "@request.auth.id != \"\"",
   756	  "updateRule": "@request.auth.id != \"\"",
   757	  "deleteRule": "@request.auth.id != \"\""
   758	}
   759	[2025-06-04T04:38:43.268Z] INFO:   ‚úÖ Updated: market_amenities (6 changes)
   760	[2025-06-04T04:38:43.268Z] INFO: 
   761	üîÑ Updating collection: market_schedules
   762	[2025-06-04T04:38:43.269Z] DEBUG: Found schema using original name: market_schedules
   763	[2025-06-04T04:38:43.269Z] DEBUG: Updating collection market_schedules with: {
   764	  "schema": [
   765	    {
   766	      "name": "market",
   767	      "type": "relation",
   768	      "required": true,
   769	      "options": {
   770	        "collectionId": "4f3nr3ssrl6oqc0",
   771	        "cascadeDelete": true,
   772	        "minSelect": null,
   773	        "maxSelect": 1,
   774	        "displayFields": [
   775	          "name"
   776	        ]
   777	      },
   778	      "description": "Related market"
   779	    },
   780	    {
   781	      "name": "schedule_type",
   782	      "type": "select",
   783	      "required": true,
   784	      "options": {
   785	        "maxSelect": 1,
   786	        "values": [
   787	          "regular",
   788	          "weekly_pattern",
   789	          "monthly_pattern",
   790	          "custom_dates"
   791	        ]
   792	      },
   793	      "description": "Type of schedule pattern"
   794	    },
   795	    {
   796	      "name": "schedule_data",
   797	      "type": "json",
   798	      "required": false,
   799	      "options": {
   800	        "maxSize": 2000000
   801	      },
   802	      "description": "Complex schedule patterns"
   803	    },
   804	    {
   805	      "name": "start_time",
   806	      "type": "text",
   807	      "required": false,
   808	      "options": {
   809	        "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   810	      },
   811	      "description": "Market start time (HH:MM)"
   812	    },
   813	    {
   814	      "name": "end_time",
   815	      "type": "text",
   816	      "required": false,
   817	      "options": {
   818	        "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   819	      },
   820	      "description": "Market end time (HH:MM)"
   821	    },
   822	    {
   823	      "name": "start_date",
   824	      "type": "date",
   825	      "required": false,
   826	      "description": "Schedule valid from"
   827	    },
   828	    {
   829	      "name": "end_date",
   830	      "type": "date",
   831	      "required": false,
   832	      "description": "Schedule valid until"
   833	    },
   834	    {
   835	      "name": "active",
   836	      "type": "bool",
   837	      "required": false,
   838	      "description": "Is this schedule active"
   839	    }
   840	  ],
   841	  "listRule": null,
   842	  "viewRule": null,
   843	  "createRule": "@request.auth.id != \"\"",
   844	  "updateRule": "@request.auth.id != \"\"",
   845	  "deleteRule": "@request.auth.id != \"\""
   846	}
   847	[2025-06-04T04:38:43.319Z] INFO:   ‚úÖ Updated: market_schedules (10 changes)
   848	[2025-06-04T04:38:43.320Z] INFO: 
   849	üîÑ Updating collection: market_fees
   850	[2025-06-04T04:38:43.321Z] DEBUG: Found schema using original name: market_fees
   851	[2025-06-04T04:38:43.321Z] DEBUG: Updating collection market_fees with: {
   852	  "schema": [
   853	    {
   854	      "name": "market",
   855	      "type": "relation",
   856	      "required": true,
   857	      "options": {
   858	        "collectionId": "4f3nr3ssrl6oqc0",
   859	        "cascadeDelete": true,
   860	        "minSelect": null,
   861	        "maxSelect": 1,
   862	        "displayFields": [
   863	          "name"
   864	        ]
   865	      },
   866	      "description": "Related market"
   867	    },
   868	    {
   869	      "name": "fee_type",
   870	      "type": "select",
   871	      "required": true,
   872	      "options": {
   873	        "maxSelect": 1,
   874	        "values": [
   875	          "stall_fee",
   876	          "application_fee",
   877	          "bond",
   878	          "power",
   879	          "other"
   880	        ]
   881	      },
   882	      "description": "Type of fee"
   883	    },
   884	    {
   885	      "name": "fee_name",
   886	      "type": "text",
   887	      "required": true,
   888	      "options": {
   889	        "max": 100
   890	      },
   891	      "description": "Display name for fee"
   892	    },
   893	    {
   894	      "name": "amount",
   895	      "type": "number",
   896	      "required": true,
   897	      "options": {
   898	        "min": 0
   899	      },
   900	      "description": "Fee amount"
   901	    },
   902	    {
   903	      "name": "currency",
   904	      "type": "text",
   905	      "required": false,
   906	      "options": {
   907	        "max": 3
   908	      },
   909	      "description": "Currency code (AUD)"
   910	    },
   911	    {
   912	      "name": "frequency",
   913	      "type": "select",
   914	      "required": false,
   915	      "options": {
   916	        "maxSelect": 1,
   917	        "values": [
   918	          "per_day",
   919	          "per_event",
   920	          "one_time"
   921	        ]
   922	      },
   923	      "description": "Fee frequency"
   924	    },
   925	    {
   926	      "name": "conditions",
   927	      "type": "json",
   928	      "required": false,
   929	      "options": {
   930	        "maxSize": 2000000
   931	      },
   932	      "description": "Conditions for this fee"
   933	    },
   934	    {
   935	      "name": "valid_from",
   936	      "type": "date",
   937	      "required": false,
   938	      "description": "Fee valid from date"
   939	    },
   940	    {
   941	      "name": "valid_until",
   942	      "type": "date",
   943	      "required": false,
   944	      "description": "Fee valid until date"
   945	    },
   946	    {
   947	      "name": "active",
   948	      "type": "bool",
   949	      "required": false,
   950	      "description": "Is this fee active"
   951	    }
   952	  ],
   953	  "listRule": null,
   954	  "viewRule": null,
   955	  "createRule": "@request.auth.id != \"\"",
   956	  "updateRule": "@request.auth.id != \"\"",
   957	  "deleteRule": "@request.auth.id != \"\""
   958	}
   959	[2025-06-04T04:38:43.367Z] INFO:   ‚úÖ Updated: market_fees (12 changes)
   960	[2025-06-04T04:38:43.367Z] INFO: 
   961	üîÑ Updating collection: stallholders
   962	[2025-06-04T04:38:43.368Z] DEBUG: Found schema using original name: stallholders
   963	[2025-06-04T04:38:43.368Z] DEBUG: Updating collection stallholders with: {
   964	  "schema": [
   965	    {
   966	      "name": "user",
   967	      "type": "relation",
   968	      "required": true,
   969	      "options": {
   970	        "collectionId": "_pb_users_auth_",
   971	        "cascadeDelete": true,
   972	        "minSelect": null,
   973	        "maxSelect": 1,
   974	        "displayFields": [
   975	          "name",
   976	          "email"
   977	        ]
   978	      },
   979	      "description": "Associated user account"
   980	    },
   981	    {
   982	      "name": "business_name",
   983	      "type": "text",
   984	      "required": true,
   985	      "options": {
   986	        "min": 2,
   987	        "max": 100
   988	      },
   989	      "description": "Business name"
   990	    },
   991	    {
   992	      "name": "business_description",
   993	      "type": "text",
   994	      "required": false,
   995	      "options": {
   996	        "max": 1000
   997	      },
   998	      "description": "Business description"
   999	    },
  1000	    {
  1001	      "name": "abn",
  1002	      "type": "text",
  1003	      "required": false,
  1004	      "options": {
  1005	        "pattern": "^[0-9]{11}$"
  1006	      },
  1007	      "description": "Australian Business Number"
  1008	    },
  1009	    {
  1010	      "name": "product_categories",
  1011	      "type": "json",
  1012	      "required": false,
  1013	      "options": {
  1014	        "maxSize": 2000000
  1015	      },
  1016	      "description": "Product categories sold"
  1017	    },
  1018	    {
  1019	      "name": "contact_phone",
  1020	      "type": "text",
  1021	      "required": false,
  1022	      "options": {
  1023	        "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
  1024	      },
  1025	      "description": "Business contact phone"
  1026	    },
  1027	    {
  1028	      "name": "website",
  1029	      "type": "url",
  1030	      "required": false,
  1031	      "description": "Business website"
  1032	    },
  1033	    {
  1034	      "name": "social_media",
  1035	      "type": "json",
  1036	      "required": false,
  1037	      "options": {
  1038	        "maxSize": 2000000
  1039	      },
  1040	      "description": "Social media profiles"
  1041	    },
  1042	    {
  1043	      "name": "power_required",
  1044	      "type": "bool",
  1045	      "required": false,
  1046	      "description": "Requires power connection"
  1047	    },
  1048	    {
  1049	      "name": "space_requirements",
  1050	      "type": "text",
  1051	      "required": false,
  1052	      "options": {
  1053	        "max": 200
  1054	      },
  1055	      "description": "Space size requirements"
  1056	    },
  1057	    {
  1058	      "name": "rating",
  1059	      "type": "number",
  1060	      "required": false,
  1061	      "options": {
  1062	        "min": 0,
  1063	        "max": 5
  1064	      },
  1065	      "description": "Average rating"
  1066	    },
  1067	    {
  1068	      "name": "reviews_count",
  1069	      "type": "number",
  1070	      "required": false,
  1071	      "options": {
  1072	        "min": 0
  1073	      },
  1074	      "description": "Total reviews"
  1075	    },
  1076	    {
  1077	      "name": "is_verified",
  1078	      "type": "bool",
  1079	      "required": false,
  1080	      "description": "Verified stallholder status"
  1081	    },
  1082	    {
  1083	      "name": "subscription_tier",
  1084	      "type": "select",
  1085	      "required": false,
  1086	      "options": {
  1087	        "maxSelect": 1,
  1088	        "values": [
  1089	          "free",
  1090	          "basic",
  1091	          "premium"
  1092	        ]
  1093	      },
  1094	      "description": "Subscription level"
  1095	    }
  1096	  ],
  1097	  "listRule": null,
  1098	  "viewRule": null,
  1099	  "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
  1100	  "updateRule": "@request.auth.id = user.id",
  1101	  "deleteRule": "@request.auth.id = user.id"
  1102	}
  1103	[2025-06-04T04:38:43.417Z] INFO:   ‚úÖ Updated: stallholders (21 changes)
  1104	[2025-06-04T04:38:43.417Z] INFO: 
  1105	üîÑ Updating collection: applications
  1106	[2025-06-04T04:38:43.423Z] DEBUG: Found schema using original name: applications
  1107	[2025-06-04T04:38:43.423Z] DEBUG: Updating collection applications with: {
  1108	  "schema": [
  1109	    {
  1110	      "name": "stallholder",
  1111	      "type": "relation",
  1112	      "required": true,
  1113	      "options": {
  1114	        "collectionId": "9isenkwpz24w58h",
  1115	        "cascadeDelete": true,
  1116	        "minSelect": null,
  1117	        "maxSelect": 1,
  1118	        "displayFields": [
  1119	          "business_name"
  1120	        ]
  1121	      },
  1122	      "description": "Applying stallholder"
  1123	    },
  1124	    {
  1125	      "name": "market",
  1126	      "type": "relation",
  1127	      "required": true,
  1128	      "options": {
  1129	        "collectionId": "4f3nr3ssrl6oqc0",
  1130	        "cascadeDelete": true,
  1131	        "minSelect": null,
  1132	        "maxSelect": 1,
  1133	        "displayFields": [
  1134	          "name"
  1135	        ]
  1136	      },
  1137	      "description": "Target market"
  1138	    },
  1139	    {
  1140	      "name": "status",
  1141	      "type": "select",
  1142	      "required": true,
  1143	      "options": {
  1144	        "maxSelect": 1,
  1145	        "values": [
  1146	          "pending",
  1147	          "approved",
  1148	          "rejected",
  1149	          "waitlisted",
  1150	          "cancelled"
  1151	        ]
  1152	      },
  1153	      "description": "Application status"
  1154	    },
  1155	    {
  1156	      "name": "application_date",
  1157	      "type": "date",
  1158	      "required": true,
  1159	      "description": "Date of application"
  1160	    },
  1161	    {
  1162	      "name": "requested_dates",
  1163	      "type": "json",
  1164	      "required": false,
  1165	      "options": {
  1166	        "maxSize": 2000000
  1167	      },
  1168	      "description": "Specific dates requested"
  1169	    },
  1170	    {
  1171	      "name": "message",
  1172	      "type": "text",
  1173	      "required": false,
  1174	      "options": {
  1175	        "max": 1000
  1176	      },
  1177	      "description": "Stallholder message"
  1178	    },
  1179	    {
  1180	      "name": "organizer_notes",
  1181	      "type": "text",
  1182	      "required": false,
  1183	      "options": {
  1184	        "max": 1000
  1185	      },
  1186	      "description": "Internal organizer notes"
  1187	    },
  1188	    {
  1189	      "name": "payment_status",
  1190	      "type": "select",
  1191	      "required": false,
  1192	      "options": {
  1193	        "maxSelect": 1,
  1194	        "values": [
  1195	          "unpaid",
  1196	          "paid",
  1197	          "partial",
  1198	          "refunded"
  1199	        ]
  1200	      },
  1201	      "description": "Payment status"
  1202	    },
  1203	    {
  1204	      "name": "payment_amount",
  1205	      "type": "number",
  1206	      "required": false,
  1207	      "options": {
  1208	        "min": 0
  1209	      },
  1210	      "description": "Amount paid"
  1211	    },
  1212	    {
  1213	      "name": "stall_assignment",
  1214	      "type": "text",
  1215	      "required": false,
  1216	      "options": {
  1217	        "max": 50
  1218	      },
  1219	      "description": "Assigned stall location"
  1220	    }
  1221	  ],
  1222	  "listRule": null,
  1223	  "viewRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer",
  1224	  "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
  1225	  "updateRule": "@request.auth.id = market.organizer",
  1226	  "deleteRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer"
  1227	}
  1228	[2025-06-04T04:38:43.464Z] INFO:   ‚úÖ Updated: applications (16 changes)
  1229	[2025-06-04T04:38:43.464Z] INFO: 
  1230	üîÑ Updating collection: reviews
  1231	[2025-06-04T04:38:43.466Z] DEBUG: Found schema using original name: reviews
  1232	[2025-06-04T04:38:43.466Z] DEBUG: Updating collection reviews with: {
  1233	  "schema": [
  1234	    {
  1235	      "name": "reviewer",
  1236	      "type": "relation",
  1237	      "required": true,
  1238	      "options": {
  1239	        "collectionId": "_pb_users_auth_",
  1240	        "cascadeDelete": false,
  1241	        "minSelect": null,
  1242	        "maxSelect": 1,
  1243	        "displayFields": [
  1244	          "name"
  1245	        ]
  1246	      },
  1247	      "description": "User who wrote the review"
  1248	    },
  1249	    {
  1250	      "name": "target_type",
  1251	      "type": "select",
  1252	      "required": true,
  1253	      "options": {
  1254	        "maxSelect": 1,
  1255	        "values": [
  1256	          "market",
  1257	          "stallholder"
  1258	        ]
  1259	      },
  1260	      "description": "What is being reviewed"
  1261	    },
  1262	    {
  1263	      "name": "target_id",
  1264	      "type": "text",
  1265	      "required": true,
  1266	      "options": {
  1267	        "min": 15,
  1268	        "max": 15
  1269	      },
  1270	      "description": "ID of the reviewed item"
  1271	    },
  1272	    {
  1273	      "name": "rating",
  1274	      "type": "number",
  1275	      "required": true,
  1276	      "options": {
  1277	        "min": 1,
  1278	        "max": 5
  1279	      },
  1280	      "description": "Rating (1-5 stars)"
  1281	    },
  1282	    {
  1283	      "name": "title",
  1284	      "type": "text",
  1285	      "required": false,
  1286	      "options": {
  1287	        "max": 100
  1288	      },
  1289	      "description": "Review title"
  1290	    },
  1291	    {
  1292	      "name": "comment",
  1293	      "type": "text",
  1294	      "required": false,
  1295	      "options": {
  1296	        "max": 1000
  1297	      },
  1298	      "description": "Review comment"
  1299	    },
  1300	    {
  1301	      "name": "helpful_votes",
  1302	      "type": "number",
  1303	      "required": false,
  1304	      "options": {
  1305	        "min": 0
  1306	      },
  1307	      "description": "Number of helpful votes"
  1308	    },
  1309	    {
  1310	      "name": "verified_purchase",
  1311	      "type": "bool",
  1312	      "required": false,
  1313	      "description": "Verified attendance/purchase"
  1314	    }
  1315	  ],
  1316	  "listRule": null,
  1317	  "viewRule": null,
  1318	  "createRule": "@request.auth.id != \"\"",
  1319	  "updateRule": "@request.auth.id = reviewer.id",
  1320	  "deleteRule": "@request.auth.id = reviewer.id"
  1321	}
  1322	[2025-06-04T04:38:43.506Z] INFO:   ‚úÖ Updated: reviews (10 changes)
  1323	[2025-06-04T04:38:43.506Z] INFO: 
  1324	üìä SCHEMA APPLICATION RESULTS
  1325	[2025-06-04T04:38:43.506Z] INFO: =====================================
  1326	[2025-06-04T04:38:43.506Z] INFO: ‚úÖ Successful operations: 10
  1327	[2025-06-04T04:38:43.506Z] INFO: ‚ùå Failed operations: 0
  1328	[2025-06-04T04:38:43.506Z] INFO: üéâ Schema successfully applied!

========================================

üìÅ FILE: src/scripts/output.txt
   Size: 4.8K | Modified: 2025-06-04
----------------------------------------
     1	üîç Testing PocketBase connection...
     2	‚úÖ PocketBase is running
     3	üöÄ Applying schema changes to database...
     4	
     5	üîê Admin authentication required
     6	üîç Checking for stored credentials...
     7	üîë Using stored credentials...
     8	üîê Credentials saved securely
     9	üîê Credentials saved securely
    10	‚úÖ Authentication successful with stored credentials
    11	‚ÑπÔ∏è  Stored credentials expire in 7 days
    12	‚úÖ Loaded schema v2.0.0
    13	üìã Collections defined: 10
    14	üìã Collections:
    15	  - users (auth) - 4 fields
    16	  - market_categories (base) - 5 fields
    17	  - amenity_types (base) - 5 fields
    18	  - markets (base) - 27 fields
    19	  - market_amenities (base) - 4 fields
    20	  - market_schedules (base) - 8 fields
    21	  - market_fees (base) - 10 fields
    22	  - stallholders (base) - 14 fields
    23	  - applications (base) - 10 fields
    24	  - reviews (base) - 8 fields
    25	
    26	üìä SCHEMA COMPARISON RESULTS
    27	=====================================
    28	
    29	üÜï Collections to CREATE (3):
    30	  üìÅ market_amenities (base) - 4 fields
    31	  üìÅ market_schedules (base) - 8 fields
    32	  üìÅ market_fees (base) - 10 fields
    33	
    34	üîÑ Collections to UPDATE (7):
    35	  üìÅ users:
    36	    ‚ûï Add field: phone (text)
    37	    ‚ûï Add field: verified (bool)
    38	    ‚ûï Add field: subscription_tier (select)
    39	    ‚ûñ Remove field: name (text)
    40	    ‚ûñ Remove field: avatar (file)
    41	    üîß Modify field: role
    42	  üìÅ market_categories:
    43	    üîß Modify field: name
    44	    üîß Modify field: description
    45	    üîß Modify field: color
    46	    üîß Modify field: icon
    47	    üîß Modify field: sort_order
    48	    üîê Modify rule: listRule
    49	    üîê Modify rule: viewRule
    50	  üìÅ amenity_types:
    51	    üîß Modify field: name
    52	    üîß Modify field: description
    53	    üîß Modify field: icon
    54	    üîß Modify field: category
    55	    üîß Modify field: active
    56	    üîê Modify rule: listRule
    57	    üîê Modify rule: viewRule
    58	  üìÅ markets:
    59	    ‚ûï Add field: category (relation)
    60	    ‚ûï Add field: organizer (relation)
    61	    ‚ûï Add field: postcode (text)
    62	    ‚ûï Add field: latitude (number)
    63	    ‚ûï Add field: longitude (number)
    64	    ‚ûï Add field: venue_type (select)
    65	    ‚ûï Add field: contact_phone (text)
    66	    ‚ûï Add field: social_media (json)
    67	    ‚ûï Add field: max_stalls (number)
    68	    ‚ûï Add field: insurance_minimum (number)
    69	    ‚ûï Add field: abn_required (bool)
    70	    ‚ûï Add field: waiting_list_enabled (bool)
    71	    ‚ûï Add field: featured_image (file)
    72	    ‚ûï Add field: gallery_images (file)
    73	    ‚ûï Add field: view_count (number)
    74	    ‚ûï Add field: favorite_count (number)
    75	    ‚ûï Add field: average_rating (number)
    76	    ‚ûï Add field: total_reviews (number)
    77	    ‚ûñ Remove field: frequency (text)
    78	    ‚ûñ Remove field: operating_hours (text)
    79	    üîß Modify field: name
    80	    üîß Modify field: slug
    81	    üîß Modify field: description
    82	    üîß Modify field: address
    83	    üîß Modify field: suburb
    84	    üîß Modify field: state
    85	    üîß Modify field: contact_email
    86	    üîß Modify field: website
    87	    üîß Modify field: active
    88	    üîê Modify rule: createRule
    89	    üîê Modify rule: updateRule
    90	    üîê Modify rule: deleteRule
    91	  üìÅ stallholders:
    92	    ‚ûï Add field: user (relation)
    93	    ‚ûï Add field: business_description (text)
    94	    ‚ûï Add field: abn (text)
    95	    ‚ûï Add field: contact_phone (text)
    96	    ‚ûï Add field: social_media (json)
    97	    ‚ûï Add field: power_required (bool)
    98	    ‚ûï Add field: space_requirements (text)
    99	    ‚ûï Add field: rating (number)
   100	    ‚ûï Add field: reviews_count (number)
   101	    ‚ûï Add field: verified (bool)
   102	    ‚ûï Add field: subscription_tier (select)
   103	    ‚ûñ Remove field: description (editor)
   104	    ‚ûñ Remove field: active (bool)
   105	    üîß Modify field: business_name
   106	    üîß Modify field: product_categories
   107	    üîß Modify field: website
   108	    üîê Modify rule: listRule
   109	    üîê Modify rule: viewRule
   110	    üîê Modify rule: createRule
   111	    üîê Modify rule: updateRule
   112	    üîê Modify rule: deleteRule
   113	  üìÅ applications:
   114	    ‚ûï Add field: stallholder (relation)
   115	    ‚ûï Add field: market (relation)
   116	    ‚ûï Add field: application_date (date)
   117	    ‚ûï Add field: message (text)
   118	    ‚ûï Add field: payment_status (select)
   119	    ‚ûï Add field: payment_amount (number)
   120	    ‚ûï Add field: stall_assignment (text)
   121	    ‚ûñ Remove field: stallholder_notes (text)
   122	    üîß Modify field: status
   123	    üîß Modify field: requested_dates
   124	    üîß Modify field: organizer_notes
   125	    üîê Modify rule: listRule
   126	    üîê Modify rule: viewRule
   127	    üîê Modify rule: createRule
   128	    üîê Modify rule: updateRule
   129	    üîê Modify rule: deleteRule
   130	  üìÅ reviews:
   131	    ‚ûï Add field: title (text)
   132	    ‚ûï Add field: helpful_votes (number)
   133	    ‚ûñ Remove field: active (bool)
   134	    üîß Modify field: reviewer
   135	    üîß Modify field: target_type
   136	    üîß Modify field: target_id
   137	    üîß Modify field: rating
   138	    üîß Modify field: comment
   139	    üîß Modify field: verified_purchase
   140	
   141	=====================================
   142	üí° Run "node scripts/schema-manager.js apply" to apply these changes
   143	
   144	‚ö†Ô∏è  WARNING: This will modify your database structure!
   145	Continue? (yes/no): 

========================================

üìÅ FILE: src/scripts/save-schema.js
   Size: 27K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/save-schema.js - Save the provided schema to database.json
     2	import fs from 'fs/promises';
     3	import { existsSync } from 'fs';
     4	
     5	const schema = {
     6	  "version": "1.0.0",
     7	  "description": "SA Markets Directory Database Schema",
     8	  "collections": {
     9	    "users": {
    10	      "name": "users",
    11	      "type": "auth",
    12	      "system": true,
    13	      "description": "Built-in PocketBase users collection with custom fields",
    14	      "schema": [
    15	        {
    16	          "name": "role",
    17	          "type": "select",
    18	          "required": true,
    19	          "options": {
    20	            "maxSelect": 1,
    21	            "values": ["customer", "stallholder", "organizer"]
    22	          },
    23	          "description": "User role in the platform"
    24	        },
    25	        {
    26	          "name": "phone",
    27	          "type": "text",
    28	          "required": false,
    29	          "options": {
    30	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
    31	          },
    32	          "description": "Australian phone number"
    33	        },
    34	        {
    35	          "name": "verified",
    36	          "type": "bool",
    37	          "required": false,
    38	          "description": "Email verification status"
    39	        },
    40	        {
    41	          "name": "subscription_tier",
    42	          "type": "select",
    43	          "required": false,
    44	          "options": {
    45	            "maxSelect": 1,
    46	            "values": ["free", "basic", "premium", "enterprise"]
    47	          },
    48	          "description": "Subscription level"
    49	        }
    50	      ],
    51	      "listRule": "id = @request.auth.id",
    52	      "viewRule": "id = @request.auth.id",
    53	      "createRule": "",
    54	      "updateRule": "id = @request.auth.id",
    55	      "deleteRule": "id = @request.auth.id"
    56	    },
    57	
    58	    "market_categories": {
    59	      "name": "market_categories",
    60	      "type": "base",
    61	      "description": "Market categorization system",
    62	      "schema": [
    63	        {
    64	          "name": "name",
    65	          "type": "text",
    66	          "required": true,
    67	          "options": {
    68	            "min": 2,
    69	            "max": 50
    70	          },
    71	          "description": "Category name"
    72	        },
    73	        {
    74	          "name": "description",
    75	          "type": "text",
    76	          "required": false,
    77	          "options": {
    78	            "max": 200
    79	          },
    80	          "description": "Category description"
    81	        },
    82	        {
    83	          "name": "color",
    84	          "type": "text",
    85	          "required": false,
    86	          "options": {
    87	            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
    88	          },
    89	          "description": "Hex color code for UI"
    90	        },
    91	        {
    92	          "name": "icon",
    93	          "type": "text",
    94	          "required": false,
    95	          "options": {
    96	            "max": 50
    97	          },
    98	          "description": "Icon identifier"
    99	        },
   100	        {
   101	          "name": "sort_order",
   102	          "type": "number",
   103	          "required": false,
   104	          "options": {
   105	            "min": 0
   106	          },
   107	          "description": "Display order"
   108	        }
   109	      ],
   110	      "listRule": "",
   111	      "viewRule": "",
   112	      "createRule": "@request.auth.role = \"organizer\"",
   113	      "updateRule": "@request.auth.role = \"organizer\"",
   114	      "deleteRule": "@request.auth.role = \"organizer\""
   115	    },
   116	
   117	    "markets": {
   118	      "name": "markets",
   119	      "type": "base",
   120	      "description": "Market listings and information",
   121	      "schema": [
   122	        {
   123	          "name": "name",
   124	          "type": "text",
   125	          "required": true,
   126	          "options": {
   127	            "min": 2,
   128	            "max": 100
   129	          },
   130	          "description": "Market name"
   131	        },
   132	        {
   133	          "name": "slug",
   134	          "type": "text",
   135	          "required": true,
   136	          "options": {
   137	            "pattern": "^[a-z0-9-]+$",
   138	            "min": 2,
   139	            "max": 100
   140	          },
   141	          "description": "URL-friendly identifier"
   142	        },
   143	        {
   144	          "name": "description",
   145	          "type": "text",
   146	          "required": false,
   147	          "options": {
   148	            "max": 2000
   149	          },
   150	          "description": "Market description"
   151	        },
   152	        {
   153	          "name": "category",
   154	          "type": "relation",
   155	          "required": true,
   156	          "options": {
   157	            "collectionId": "market_categories",
   158	            "cascadeDelete": false,
   159	            "minSelect": null,
   160	            "maxSelect": 1,
   161	            "displayFields": ["name"]
   162	          },
   163	          "description": "Market category"
   164	        },
   165	        {
   166	          "name": "organizer",
   167	          "type": "relation",
   168	          "required": true,
   169	          "options": {
   170	            "collectionId": "users",
   171	            "cascadeDelete": false,
   172	            "minSelect": null,
   173	            "maxSelect": 1,
   174	            "displayFields": ["name", "email"]
   175	          },
   176	          "description": "Market organizer"
   177	        },
   178	        {
   179	          "name": "address",
   180	          "type": "text",
   181	          "required": true,
   182	          "options": {
   183	            "max": 200
   184	          },
   185	          "description": "Street address"
   186	        },
   187	        {
   188	          "name": "suburb",
   189	          "type": "text",
   190	          "required": true,
   191	          "options": {
   192	            "max": 50
   193	          },
   194	          "description": "Suburb/City"
   195	        },
   196	        {
   197	          "name": "state",
   198	          "type": "select",
   199	          "required": true,
   200	          "options": {
   201	            "maxSelect": 1,
   202	            "values": ["SA", "VIC", "NSW", "QLD", "WA", "TAS", "NT", "ACT"]
   203	          },
   204	          "description": "Australian state"
   205	        },
   206	        {
   207	          "name": "postcode",
   208	          "type": "text",
   209	          "required": true,
   210	          "options": {
   211	            "pattern": "^[0-9]{4}$"
   212	          },
   213	          "description": "Australian postcode"
   214	        },
   215	        {
   216	          "name": "latitude",
   217	          "type": "number",
   218	          "required": false,
   219	          "description": "GPS latitude"
   220	        },
   221	        {
   222	          "name": "longitude",
   223	          "type": "number",
   224	          "required": false,
   225	          "description": "GPS longitude"
   226	        },
   227	        {
   228	          "name": "venue_type",
   229	          "type": "select",
   230	          "required": false,
   231	          "options": {
   232	            "maxSelect": 1,
   233	            "values": ["outdoor", "indoor", "covered", "mixed"]
   234	          },
   235	          "description": "Venue type"
   236	        },
   237	        {
   238	          "name": "frequency_type",
   239	          "type": "select",
   240	          "required": false,
   241	          "options": {
   242	            "maxSelect": 1,
   243	            "values": ["regular", "weekly_pattern", "monthly_pattern", "custom_dates"]
   244	          },
   245	          "description": "How often market runs"
   246	        },
   247	        {
   248	          "name": "frequency_value",
   249	          "type": "text",
   250	          "required": false,
   251	          "options": {
   252	            "max": 100
   253	          },
   254	          "description": "Frequency description"
   255	        },
   256	        {
   257	          "name": "frequency_details",
   258	          "type": "json",
   259	          "required": false,
   260	          "description": "Complex frequency patterns"
   261	        },
   262	        {
   263	          "name": "start_time",
   264	          "type": "text",
   265	          "required": false,
   266	          "options": {
   267	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   268	          },
   269	          "description": "Market start time (HH:MM)"
   270	        },
   271	        {
   272	          "name": "end_time",
   273	          "type": "text",
   274	          "required": false,
   275	          "options": {
   276	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   277	          },
   278	          "description": "Market end time (HH:MM)"
   279	        },
   280	        {
   281	          "name": "setup_time",
   282	          "type": "text",
   283	          "required": false,
   284	          "options": {
   285	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   286	          },
   287	          "description": "Stallholder setup time"
   288	        },
   289	        {
   290	          "name": "packdown_time",
   291	          "type": "text",
   292	          "required": false,
   293	          "options": {
   294	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   295	          },
   296	          "description": "Stallholder packdown time"
   297	        },
   298	        {
   299	          "name": "start_date",
   300	          "type": "date",
   301	          "required": false,
   302	          "description": "Market series start date"
   303	        },
   304	        {
   305	          "name": "end_date",
   306	          "type": "date",
   307	          "required": false,
   308	          "description": "Market series end date"
   309	        },
   310	        {
   311	          "name": "contact_email",
   312	          "type": "email",
   313	          "required": true,
   314	          "description": "Market contact email"
   315	        },
   316	        {
   317	          "name": "contact_phone",
   318	          "type": "text",
   319	          "required": false,
   320	          "options": {
   321	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   322	          },
   323	          "description": "Market contact phone"
   324	        },
   325	        {
   326	          "name": "website",
   327	          "type": "url",
   328	          "required": false,
   329	          "description": "Market website"
   330	        },
   331	        {
   332	          "name": "social_media",
   333	          "type": "json",
   334	          "required": false,
   335	          "description": "Social media links"
   336	        },
   337	        {
   338	          "name": "toilets",
   339	          "type": "bool",
   340	          "required": false,
   341	          "description": "Toilets available"
   342	        },
   343	        {
   344	          "name": "parking",
   345	          "type": "bool",
   346	          "required": false,
   347	          "description": "Parking available"
   348	        },
   349	        {
   350	          "name": "food_court",
   351	          "type": "bool",
   352	          "required": false,
   353	          "description": "Food court available"
   354	        },
   355	        {
   356	          "name": "atm",
   357	          "type": "bool",
   358	          "required": false,
   359	          "description": "ATM available"
   360	        },
   361	        {
   362	          "name": "wheelchair_access",
   363	          "type": "bool",
   364	          "required": false,
   365	          "description": "Wheelchair accessible"
   366	        },
   367	        {
   368	          "name": "childrens_area",
   369	          "type": "bool",
   370	          "required": false,
   371	          "description": "Children's area available"
   372	        },
   373	        {
   374	          "name": "entertainment",
   375	          "type": "bool",
   376	          "required": false,
   377	          "description": "Entertainment provided"
   378	        },
   379	        {
   380	          "name": "seating",
   381	          "type": "bool",
   382	          "required": false,
   383	          "description": "Seating available"
   384	        },
   385	        {
   386	          "name": "weather_protection",
   387	          "type": "bool",
   388	          "required": false,
   389	          "description": "Covered/sheltered areas"
   390	        },
   391	        {
   392	          "name": "storage_available",
   393	          "type": "bool",
   394	          "required": false,
   395	          "description": "Storage for stallholders"
   396	        },
   397	        {
   398	          "name": "loading_dock",
   399	          "type": "bool",
   400	          "required": false,
   401	          "description": "Loading dock access"
   402	        },
   403	        {
   404	          "name": "security",
   405	          "type": "bool",
   406	          "required": false,
   407	          "description": "Security provided"
   408	        },
   409	        {
   410	          "name": "wifi",
   411	          "type": "bool",
   412	          "required": false,
   413	          "description": "WiFi available"
   414	        },
   415	        {
   416	          "name": "pet_friendly",
   417	          "type": "bool",
   418	          "required": false,
   419	          "description": "Pets allowed"
   420	        },
   421	        {
   422	          "name": "fee_structure",
   423	          "type": "json",
   424	          "required": false,
   425	          "description": "Complete fee structure with tiers"
   426	        },
   427	        {
   428	          "name": "base_stall_fee",
   429	          "type": "number",
   430	          "required": false,
   431	          "options": {
   432	            "min": 0
   433	          },
   434	          "description": "Basic stall fee per day"
   435	        },
   436	        {
   437	          "name": "application_fee",
   438	          "type": "number",
   439	          "required": false,
   440	          "options": {
   441	            "min": 0
   442	          },
   443	          "description": "Application processing fee"
   444	        },
   445	        {
   446	          "name": "bond_required",
   447	          "type": "bool",
   448	          "required": false,
   449	          "description": "Security bond required"
   450	        },
   451	        {
   452	          "name": "bond_amount",
   453	          "type": "number",
   454	          "required": false,
   455	          "options": {
   456	            "min": 0
   457	          },
   458	          "description": "Security bond amount"
   459	        },
   460	        {
   461	          "name": "insurance_required",
   462	          "type": "bool",
   463	          "required": false,
   464	          "description": "Public liability insurance required"
   465	        },
   466	        {
   467	          "name": "insurance_minimum",
   468	          "type": "number",
   469	          "required": false,
   470	          "options": {
   471	            "min": 0
   472	          },
   473	          "description": "Minimum insurance coverage"
   474	        },
   475	        {
   476	          "name": "abn_required",
   477	          "type": "bool",
   478	          "required": false,
   479	          "description": "ABN required for stallholders"
   480	        },
   481	        {
   482	          "name": "power_available",
   483	          "type": "bool",
   484	          "required": false,
   485	          "description": "Power available for stalls"
   486	        },
   487	        {
   488	          "name": "power_cost",
   489	          "type": "number",
   490	          "required": false,
   491	          "options": {
   492	            "min": 0
   493	          },
   494	          "description": "Cost of power per stall"
   495	        },
   496	        {
   497	          "name": "max_stalls",
   498	          "type": "number",
   499	          "required": false,
   500	          "options": {
   501	            "min": 1
   502	          },
   503	          "description": "Maximum number of stalls"
   504	        },
   505	        {
   506	          "name": "stall_sizes",
   507	          "type": "json",
   508	          "required": false,
   509	          "description": "Available stall sizes and counts"
   510	        },
   511	        {
   512	          "name": "waiting_list_enabled",
   513	          "type": "bool",
   514	          "required": false,
   515	          "description": "Enable waiting list when full"
   516	        },
   517	        {
   518	          "name": "featured_image",
   519	          "type": "file",
   520	          "required": false,
   521	          "options": {
   522	            "maxSelect": 1,
   523	            "maxSize": 5242880,
   524	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   525	          },
   526	          "description": "Main market image"
   527	        },
   528	        {
   529	          "name": "gallery_images",
   530	          "type": "file",
   531	          "required": false,
   532	          "options": {
   533	            "maxSelect": 10,
   534	            "maxSize": 5242880,
   535	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   536	          },
   537	          "description": "Market gallery images"
   538	        },
   539	        {
   540	          "name": "active",
   541	          "type": "bool",
   542	          "required": false,
   543	          "description": "Market is active/published"
   544	        },
   545	        {
   546	          "name": "view_count",
   547	          "type": "number",
   548	          "required": false,
   549	          "options": {
   550	            "min": 0
   551	          },
   552	          "description": "Profile view count"
   553	        },
   554	        {
   555	          "name": "favorite_count",
   556	          "type": "number",
   557	          "required": false,
   558	          "options": {
   559	            "min": 0
   560	          },
   561	          "description": "Times favorited by users"
   562	        },
   563	        {
   564	          "name": "average_rating",
   565	          "type": "number",
   566	          "required": false,
   567	          "options": {
   568	            "min": 0,
   569	            "max": 5
   570	          },
   571	          "description": "Average user rating"
   572	        },
   573	        {
   574	          "name": "total_reviews",
   575	          "type": "number",
   576	          "required": false,
   577	          "options": {
   578	            "min": 0
   579	          },
   580	          "description": "Total number of reviews"
   581	        }
   582	      ],
   583	      "listRule": "",
   584	      "viewRule": "",
   585	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"organizer\"",
   586	      "updateRule": "@request.auth.id = organizer.id",
   587	      "deleteRule": "@request.auth.id = organizer.id"
   588	    },
   589	
   590	    "stallholders": {
   591	      "name": "stallholders",
   592	      "type": "base",
   593	      "description": "Stallholder business profiles",
   594	      "schema": [
   595	        {
   596	          "name": "user",
   597	          "type": "relation",
   598	          "required": true,
   599	          "options": {
   600	            "collectionId": "users",
   601	            "cascadeDelete": true,
   602	            "minSelect": null,
   603	            "maxSelect": 1,
   604	            "displayFields": ["name", "email"]
   605	          },
   606	          "description": "Associated user account"
   607	        },
   608	        {
   609	          "name": "business_name",
   610	          "type": "text",
   611	          "required": true,
   612	          "options": {
   613	            "min": 2,
   614	            "max": 100
   615	          },
   616	          "description": "Business name"
   617	        },
   618	        {
   619	          "name": "abn",
   620	          "type": "text",
   621	          "required": false,
   622	          "options": {
   623	            "pattern": "^[0-9]{11}$"
   624	          },
   625	          "description": "Australian Business Number"
   626	        },
   627	        {
   628	          "name": "business_description",
   629	          "type": "text",
   630	          "required": false,
   631	          "options": {
   632	            "max": 1000
   633	          },
   634	          "description": "Business description"
   635	        },
   636	        {
   637	          "name": "product_categories",
   638	          "type": "json",
   639	          "required": false,
   640	          "description": "Product categories sold"
   641	        },
   642	        {
   643	          "name": "contact_phone",
   644	          "type": "text",
   645	          "required": false,
   646	          "options": {
   647	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   648	          },
   649	          "description": "Business contact phone"
   650	        },
   651	        {
   652	          "name": "website",
   653	          "type": "url",
   654	          "required": false,
   655	          "description": "Business website"
   656	        },
   657	        {
   658	          "name": "social_media",
   659	          "type": "json",
   660	          "required": false,
   661	          "description": "Social media profiles"
   662	        },
   663	        {
   664	          "name": "insurance_details",
   665	          "type": "json",
   666	          "required": false,
   667	          "description": "Insurance policy details"
   668	        },
   669	        {
   670	          "name": "certifications",
   671	          "type": "json",
   672	          "required": false,
   673	          "description": "Business certifications"
   674	        },
   675	        {
   676	          "name": "setup_requirements",
   677	          "type": "text",
   678	          "required": false,
   679	          "options": {
   680	            "max": 500
   681	          },
   682	          "description": "Special setup requirements"
   683	        },
   684	        {
   685	          "name": "power_required",
   686	          "type": "bool",
   687	          "required": false,
   688	          "description": "Requires power connection"
   689	        },
   690	        {
   691	          "name": "space_requirements",
   692	          "type": "text",
   693	          "required": false,
   694	          "options": {
   695	            "max": 200
   696	          },
   697	          "description": "Space size requirements"
   698	        },
   699	        {
   700	          "name": "portfolio_images",
   701	          "type": "file",
   702	          "required": false,
   703	          "options": {
   704	            "maxSelect": 20,
   705	            "maxSize": 5242880,
   706	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   707	          },
   708	          "description": "Product/business images"
   709	        },
   710	        {
   711	          "name": "rating",
   712	          "type": "number",
   713	          "required": false,
   714	          "options": {
   715	            "min": 0,
   716	            "max": 5
   717	          },
   718	          "description": "Average rating"
   719	        },
   720	        {
   721	          "name": "reviews_count",
   722	          "type": "number",
   723	          "required": false,
   724	          "options": {
   725	            "min": 0
   726	          },
   727	          "description": "Total reviews"
   728	        },
   729	        {
   730	          "name": "verified",
   731	          "type": "bool",
   732	          "required": false,
   733	          "description": "Verified stallholder status"
   734	        },
   735	        {
   736	          "name": "subscription_tier",
   737	          "type": "select",
   738	          "required": false,
   739	          "options": {
   740	            "maxSelect": 1,
   741	            "values": ["free", "basic", "premium"]
   742	          },
   743	          "description": "Subscription level"
   744	        }
   745	      ],
   746	      "listRule": "",
   747	      "viewRule": "",
   748	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   749	      "updateRule": "@request.auth.id = user.id",
   750	      "deleteRule": "@request.auth.id = user.id"
   751	    },
   752	
   753	    "applications": {
   754	      "name": "applications",
   755	      "type": "base",
   756	      "description": "Market applications from stallholders",
   757	      "schema": [
   758	        {
   759	          "name": "stallholder",
   760	          "type": "relation",
   761	          "required": true,
   762	          "options": {
   763	            "collectionId": "stallholders",
   764	            "cascadeDelete": true,
   765	            "minSelect": null,
   766	            "maxSelect": 1,
   767	            "displayFields": ["business_name"]
   768	          },
   769	          "description": "Applying stallholder"
   770	        },
   771	        {
   772	          "name": "market",
   773	          "type": "relation",
   774	          "required": true,
   775	          "options": {
   776	            "collectionId": "markets",
   777	            "cascadeDelete": true,
   778	            "minSelect": null,
   779	            "maxSelect": 1,
   780	            "displayFields": ["name"]
   781	          },
   782	          "description": "Target market"
   783	        },
   784	        {
   785	          "name": "status",
   786	          "type": "select",
   787	          "required": true,
   788	          "options": {
   789	            "maxSelect": 1,
   790	            "values": ["pending", "approved", "rejected", "waitlisted", "cancelled"]
   791	          },
   792	          "description": "Application status"
   793	        },
   794	        {
   795	          "name": "application_date",
   796	          "type": "date",
   797	          "required": true,
   798	          "description": "Date of application"
   799	        },
   800	        {
   801	          "name": "requested_dates",
   802	          "type": "json",
   803	          "required": false,
   804	          "description": "Specific dates requested"
   805	        },
   806	        {
   807	          "name": "message",
   808	          "type": "text",
   809	          "required": false,
   810	          "options": {
   811	            "max": 1000
   812	          },
   813	          "description": "Stallholder message"
   814	        },
   815	        {
   816	          "name": "organizer_notes",
   817	          "type": "text",
   818	          "required": false,
   819	          "options": {
   820	            "max": 1000
   821	          },
   822	          "description": "Internal organizer notes"
   823	        },
   824	        {
   825	          "name": "fee_structure_snapshot",
   826	          "type": "json",
   827	          "required": false,
   828	          "description": "Fee structure at time of application"
   829	        },
   830	        {
   831	          "name": "payment_status",
   832	          "type": "select",
   833	          "required": false,
   834	          "options": {
   835	            "maxSelect": 1,
   836	            "values": ["unpaid", "paid", "partial", "refunded"]
   837	          },
   838	          "description": "Payment status"
   839	        },
   840	        {
   841	          "name": "payment_amount",
   842	          "type": "number",
   843	          "required": false,
   844	          "options": {
   845	            "min": 0
   846	          },
   847	          "description": "Amount paid"
   848	        },
   849	        {
   850	          "name": "stall_assignment",
   851	          "type": "text",
   852	          "required": false,
   853	          "options": {
   854	            "max": 50
   855	          },
   856	          "description": "Assigned stall location"
   857	        }
   858	      ],
   859	      "listRule": "",
   860	      "viewRule": "@request.auth.id = stallholder.user.id || @request.auth.id = market.organizer.id",
   861	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   862	      "updateRule": "@request.auth.id = market.organizer.id",
   863	      "deleteRule": "@request.auth.id = stallholder.user.id || @request.auth.id = market.organizer.id"
   864	    },
   865	
   866	    "reviews": {
   867	      "name": "reviews",
   868	      "type": "base",
   869	      "description": "User reviews for markets and stallholders",
   870	      "schema": [
   871	        {
   872	          "name": "reviewer",
   873	          "type": "relation",
   874	          "required": true,
   875	          "options": {
   876	            "collectionId": "users",
   877	            "cascadeDelete": false,
   878	            "minSelect": null,
   879	            "maxSelect": 1,
   880	            "displayFields": ["name"]
   881	          },
   882	          "description": "User who wrote the review"
   883	        },
   884	        {
   885	          "name": "target_type",
   886	          "type": "select",
   887	          "required": true,
   888	          "options": {
   889	            "maxSelect": 1,
   890	            "values": ["market", "stallholder"]
   891	          },
   892	          "description": "What is being reviewed"
   893	        },
   894	        {
   895	          "name": "target_id",
   896	          "type": "text",
   897	          "required": true,
   898	          "options": {
   899	            "min": 15,
   900	            "max": 15
   901	          },
   902	          "description": "ID of the reviewed item"
   903	        },
   904	        {
   905	          "name": "rating",
   906	          "type": "number",
   907	          "required": true,
   908	          "options": {
   909	            "min": 1,
   910	            "max": 5
   911	          },
   912	          "description": "Rating (1-5 stars)"
   913	        },
   914	        {
   915	          "name": "title",
   916	          "type": "text",
   917	          "required": false,
   918	          "options": {
   919	            "max": 100
   920	          },
   921	          "description": "Review title"
   922	        },
   923	        {
   924	          "name": "comment",
   925	          "type": "text",
   926	          "required": false,
   927	          "options": {
   928	            "max": 1000
   929	          },
   930	          "description": "Review comment"
   931	        },
   932	        {
   933	          "name": "helpful_votes",
   934	          "type": "number",
   935	          "required": false,
   936	          "options": {
   937	            "min": 0
   938	          },
   939	          "description": "Number of helpful votes"
   940	        },
   941	        {
   942	          "name": "verified_purchase",
   943	          "type": "bool",
   944	          "required": false,
   945	          "description": "Verified attendance/purchase"
   946	        }
   947	      ],
   948	      "listRule": "",
   949	      "viewRule": "",
   950	      "createRule": "@request.auth.id != \"\"",
   951	      "updateRule": "@request.auth.id = reviewer.id",
   952	      "deleteRule": "@request.auth.id = reviewer.id"
   953	    }
   954	  }
   955	};
   956	
   957	async function saveSchema() {
   958	  try {
   959	    console.log('üíæ Saving SA Markets Directory schema...');
   960	    
   961	    // Ensure schema directory exists
   962	    if (!existsSync('./schema')) {
   963	      await fs.mkdir('./schema', { recursive: true });
   964	      console.log('üìÅ Created schema directory');
   965	    }
   966	
   967	    // Save the schema
   968	    const schemaPath = './schema/database.json';
   969	    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));
   970	    
   971	    console.log(`‚úÖ Schema saved to: ${schemaPath}`);
   972	    console.log(`üìã Collections: ${Object.keys(schema.collections).length}`);
   973	    console.log('');
   974	    console.log('Collections created:');
   975	    Object.keys(schema.collections).forEach(name => {
   976	      const collection = schema.collections[name];
   977	      console.log(`  - ${name} (${collection.type}) - ${collection.schema?.length || 0} fields`);
   978	    });
   979	    
   980	    console.log('');
   981	    console.log('üìù Next steps:');
   982	    console.log('1. Make sure PocketBase is running: ./pocketbase serve');
   983	    console.log('2. Create admin account: http://localhost:8090/_/');
   984	    console.log('3. Apply schema: node scripts/schema-manager.js apply');
   985	    console.log('4. Seed data: node scripts/schema-manager.js seed');
   986	    
   987	  } catch (error) {
   988	    console.error('‚ùå Error saving schema:', error.message);
   989	    process.exit(1);
   990	  }
   991	}
   992	
   993	saveSchema();

========================================

üìÅ FILE: src/scripts/schema-manager.js
   Size: 39K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/schema-manager.js - Enhanced with Collection ID Resolution (FIXED)
     2	import PocketBase from 'pocketbase';
     3	import fs from 'fs/promises';
     4	import { existsSync } from 'fs';
     5	import path from 'path';
     6	import { AuthManager, PasswordInput } from './auth-manager.js';
     7	
     8	const pb = new PocketBase(process.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     9	
    10	class SchemaManager {
    11	  constructor() {
    12	    this.authenticated = false;
    13	    this.authManager = new AuthManager();
    14	    this.schemaPath = './schema/database.json';
    15	    this.backupPath = './schema/backups';
    16	    this.schema = null;
    17	    this.resolvedSchema = null; // ADD: Store resolved schema separately
    18	    this.debug = process.env.DEBUG === 'true' || process.argv.includes('--debug');
    19	    this.collectionIdMap = {}; // Collection ID mapping
    20	  }
    21	
    22	  log(message, level = 'info') {
    23	    const timestamp = new Date().toISOString();
    24	    const logMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    25	    
    26	    // Add to buffer for file output (with safety check)
    27	    if (!this.logBuffer) {
    28	      this.logBuffer = [];
    29	    }
    30	    this.logBuffer.push(logMessage);
    31	    
    32	    // Console output based on debug mode
    33	    if (this.debug || level === 'error') {
    34	      console.log(logMessage);
    35	    }
    36	  }
    37	
    38	  // Add method to log console output to buffer as well
    39	  logToFile(message, level = 'info') {
    40	    const timestamp = new Date().toISOString();
    41	    const logMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    42	    
    43	    // Add to buffer (with safety check)
    44	    if (!this.logBuffer) {
    45	      this.logBuffer = [];
    46	    }
    47	    this.logBuffer.push(logMessage);
    48	    
    49	    // Also output to console
    50	    console.log(message);
    51	  }
    52	
    53	  async writeLogFile() {
    54	    try {
    55	      // Safety check for logBuffer
    56	      if (!this.logBuffer) {
    57	        this.logBuffer = ['No log entries recorded'];
    58	      }
    59	
    60	      // Safety check for startTime
    61	      if (!this.startTime) {
    62	        this.startTime = new Date();
    63	      }
    64	
    65	      // Safety check for outputFile
    66	      const outputFile = this.outputFile || './output.log';
    67	
    68	      const header = [
    69	        '='.repeat(80),
    70	        `SA Markets Directory - Schema Manager Log`,
    71	        `Started: ${this.startTime.toISOString()}`,
    72	        `Completed: ${new Date().toISOString()}`,
    73	        `Duration: ${((Date.now() - this.startTime.getTime()) / 1000).toFixed(2)}s`,
    74	        `Command: ${process.argv.slice(2).join(' ')}`,
    75	        `PocketBase URL: ${pb.baseUrl}`,
    76	        '='.repeat(80),
    77	        ''
    78	      ];
    79	
    80	      const content = header.concat(this.logBuffer).join('\n');
    81	      await fs.writeFile(outputFile, content);
    82	      console.log(`üìù Full log written to: ${outputFile}`);
    83	    } catch (error) {
    84	      console.error('‚ùå Failed to write log file:', error.message);
    85	    }
    86	  }
    87	
    88	  async buildCollectionIdMap() {
    89	    try {
    90	      this.log('Building collection ID mapping...', 'debug');
    91	      
    92	      const collections = await pb.collections.getFullList();
    93	      this.collectionIdMap = {};
    94	
    95	      collections.forEach(collection => {
    96	        // Map both name and NAME_ID format
    97	        this.collectionIdMap[collection.name] = collection.id;
    98	        this.collectionIdMap[collection.name.toUpperCase() + '_ID'] = collection.id;
    99	        
   100	        // Special handling for auth collection
   101	        if (collection.type === 'auth') {
   102	          this.collectionIdMap['_pb_users_auth_'] = collection.id;
   103	          this.collectionIdMap['USERS_ID'] = collection.id;
   104	          this.collectionIdMap['users'] = collection.id;
   105	        }
   106	      });
   107	
   108	      this.log(`Collection ID mapping built: ${Object.keys(this.collectionIdMap).length} mappings`, 'debug');
   109	      this.logToFile('üìã Collection ID Mapping:');
   110	      Object.entries(this.collectionIdMap).forEach(([key, id]) => {
   111	        this.log(`  ${key}: ${id}`, 'debug');
   112	      });
   113	      
   114	      return this.collectionIdMap;
   115	    } catch (error) {
   116	      this.logToFile(`‚ùå Error building collection ID map: ${error.message}`, 'error');
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  // FIXED: Method to replace collection ID placeholders in schema
   122	  resolveCollectionIds(schema) {
   123	    this.log('Resolving collection ID placeholders...', 'debug');
   124	    
   125	    // Deep clone the schema to avoid mutating the original
   126	    const resolvedSchema = JSON.parse(JSON.stringify(schema));
   127	
   128	    // Only resolve IDs within field definitions, NOT in collection names
   129	    Object.keys(resolvedSchema.collections).forEach(collectionName => {
   130	      const collection = resolvedSchema.collections[collectionName];
   131	      
   132	      if (collection.schema) {
   133	        collection.schema.forEach(field => {
   134	          if (field.type === 'relation' && field.options && field.options.collectionId) {
   135	            const originalId = field.options.collectionId;
   136	            
   137	            // Check if this is a placeholder that needs resolution
   138	            if (this.collectionIdMap[originalId]) {
   139	              field.options.collectionId = this.collectionIdMap[originalId];
   140	              this.log(`Resolved relation field ${field.name}: ${originalId} -> ${field.options.collectionId}`, 'debug');
   141	            }
   142	          }
   143	        });
   144	      }
   145	    });
   146	
   147	    this.log('Collection IDs resolved successfully', 'debug');
   148	    return resolvedSchema;
   149	  }
   150	
   151	  async loadSchema() {
   152	    try {
   153	      if (!existsSync(this.schemaPath)) {
   154	        this.logToFile('üìÑ Schema file not found, creating default schema...');
   155	        await this.createDefaultSchema();
   156	      }
   157	
   158	      const schemaContent = await fs.readFile(this.schemaPath, 'utf8');
   159	      this.schema = JSON.parse(schemaContent);
   160	
   161	      this.log(`Schema loaded from ${this.schemaPath}`, 'debug');
   162	
   163	      this.logToFile(`‚úÖ Loaded schema v${this.schema.version}`);
   164	      this.logToFile(`üìã Collections defined: ${Object.keys(this.schema.collections).length}`);
   165	
   166	      if (Object.keys(this.schema.collections).length === 0) {
   167	        this.logToFile('‚ö†Ô∏è  Warning: No collections defined in schema file');
   168	        this.logToFile('üí° Tip: Run "node scripts/schema-manager.js generate" to create from existing DB');
   169	      } else {
   170	        this.logToFile('üìã Collections:');
   171	        Object.keys(this.schema.collections).forEach(name => {
   172	          const collection = this.schema.collections[name];
   173	          this.logToFile(`  - ${name} (${collection.type}) - ${collection.schema?.length || 0} fields`);
   174	        });
   175	      }
   176	
   177	      return this.schema;
   178	    } catch (error) {
   179	      this.logToFile(`‚ùå Error loading schema: ${error.message}`, 'error');
   180	      throw error;
   181	    }
   182	  }
   183	
   184	  async createDefaultSchema() {
   185	    const defaultSchema = {
   186	      version: "1.0.0",
   187	      description: "SA Markets Directory - Database Schema",
   188	      created: new Date().toISOString(),
   189	      collections: {}
   190	    };
   191	
   192	    if (!existsSync('./schema')) {
   193	      await fs.mkdir('./schema', { recursive: true });
   194	    }
   195	
   196	    await fs.writeFile(this.schemaPath, JSON.stringify(defaultSchema, null, 2));
   197	    console.log('‚úÖ Created default schema file');
   198	  }
   199	
   200	  async authenticateAdmin() {
   201	    if (this.authenticated) return true;
   202	
   203	    this.logToFile('\nüîê Admin authentication required');
   204	    this.log(`PocketBase URL: ${pb.baseUrl}`, 'debug');
   205	
   206	    try {
   207	      // First, try environment variables
   208	      const adminEmail = process.env.POCKETBASE_ADMIN_EMAIL;
   209	      const adminPassword = process.env.POCKETBASE_ADMIN_PASSWORD;
   210	
   211	      if (adminEmail && adminPassword) {
   212	        this.logToFile('üîë Using admin credentials from environment variables...');
   213	        this.log(`Authenticating with env vars for: ${adminEmail}`, 'debug');
   214	
   215	        try {
   216	          const authData = await this.authenticateWithCredentials(adminEmail, adminPassword);
   217	          await this.authManager.saveCredentials(adminEmail, adminPassword, authData.token);
   218	          this.authenticated = true;
   219	          this.logToFile('üîê Credentials saved securely');
   220	          this.logToFile('‚úÖ Authentication successful with stored credentials');
   221	          return true;
   222	        } catch (envError) {
   223	          this.logToFile(`‚ùå Environment credentials failed: ${envError.message}`);
   224	          this.log(`Env auth error: ${JSON.stringify(envError)}`, 'debug');
   225	        }
   226	      }
   227	
   228	      // Second, try stored credentials
   229	      this.logToFile('üîç Checking for stored credentials...');
   230	      const storedCreds = await this.authManager.loadCredentials();
   231	
   232	      if (storedCreds) {
   233	        try {
   234	          this.logToFile('üîë Using stored credentials...');
   235	          this.log(`Stored creds for: ${storedCreds.email}`, 'debug');
   236	
   237	          const authData = await this.authenticateWithCredentials(storedCreds.email, storedCreds.password);
   238	          await this.authManager.saveCredentials(storedCreds.email, storedCreds.password, authData.token);
   239	
   240	          this.authenticated = true;
   241	          this.logToFile('üîê Credentials saved securely');
   242	          this.logToFile('‚úÖ Authentication successful with stored credentials');
   243	
   244	          const daysUntilExpiry = Math.ceil((storedCreds.expiresAt - Date.now()) / (24 * 60 * 60 * 1000));
   245	          this.logToFile(`‚ÑπÔ∏è  Stored credentials expire in ${daysUntilExpiry} days`);
   246	
   247	          return true;
   248	        } catch (storedError) {
   249	          this.logToFile('‚ö†Ô∏è  Stored credentials are invalid, requesting new ones...');
   250	          this.log(`Stored auth error: ${JSON.stringify(storedError)}`, 'debug');
   251	          await this.authManager.clearCredentials();
   252	        }
   253	      }
   254	
   255	      // Third, prompt for credentials
   256	      console.log('\nüìù Please enter your PocketBase admin credentials:');
   257	      console.log('üí° Tip: Set POCKETBASE_ADMIN_EMAIL and POCKETBASE_ADMIN_PASSWORD env vars to skip this');
   258	      console.log('üí° Credentials will be stored securely for 7 days\n');
   259	
   260	      const email = await PasswordInput.getInput('Admin email: ');
   261	      if (!email) {
   262	        throw new Error('Email is required');
   263	      }
   264	
   265	      const password = await PasswordInput.getPassword('Admin password: ');
   266	      if (!password) {
   267	        throw new Error('Password is required');
   268	      }
   269	
   270	      this.logToFile('üîë Authenticating...');
   271	
   272	      try {
   273	        const authData = await this.authenticateWithCredentials(email, password);
   274	        await this.authManager.saveCredentials(email, password, authData.token);
   275	
   276	        this.authenticated = true;
   277	        this.logToFile('‚úÖ Admin authentication successful');
   278	        this.logToFile('üíæ Credentials saved securely for future use');
   279	
   280	        return true;
   281	      } catch (authError) {
   282	        this.log(`Auth error details: ${JSON.stringify(authError)}`, 'debug');
   283	        throw authError;
   284	      }
   285	
   286	    } catch (error) {
   287	      this.logToFile(`‚ùå Admin authentication failed: ${error.message}`, 'error');
   288	      this.log(`Full error: ${JSON.stringify(error)}`, 'error');
   289	
   290	      if (error.message.includes('not found') || error.status === 404) {
   291	        this.logToFile('\nüö® "Resource not found" usually means:');
   292	        this.logToFile('   1. No admin account exists in PocketBase yet');
   293	        this.logToFile('   2. Visit http://localhost:8090/_/ to create the first admin');
   294	        this.logToFile('   3. Or PocketBase version mismatch');
   295	        this.logToFile('\nüîß Quick setup:');
   296	        this.logToFile('   1. Stop this script (Ctrl+C)');
   297	        this.logToFile('   2. Open http://localhost:8090/_/ in your browser');
   298	        this.logToFile('   3. Create an admin account');
   299	        this.logToFile('   4. Run this script again');
   300	      }
   301	
   302	      await this.authManager.clearCredentials();
   303	      return false;
   304	    }
   305	  }
   306	
   307	  async authenticateWithCredentials(email, password) {
   308	    try {
   309	      this.log(`Attempting authentication for: ${email}`, 'debug');
   310	      const authData = await pb.admins.authWithPassword(email, password);
   311	      this.log(`Auth successful, token length: ${authData.token?.length}`, 'debug');
   312	      return authData;
   313	    } catch (error) {
   314	      this.log(`Authentication error: ${JSON.stringify(error)}`, 'debug');
   315	
   316	      if (error.status === 404) {
   317	        try {
   318	          this.log('Trying alternative authentication method...', 'debug');
   319	
   320	          const response = await fetch(`${pb.baseUrl}/api/admins/auth-with-password`, {
   321	            method: 'POST',
   322	            headers: { 'Content-Type': 'application/json' },
   323	            body: JSON.stringify({ identity: email, password })
   324	          });
   325	
   326	          if (!response.ok) {
   327	            const errorData = await response.json();
   328	            throw new Error(`Authentication failed: ${errorData.message || response.statusText}`);
   329	          }
   330	
   331	          const authData = await response.json();
   332	          pb.authStore.save(authData.token, authData.admin);
   333	          return authData;
   334	        } catch (altError) {
   335	          this.log(`Alternative auth failed: ${JSON.stringify(altError)}`, 'debug');
   336	          throw error;
   337	        }
   338	      }
   339	
   340	      throw error;
   341	    }
   342	  }
   343	
   344	  async validateConnection() {
   345	    try {
   346	      this.logToFile('üîç Testing PocketBase connection...');
   347	      this.log(`Testing connection to: ${pb.baseUrl}`, 'debug');
   348	
   349	      const response = await fetch(`${pb.baseUrl}/api/health`);
   350	      this.log(`Health check response: ${response.status}`, 'debug');
   351	
   352	      if (response.ok) {
   353	        this.logToFile('‚úÖ PocketBase is running');
   354	        return true;
   355	      } else {
   356	        this.logToFile('‚ùå PocketBase health check failed');
   357	        return false;
   358	      }
   359	    } catch (error) {
   360	      this.logToFile(`‚ùå Cannot connect to PocketBase: ${error.message}`);
   361	      return false;
   362	    }
   363	  }
   364	
   365	  async getCurrentSchema() {
   366	    try {
   367	      if (!await this.authenticateAdmin()) {
   368	        throw new Error('Admin authentication required');
   369	      }
   370	
   371	      this.log('Fetching collections from PocketBase...', 'debug');
   372	      const collections = await pb.collections.getFullList();
   373	      this.log(`Found ${collections.length} collections`, 'debug');
   374	
   375	      const currentSchema = {
   376	        timestamp: new Date().toISOString(),
   377	        collections: {}
   378	      };
   379	
   380	      for (const collection of collections) {
   381	        this.log(`Processing collection: ${collection.name}`, 'debug');
   382	        currentSchema.collections[collection.name] = {
   383	          name: collection.name,
   384	          type: collection.type,
   385	          schema: collection.schema,
   386	          listRule: collection.listRule,
   387	          viewRule: collection.viewRule,
   388	          createRule: collection.createRule,
   389	          updateRule: collection.updateRule,
   390	          deleteRule: collection.deleteRule
   391	        };
   392	      }
   393	
   394	      return currentSchema;
   395	    } catch (error) {
   396	      console.error('‚ùå Error getting current schema:', error.message);
   397	      throw error;
   398	    }
   399	  }
   400	
   401	  async compareSchemas() {
   402	    try {
   403	      await this.loadSchema();
   404	      
   405	      // Authenticate first, then build collection ID mapping
   406	      if (!await this.authenticateAdmin()) {
   407	        throw new Error('Admin authentication required');
   408	      }
   409	      
   410	      // BUILD collection ID mapping after authentication
   411	      await this.buildCollectionIdMap();
   412	      
   413	      const currentSchema = await this.getCurrentSchema();
   414	
   415	      const comparison = {
   416	        toCreate: [],
   417	        toUpdate: [],
   418	        toDelete: [],
   419	        changes: []
   420	      };
   421	
   422	      const definedCollections = Object.keys(this.schema.collections);
   423	      const currentCollections = Object.keys(currentSchema.collections);
   424	
   425	      this.log(`Defined collections: ${definedCollections.join(', ')}`, 'debug');
   426	      this.log(`Current collections: ${currentCollections.join(', ')}`, 'debug');
   427	
   428	      // Find collections to create
   429	      for (const collectionName of definedCollections) {
   430	        if (!currentCollections.includes(collectionName)) {
   431	          comparison.toCreate.push(collectionName);
   432	        }
   433	      }
   434	
   435	      // Find collections to delete (exist in DB but not in schema)
   436	      for (const collectionName of currentCollections) {
   437	        if (!definedCollections.includes(collectionName)) {
   438	          // Skip system collections
   439	          if (!collectionName.startsWith('_') && collectionName !== 'users') {
   440	            comparison.toDelete.push(collectionName);
   441	          }
   442	        }
   443	      }
   444	
   445	      // Find collections to update
   446	      for (const collectionName of definedCollections) {
   447	        if (currentCollections.includes(collectionName)) {
   448	          const definedCollection = this.schema.collections[collectionName];
   449	          const currentCollection = currentSchema.collections[collectionName];
   450	
   451	          const changes = this.compareCollectionSchemas(definedCollection, currentCollection);
   452	
   453	          if (changes.length > 0) {
   454	            comparison.toUpdate.push(collectionName);
   455	            comparison.changes.push({
   456	              collection: collectionName,
   457	              changes: changes
   458	            });
   459	          }
   460	        }
   461	      }
   462	
   463	      return comparison;
   464	    } catch (error) {
   465	      console.error('‚ùå Error comparing schemas:', error.message);
   466	      throw error;
   467	    }
   468	  }
   469	
   470	  compareCollectionSchemas(defined, current) {
   471	    const changes = [];
   472	
   473	    // Compare fields
   474	    const definedFields = defined.schema || [];
   475	    const currentFields = current.schema || [];
   476	
   477	    const definedFieldNames = definedFields.map(f => f.name);
   478	    const currentFieldNames = currentFields.map(f => f.name);
   479	
   480	    // Fields to add
   481	    for (const field of definedFields) {
   482	      if (!currentFieldNames.includes(field.name)) {
   483	        changes.push({
   484	          type: 'add_field',
   485	          field: field.name,
   486	          details: field
   487	        });
   488	      }
   489	    }
   490	
   491	    // Fields to remove
   492	    for (const field of currentFields) {
   493	      if (!definedFieldNames.includes(field.name)) {
   494	        changes.push({
   495	          type: 'remove_field',
   496	          field: field.name,
   497	          details: field
   498	        });
   499	      }
   500	    }
   501	
   502	    // Fields to modify
   503	    for (const definedField of definedFields) {
   504	      const currentField = currentFields.find(f => f.name === definedField.name);
   505	      if (currentField && !this.fieldsEqual(definedField, currentField)) {
   506	        changes.push({
   507	          type: 'modify_field',
   508	          field: definedField.name,
   509	          from: currentField,
   510	          to: definedField
   511	        });
   512	      }
   513	    }
   514	
   515	    // Compare access rules
   516	    const ruleFields = ['listRule', 'viewRule', 'createRule', 'updateRule', 'deleteRule'];
   517	    for (const rule of ruleFields) {
   518	      if (defined[rule] !== current[rule]) {
   519	        changes.push({
   520	          type: 'modify_rule',
   521	          rule: rule,
   522	          from: current[rule],
   523	          to: defined[rule]
   524	        });
   525	      }
   526	    }
   527	
   528	    return changes;
   529	  }
   530	
   531	  fieldsEqual(field1, field2) {
   532	    return JSON.stringify(field1) === JSON.stringify(field2);
   533	  }
   534	
   535	  async displayComparison(comparison) {
   536	    this.logToFile('\nüìä SCHEMA COMPARISON RESULTS');
   537	    this.logToFile('=====================================');
   538	
   539	    if (comparison.toCreate.length === 0 &&
   540	      comparison.toUpdate.length === 0 &&
   541	      comparison.toDelete.length === 0) {
   542	      this.logToFile('‚úÖ Database schema is up to date!');
   543	      return;
   544	    }
   545	
   546	    if (comparison.toCreate.length > 0) {
   547	      this.logToFile(`\nüÜï Collections to CREATE (${comparison.toCreate.length}):`);
   548	      for (const collection of comparison.toCreate) {
   549	        const schema = this.schema.collections[collection];
   550	        this.logToFile(`  üìÅ ${collection} (${schema.type}) - ${schema.schema?.length || 0} fields`);
   551	      }
   552	    }
   553	
   554	    if (comparison.toUpdate.length > 0) {
   555	      this.logToFile(`\nüîÑ Collections to UPDATE (${comparison.toUpdate.length}):`);
   556	      for (const changeSet of comparison.changes) {
   557	        this.logToFile(`  üìÅ ${changeSet.collection}:`);
   558	        for (const change of changeSet.changes) {
   559	          switch (change.type) {
   560	            case 'add_field':
   561	              this.logToFile(`    ‚ûï Add field: ${change.field} (${change.details.type})`);
   562	              break;
   563	            case 'remove_field':
   564	              this.logToFile(`    ‚ûñ Remove field: ${change.field} (${change.details.type})`);
   565	              break;
   566	            case 'modify_field':
   567	              this.logToFile(`    üîß Modify field: ${change.field}`);
   568	              break;
   569	            case 'modify_rule':
   570	              this.logToFile(`    üîê Modify rule: ${change.rule}`);
   571	              break;
   572	          }
   573	        }
   574	      }
   575	    }
   576	
   577	    this.logToFile('\n=====================================');
   578	    this.logToFile('üí° Run "node scripts/schema-manager.js apply" to apply these changes');
   579	  }
   580	
   581	  async applySchema() {
   582	    try {
   583	      this.logToFile('üöÄ Applying schema changes to database...');
   584	
   585	      // Authenticate first before any operations
   586	      if (!await this.authenticateAdmin()) {
   587	        throw new Error('Admin authentication required');
   588	      }
   589	
   590	      const comparison = await this.compareSchemas();
   591	
   592	      if (comparison.toCreate.length === 0 &&
   593	        comparison.toUpdate.length === 0 &&
   594	        comparison.toDelete.length === 0) {
   595	        this.logToFile('‚úÖ No changes needed - schema is up to date!');
   596	        return;
   597	      }
   598	
   599	      // Show what will be changed
   600	      await this.displayComparison(comparison);
   601	
   602	      console.log('\n‚ö†Ô∏è  WARNING: This will modify your database structure!');
   603	      const confirm = await PasswordInput.getInput('Continue? (yes/no): ');
   604	
   605	      if (confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== 'y') {
   606	        this.logToFile('‚ùå Schema application cancelled');
   607	        return;
   608	      }
   609	
   610	      this.logToFile(`\nüîÑ User confirmed schema application: "${confirm}"`);
   611	
   612	      // FIXED: RESOLVE collection IDs in schema before applying - but keep original collection names as keys
   613	      this.resolvedSchema = this.resolveCollectionIds(this.schema);
   614	      this.log(`Original schema collections: ${Object.keys(this.schema.collections).join(', ')}`, 'debug');
   615	      this.log(`Resolved schema collections: ${Object.keys(this.resolvedSchema.collections).join(', ')}`, 'debug');
   616	
   617	      // Apply changes
   618	      let successCount = 0;
   619	      let errorCount = 0;
   620	
   621	      // 1. Create new collections (non-relational first)
   622	      const nonRelationalCollections = comparison.toCreate.filter(name => {
   623	        const collection = this.resolvedSchema.collections[name];
   624	        const hasRelations = collection.schema?.some(field => field.type === 'relation');
   625	        return !hasRelations;
   626	      });
   627	
   628	      const relationalCollections = comparison.toCreate.filter(name => {
   629	        const collection = this.resolvedSchema.collections[name];
   630	        const hasRelations = collection.schema?.some(field => field.type === 'relation');
   631	        return hasRelations;
   632	      });
   633	
   634	      this.logToFile(`\nüìã Non-relational collections to create: ${nonRelationalCollections.length}`);
   635	      this.logToFile(`üìã Relational collections to create: ${relationalCollections.length}`);
   636	
   637	      // Create non-relational collections first
   638	      for (const collectionName of nonRelationalCollections) {
   639	        try {
   640	          this.logToFile(`\nüÜï Creating collection: ${collectionName}`);
   641	          await this.createCollection(collectionName);
   642	          successCount++;
   643	          
   644	          // Update collection ID mapping after creating new collection
   645	          await this.buildCollectionIdMap();
   646	          this.resolvedSchema = this.resolveCollectionIds(this.schema);
   647	        } catch (error) {
   648	          this.logToFile(`‚ùå Failed to create ${collectionName}: ${error.message}`, 'error');
   649	          errorCount++;
   650	        }
   651	      }
   652	
   653	      // Create relational collections
   654	      for (const collectionName of relationalCollections) {
   655	        try {
   656	          this.logToFile(`\nüÜï Creating collection: ${collectionName}`);
   657	          await this.createCollection(collectionName);
   658	          successCount++;
   659	        } catch (error) {
   660	          this.logToFile(`‚ùå Failed to create ${collectionName}: ${error.message}`, 'error');
   661	          errorCount++;
   662	        }
   663	      }
   664	
   665	      // 2. Update existing collections
   666	      this.logToFile(`\nüîÑ Updating ${comparison.changes.length} existing collections...`);
   667	      for (const changeSet of comparison.changes) {
   668	        try {
   669	          this.logToFile(`\nüîÑ Updating collection: ${changeSet.collection}`);
   670	          await this.updateCollection(changeSet.collection, changeSet.changes);
   671	          successCount++;
   672	        } catch (error) {
   673	          this.logToFile(`‚ùå Failed to update ${changeSet.collection}: ${error.message}`, 'error');
   674	          errorCount++;
   675	        }
   676	      }
   677	
   678	      this.logToFile('\nüìä SCHEMA APPLICATION RESULTS');
   679	      this.logToFile('=====================================');
   680	      this.logToFile(`‚úÖ Successful operations: ${successCount}`);
   681	      this.logToFile(`‚ùå Failed operations: ${errorCount}`);
   682	
   683	      if (errorCount === 0) {
   684	        this.logToFile('üéâ Schema successfully applied!');
   685	      } else {
   686	        this.logToFile('‚ö†Ô∏è  Some operations failed. Check the errors above.');
   687	      }
   688	
   689	    } catch (error) {
   690	      this.logToFile(`‚ùå Error applying schema: ${error.message}`, 'error');
   691	      throw error;
   692	    }
   693	  }
   694	
   695	  // FIXED: createCollection method
   696	  async createCollection(collectionName) {
   697	    // Use resolved schema if available, otherwise fall back to regular schema
   698	    const schemaToUse = this.resolvedSchema || this.schema;
   699	    const collectionSchema = schemaToUse.collections[collectionName];
   700	
   701	    if (!collectionSchema) {
   702	      throw new Error(`Collection schema not found for: ${collectionName}`);
   703	    }
   704	
   705	    const collectionData = {
   706	      name: collectionName,
   707	      type: collectionSchema.type,
   708	      schema: collectionSchema.schema || [],
   709	      listRule: collectionSchema.listRule || null,
   710	      viewRule: collectionSchema.viewRule || null,
   711	      createRule: collectionSchema.createRule || null,
   712	      updateRule: collectionSchema.updateRule || null,
   713	      deleteRule: collectionSchema.deleteRule || null
   714	    };
   715	
   716	    this.log(`Creating collection with data: ${JSON.stringify(collectionData, null, 2)}`, 'debug');
   717	
   718	    try {
   719	      const createdCollection = await pb.collections.create(collectionData);
   720	      this.logToFile(`  ‚úÖ Created: ${collectionName}`);
   721	      return createdCollection;
   722	    } catch (error) {
   723	      // Enhanced error logging
   724	      this.logToFile(`‚ùå Failed to create ${collectionName}:`, 'error');
   725	      this.log('Full error object:', 'error');
   726	      this.log(JSON.stringify(error, null, 2), 'error');
   727	      this.log('Error response:', 'error');
   728	      this.log(JSON.stringify(error.response, null, 2), 'error');
   729	      this.log('Error data:', 'error');
   730	      this.log(JSON.stringify(error.data, null, 2), 'error');
   731	      this.log('Collection data being sent:', 'error');
   732	      this.log(JSON.stringify(collectionData, null, 2), 'error');
   733	      throw error;
   734	    }
   735	  }
   736	
   737	  // FIXED: updateCollection method
   738	  async updateCollection(collectionName, changes) {
   739	    try {
   740	      const currentCollection = await pb.collections.getFirstListItem(`name="${collectionName}"`);
   741	      
   742	      // Use resolved schema if available, otherwise fall back to regular schema
   743	      const schemaToUse = this.resolvedSchema || this.schema;
   744	      
   745	      // Look for the schema using multiple strategies
   746	      let newSchema = null;
   747	      
   748	      // Strategy 1: Try original collection name in resolved schema
   749	      if (schemaToUse.collections[collectionName]) {
   750	        newSchema = schemaToUse.collections[collectionName];
   751	        this.log(`Found schema using original name: ${collectionName}`, 'debug');
   752	      }
   753	      
   754	      // Strategy 2: Try original schema as fallback
   755	      else if (this.schema.collections[collectionName]) {
   756	        newSchema = this.schema.collections[collectionName];
   757	        this.log(`Found schema using original schema: ${collectionName}`, 'debug');
   758	      }
   759	      
   760	      // Strategy 3: For users collection, special handling
   761	      else if (collectionName === 'users') {
   762	        // Try different variations for the users collection
   763	        newSchema = schemaToUse.collections['users'] || 
   764	                    schemaToUse.collections['_pb_users_auth_'] || 
   765	                    this.schema.collections['users'];
   766	        if (newSchema) {
   767	          this.log(`Found users schema using special handling`, 'debug');
   768	        }
   769	      }
   770	
   771	      if (!newSchema) {
   772	        this.log(`Available schema collections: ${Object.keys(schemaToUse.collections).join(', ')}`, 'debug');
   773	        this.log(`Current collection ID: ${currentCollection.id}`, 'debug');
   774	        this.log(`Collection ID map for ${collectionName}: ${this.collectionIdMap[collectionName]}`, 'debug');
   775	        throw new Error(`Schema for collection ${collectionName} not found. Available: ${Object.keys(schemaToUse.collections).join(', ')}`);
   776	      }
   777	
   778	      const updateData = {
   779	        schema: newSchema.schema || [],
   780	        listRule: newSchema.listRule || null,
   781	        viewRule: newSchema.viewRule || null,
   782	        createRule: newSchema.createRule || null,
   783	        updateRule: newSchema.updateRule || null,
   784	        deleteRule: newSchema.deleteRule || null
   785	      };
   786	
   787	      this.log(`Updating collection ${collectionName} with: ${JSON.stringify(updateData, null, 2)}`, 'debug');
   788	
   789	      const updatedCollection = await pb.collections.update(currentCollection.id, updateData);
   790	      this.logToFile(`  ‚úÖ Updated: ${collectionName} (${changes.length} changes)`);
   791	      return updatedCollection;
   792	    } catch (error) {
   793	      // Enhanced error logging
   794	      this.logToFile(`‚ùå Failed to update ${collectionName}:`, 'error');
   795	      if (error.response || error.data || error.message) {
   796	        this.log('Full error object:', 'error');
   797	        this.log(JSON.stringify(error, null, 2), 'error');
   798	        this.log('Error response:', 'error');
   799	        this.log(JSON.stringify(error.response, null, 2), 'error');
   800	        this.log('Error data:', 'error');
   801	        this.log(JSON.stringify(error.data, null, 2), 'error');
   802	        this.log('Error message:', 'error');
   803	        this.log(error.message, 'error');
   804	      } else {
   805	        this.log('Unknown error:', 'error');
   806	        this.log(JSON.stringify(error, null, 2), 'error');
   807	      }
   808	
   809	      // Try to get the current collection for comparison
   810	      try {
   811	        const currentCollection = await pb.collections.getFirstListItem(`name="${collectionName}"`);
   812	        this.log('Current collection schema:', 'error');
   813	        this.log(JSON.stringify(currentCollection.schema, null, 2), 'error');
   814	      } catch (fetchError) {
   815	        this.log('Could not fetch current collection for comparison', 'error');
   816	      }
   817	
   818	      throw error;
   819	    }
   820	  }
   821	
   822	  async generateSchema() {
   823	    try {
   824	      console.log('üìã Generating schema from current database...');
   825	
   826	      const currentSchema = await this.getCurrentSchema();
   827	      const outputSchema = {
   828	        version: "1.0.0",
   829	        description: "Generated from current PocketBase database",
   830	        generated: currentSchema.timestamp,
   831	        collections: currentSchema.collections
   832	      };
   833	
   834	      if (!existsSync('./schema')) {
   835	        await fs.mkdir('./schema', { recursive: true });
   836	      }
   837	
   838	      const outputFile = './schema/generated-schema.json';
   839	      await fs.writeFile(outputFile, JSON.stringify(outputSchema, null, 2));
   840	
   841	      console.log(`‚úÖ Schema generated: ${outputFile}`);
   842	      console.log('üí° You can copy this to database.json and edit as needed');
   843	
   844	    } catch (error) {
   845	      console.error('‚ùå Error generating schema:', error.message);
   846	      throw error;
   847	    }
   848	  }
   849	
   850	  async seedData() {
   851	    try {
   852	      console.log('üå± Seeding initial data...');
   853	
   854	      if (!await this.authenticateAdmin()) {
   855	        throw new Error('Admin authentication required');
   856	      }
   857	
   858	      // Seed market categories
   859	      console.log('üìã Creating market categories...');
   860	      const categories = [
   861	        {
   862	          name: "Farmers Market",
   863	          description: "Fresh produce, local farms, organic goods",
   864	          color: "#22c55e",
   865	          icon: "apple",
   866	          sort_order: 1
   867	        },
   868	        {
   869	          name: "Craft & Artisan",
   870	          description: "Handmade crafts, art, unique creations",
   871	          color: "#8b5cf6",
   872	          icon: "paintbrush",
   873	          sort_order: 2
   874	        },
   875	        {
   876	          name: "Community Market",
   877	          description: "Local community events and markets",
   878	          color: "#3b82f6",
   879	          icon: "users",
   880	          sort_order: 3
   881	        },
   882	        {
   883	          name: "Food Market",
   884	          description: "Prepared foods, specialty cuisines",
   885	          color: "#ef4444",
   886	          icon: "utensils",
   887	          sort_order: 4
   888	        },
   889	        {
   890	          name: "Vintage & Antiques",
   891	          description: "Vintage items, antiques, collectibles",
   892	          color: "#6b7280",
   893	          icon: "clock",
   894	          sort_order: 5
   895	        },
   896	        {
   897	          name: "General Market",
   898	          description: "Mixed vendors and general goods",
   899	          color: "#f59e0b",
   900	          icon: "shopping-bag",
   901	          sort_order: 6
   902	        }
   903	      ];
   904	
   905	      for (const category of categories) {
   906	        try {
   907	          await pb.collection('market_categories').create(category);
   908	          console.log(`  ‚úÖ Created category: ${category.name}`);
   909	        } catch (error) {
   910	          if (error.message.includes('failed "unique" constraint')) {
   911	            console.log(`  ‚ÑπÔ∏è  Category already exists: ${category.name}`);
   912	          } else {
   913	            console.error(`  ‚ùå Failed to create ${category.name}:`, error.message);
   914	          }
   915	        }
   916	      }
   917	
   918	      // ADD: Seed amenity types
   919	      console.log('üè¢ Creating amenity types...');
   920	      const amenityTypes = [
   921	        { name: 'Toilets', category: 'facility', icon: 'bathroom', active: true },
   922	        { name: 'Parking', category: 'facility', icon: 'car', active: true },
   923	        { name: 'Food Court', category: 'facility', icon: 'utensils', active: true },
   924	        { name: 'ATM', category: 'service', icon: 'credit-card', active: true },
   925	        { name: 'Wheelchair Access', category: 'accessibility', icon: 'wheelchair', active: true },
   926	        { name: 'Children\'s Area', category: 'facility', icon: 'baby', active: true },
   927	        { name: 'Entertainment', category: 'service', icon: 'music', active: true },
   928	        { name: 'Seating', category: 'facility', icon: 'chair', active: true },
   929	        { name: 'Weather Protection', category: 'facility', icon: 'umbrella', active: true },
   930	        { name: 'Storage', category: 'facility', icon: 'package', active: true },
   931	        { name: 'Loading Dock', category: 'facility', icon: 'truck', active: true },
   932	        { name: 'Security', category: 'service', icon: 'shield', active: true },
   933	        { name: 'WiFi', category: 'service', icon: 'wifi', active: true },
   934	        { name: 'Pet Friendly', category: 'service', icon: 'heart', active: true }
   935	      ];
   936	
   937	      for (const amenityType of amenityTypes) {
   938	        try {
   939	          await pb.collection('amenity_types').create(amenityType);
   940	          console.log(`  ‚úÖ Created amenity type: ${amenityType.name}`);
   941	        } catch (error) {
   942	          if (error.message.includes('failed "unique" constraint')) {
   943	            console.log(`  ‚ÑπÔ∏è  Amenity type already exists: ${amenityType.name}`);
   944	          } else {
   945	            console.error(`  ‚ùå Failed to create ${amenityType.name}:`, error.message);
   946	          }
   947	        }
   948	      }
   949	
   950	      console.log('‚úÖ Initial data seeding completed!');
   951	
   952	    } catch (error) {
   953	      console.error('‚ùå Error seeding data:', error.message);
   954	      throw error;
   955	    }
   956	  }
   957	}
   958	
   959	// CLI Interface
   960	async function main() {
   961	  const args = process.argv.slice(2);
   962	  const command = args[0];
   963	
   964	  const manager = new SchemaManager();
   965	
   966	  if (command === 'debug' || args.includes('--debug')) {
   967	    process.env.DEBUG = 'true';
   968	    console.log('üêõ Debug mode enabled');
   969	  }
   970	
   971	  if (command !== 'init' && command !== 'setup') {
   972	    const connected = await manager.validateConnection();
   973	    if (!connected) {
   974	      console.log('\n‚ùå Cannot connect to PocketBase.');
   975	      console.log('Make sure PocketBase is running: ./pocketbase serve');
   976	      console.log(`Expected URL: ${process.env.VITE_POCKETBASE_URL || 'http://localhost:8090'}`);
   977	      process.exit(1);
   978	    }
   979	  }
   980	
   981	  try {
   982	    switch (command) {
   983	      case 'generate':
   984	        await manager.generateSchema();
   985	        break;
   986	
   987	      case 'compare':
   988	      case 'diff':
   989	        const comparison = await manager.compareSchemas();
   990	        await manager.displayComparison(comparison);
   991	        break;
   992	
   993	      case 'apply':
   994	        await manager.applySchema();
   995	        break;
   996	
   997	      case 'seed':
   998	        await manager.seedData();
   999	        break;
  1000	
  1001	      case 'setup':
  1002	        console.log('\nüöÄ SA Markets Directory - Database Setup');
  1003	        console.log('==========================================');
  1004	        console.log('1. Make sure PocketBase is running: ./pocketbase serve');
  1005	        console.log('2. Create admin account: http://localhost:8090/_/');
  1006	        console.log('3. Apply schema: node scripts/schema-manager.js apply');
  1007	        console.log('4. Seed initial data: node scripts/schema-manager.js seed');
  1008	        console.log('5. Test the application!');
  1009	        break;
  1010	
  1011	      default:
  1012	        console.log(`
  1013	üóÑÔ∏è  SA Markets Directory - Schema Management System
  1014	
  1015	Usage:
  1016	  node scripts/schema-manager.js <command> [--debug]
  1017	
  1018	Commands:
  1019	  setup     - Show complete setup instructions
  1020	  generate  - Generate schema from current database  
  1021	  compare   - Compare schema files with database
  1022	  apply     - Apply schema changes to database
  1023	  seed      - Add initial data (categories, etc.)
  1024	  debug     - Enable debug logging
  1025	
  1026	Examples:
  1027	  node scripts/schema-manager.js setup
  1028	  node scripts/schema-manager.js compare
  1029	  node scripts/schema-manager.js apply
  1030	  node scripts/schema-manager.js seed
  1031	
  1032	Quick start:
  1033	  1. Make sure PocketBase is running
  1034	  2. Visit http://localhost:8090/_/ to create admin
  1035	  3. Run: node scripts/schema-manager.js apply
  1036	  4. Run: node scripts/schema-manager.js seed
  1037	
  1038	Output:
  1039	  üìù Full logs are saved to: output.log
  1040	        `);
  1041	    }
  1042	  } catch (error) {
  1043	    console.error('\n‚ùå Command failed:', error.message);
  1044	    manager.log(`Full error: ${JSON.stringify(error)}`, 'error');
  1045	    process.exit(1);
  1046	  } finally {
  1047	    // Always write the log file
  1048	    await manager.writeLogFile();
  1049	  }
  1050	}
  1051	
  1052	main().catch(async error => {
  1053	  console.error('\n‚ùå Script failed:', error.message);
  1054	  
  1055	  // Try to write log file even on failure
  1056	  try {
  1057	    // Create a minimal manager instance for logging
  1058	    const logManager = {
  1059	      logBuffer: [
  1060	        `FATAL ERROR: ${error.message}`,
  1061	        `STACK TRACE: ${error.stack}`,
  1062	        `COMMAND: ${process.argv.slice(2).join(' ')}`,
  1063	        `TIME: ${new Date().toISOString()}`
  1064	      ],
  1065	      outputFile: './output.log',
  1066	      startTime: new Date(),
  1067	      async writeLogFile() {
  1068	        try {
  1069	          const header = [
  1070	            '='.repeat(80),
  1071	            `SA Markets Directory - Schema Manager Log (ERROR)`,
  1072	            `Started: ${this.startTime.toISOString()}`,
  1073	            `Failed: ${new Date().toISOString()}`,
  1074	            `Command: ${process.argv.slice(2).join(' ')}`,
  1075	            '='.repeat(80),
  1076	            ''
  1077	          ];
  1078	
  1079	          const content = header.concat(this.logBuffer).join('\n');
  1080	          await fs.writeFile(this.outputFile, content);
  1081	          console.log(`üìù Error log written to: ${this.outputFile}`);
  1082	        } catch (writeError) {
  1083	          console.error('‚ùå Failed to write log file:', writeError.message);
  1084	        }
  1085	      }
  1086	    };
  1087	    
  1088	    await logManager.writeLogFile();
  1089	  } catch (logError) {
  1090	    console.error('‚ùå Failed to write error log:', logError.message);
  1091	  }
  1092	  
  1093	  process.exit(1);
  1094	});

========================================

üìÅ FILE: src/scripts/schema-validator.js
   Size: 2.7K | Modified: 2025-06-04
----------------------------------------
     1	// schema-validator.js - Run this to check for common schema issues
     2	import pb from '../lib/pocketbase.js';
     3	import fs from 'fs/promises';
     4	
     5	async function validateSchema() {
     6	  console.log('üîç Validating schema for common issues...');
     7	  
     8	  try {
     9	    // Load schema
    10	    const schemaContent = await fs.readFile('./schema/database.json', 'utf8');
    11	    const schema = JSON.parse(schemaContent);
    12	    
    13	    // Get existing collections
    14	    const existingCollections = await pb.collections.getFullList();
    15	    const existingCollectionMap = {};
    16	    existingCollections.forEach(col => {
    17	      existingCollectionMap[col.name] = col.id;
    18	    });
    19	    
    20	    console.log('üìã Existing collections:', Object.keys(existingCollectionMap));
    21	    
    22	    // Validate each collection
    23	    for (const [collectionName, collectionDef] of Object.entries(schema.collections)) {
    24	      console.log(`\nüîç Validating ${collectionName}:`);
    25	      
    26	      // Check relation fields
    27	      const relationFields = collectionDef.schema?.filter(field => field.type === 'relation');
    28	      
    29	      for (const field of relationFields || []) {
    30	        const targetCollection = field.options?.collectionId;
    31	        
    32	        if (targetCollection && !existingCollectionMap[targetCollection]) {
    33	          console.error(`‚ùå ${collectionName}.${field.name}: References non-existent collection '${targetCollection}'`);
    34	          console.log(`   Available collections: ${Object.keys(existingCollectionMap).join(', ')}`);
    35	        } else if (targetCollection) {
    36	          console.log(`‚úÖ ${collectionName}.${field.name}: Correctly references '${targetCollection}'`);
    37	        } else {
    38	          console.error(`‚ùå ${collectionName}.${field.name}: Missing collectionId in relation field`);
    39	        }
    40	      }
    41	      
    42	      // Check for common field validation issues
    43	      for (const field of collectionDef.schema || []) {
    44	        // Check select fields have values
    45	        if (field.type === 'select' && (!field.options?.values || field.options.values.length === 0)) {
    46	          console.error(`‚ùå ${collectionName}.${field.name}: Select field missing values array`);
    47	        }
    48	        
    49	        // Check file fields have proper options
    50	        if (field.type === 'file' && !field.options?.maxSelect) {
    51	          console.warn(`‚ö†Ô∏è  ${collectionName}.${field.name}: File field missing maxSelect`);
    52	        }
    53	        
    54	        // Check required fields
    55	        if (field.required === undefined) {
    56	          console.warn(`‚ö†Ô∏è  ${collectionName}.${field.name}: Required property not explicitly set`);
    57	        }
    58	      }
    59	    }
    60	    
    61	    console.log('\nüìä Validation complete!');
    62	    
    63	  } catch (error) {
    64	    console.error('‚ùå Validation failed:', error.message);
    65	  }
    66	}
    67	
    68	validateSchema();

========================================

üìÅ FILE: src/scripts/schema/database.json
   Size: 27K | Modified: 2025-06-04
----------------------------------------
     1	{
     2	  "version": "2.0.0",
     3	  "description": "SA Markets Directory - Normalized Enterprise Schema with Fixed Validation Issues",
     4	  "collections": {
     5	    "users": {
     6	      "name": "users",
     7	      "type": "auth",
     8	      "system": true,
     9	      "description": "Built-in PocketBase users collection with custom fields",
    10	      "schema": [
    11	        {
    12	          "name": "role",
    13	          "type": "select",
    14	          "required": true,
    15	          "options": {
    16	            "maxSelect": 1,
    17	            "values": [
    18	              "customer",
    19	              "stallholder", 
    20	              "organizer"
    21	            ]
    22	          },
    23	          "description": "User role in the platform"
    24	        },
    25	        {
    26	          "name": "phone",
    27	          "type": "text",
    28	          "required": false,
    29	          "options": {
    30	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
    31	          },
    32	          "description": "Australian phone number"
    33	        },
    34	        {
    35	          "name": "email_verified",
    36	          "type": "bool",
    37	          "required": false,
    38	          "description": "Email verification status"
    39	        },
    40	        {
    41	          "name": "subscription_tier",
    42	          "type": "select",
    43	          "required": false,
    44	          "options": {
    45	            "maxSelect": 1,
    46	            "values": [
    47	              "free",
    48	              "basic",
    49	              "premium",
    50	              "enterprise"
    51	            ]
    52	          },
    53	          "description": "Subscription level"
    54	        }
    55	      ],
    56	      "listRule": "id = @request.auth.id",
    57	      "viewRule": "id = @request.auth.id",
    58	      "createRule": "",
    59	      "updateRule": "id = @request.auth.id",
    60	      "deleteRule": "id = @request.auth.id"
    61	    },
    62	    "market_categories": {
    63	      "name": "market_categories",
    64	      "type": "base",
    65	      "description": "Market categorization system",
    66	      "schema": [
    67	        {
    68	          "name": "name",
    69	          "type": "text",
    70	          "required": true,
    71	          "options": {
    72	            "min": 2,
    73	            "max": 50
    74	          },
    75	          "description": "Category name"
    76	        },
    77	        {
    78	          "name": "description",
    79	          "type": "text",
    80	          "required": false,
    81	          "options": {
    82	            "max": 200
    83	          },
    84	          "description": "Category description"
    85	        },
    86	        {
    87	          "name": "color",
    88	          "type": "text",
    89	          "required": false,
    90	          "options": {
    91	            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
    92	          },
    93	          "description": "Hex color code for UI"
    94	        },
    95	        {
    96	          "name": "icon",
    97	          "type": "text",
    98	          "required": false,
    99	          "options": {
   100	            "max": 50
   101	          },
   102	          "description": "Icon identifier"
   103	        },
   104	        {
   105	          "name": "sort_order",
   106	          "type": "number",
   107	          "required": false,
   108	          "options": {
   109	            "min": 0
   110	          },
   111	          "description": "Display order"
   112	        }
   113	      ],
   114	      "listRule": "",
   115	      "viewRule": "",
   116	      "createRule": "@request.auth.role = \"organizer\"",
   117	      "updateRule": "@request.auth.role = \"organizer\"",
   118	      "deleteRule": "@request.auth.role = \"organizer\""
   119	    },
   120	    "amenity_types": {
   121	      "name": "amenity_types", 
   122	      "type": "base",
   123	      "description": "Available amenity types for markets",
   124	      "schema": [
   125	        {
   126	          "name": "name",
   127	          "type": "text",
   128	          "required": true,
   129	          "options": {
   130	            "min": 2,
   131	            "max": 50
   132	          },
   133	          "description": "Amenity name (Toilets, Parking, etc.)"
   134	        },
   135	        {
   136	          "name": "description",
   137	          "type": "text",
   138	          "required": false,
   139	          "options": {
   140	            "max": 200
   141	          },
   142	          "description": "Description of amenity"
   143	        },
   144	        {
   145	          "name": "icon",
   146	          "type": "text",
   147	          "required": false,
   148	          "options": {
   149	            "max": 50
   150	          },
   151	          "description": "Icon for UI"
   152	        },
   153	        {
   154	          "name": "category",
   155	          "type": "select",
   156	          "required": false,
   157	          "options": {
   158	            "maxSelect": 1,
   159	            "values": [
   160	              "facility",
   161	              "service", 
   162	              "accessibility"
   163	            ]
   164	          },
   165	          "description": "Amenity category"
   166	        },
   167	        {
   168	          "name": "active",
   169	          "type": "bool",
   170	          "required": false,
   171	          "description": "Is this amenity type active"
   172	        }
   173	      ],
   174	      "listRule": "",
   175	      "viewRule": "",
   176	      "createRule": "@request.auth.role = \"organizer\"",
   177	      "updateRule": "@request.auth.role = \"organizer\"",
   178	      "deleteRule": "@request.auth.role = \"organizer\""
   179	    },
   180	    "markets": {
   181	      "name": "markets",
   182	      "type": "base", 
   183	      "description": "Core market information - fully normalized",
   184	      "schema": [
   185	        {
   186	          "name": "name",
   187	          "type": "text",
   188	          "required": true,
   189	          "options": {
   190	            "min": 2,
   191	            "max": 100
   192	          },
   193	          "description": "Market name"
   194	        },
   195	        {
   196	          "name": "slug",
   197	          "type": "text",
   198	          "required": true,
   199	          "options": {
   200	            "pattern": "^[a-z0-9-]+$",
   201	            "min": 2,
   202	            "max": 100
   203	          },
   204	          "description": "URL-friendly identifier"
   205	        },
   206	        {
   207	          "name": "description",
   208	          "type": "text",
   209	          "required": false,
   210	          "options": {
   211	            "max": 2000
   212	          },
   213	          "description": "Market description"
   214	        },
   215	        {
   216	          "name": "category",
   217	          "type": "relation",
   218	          "required": true,
   219	          "options": {
   220	            "collectionId": "MARKET_CATEGORIES_ID",
   221	            "cascadeDelete": false,
   222	            "minSelect": null,
   223	            "maxSelect": 1,
   224	            "displayFields": ["name"]
   225	          },
   226	          "description": "Market category"
   227	        },
   228	        {
   229	          "name": "organizer",
   230	          "type": "relation",
   231	          "required": true,
   232	          "options": {
   233	            "collectionId": "_pb_users_auth_",
   234	            "cascadeDelete": false,
   235	            "minSelect": null,
   236	            "maxSelect": 1,
   237	            "displayFields": ["name", "email"]
   238	          },
   239	          "description": "Market organizer"
   240	        },
   241	        {
   242	          "name": "address",
   243	          "type": "text",
   244	          "required": true,
   245	          "options": {
   246	            "max": 200
   247	          },
   248	          "description": "Street address"
   249	        },
   250	        {
   251	          "name": "suburb",
   252	          "type": "text",
   253	          "required": true,
   254	          "options": {
   255	            "max": 50
   256	          },
   257	          "description": "Suburb/City"
   258	        },
   259	        {
   260	          "name": "state",
   261	          "type": "select",
   262	          "required": true,
   263	          "options": {
   264	            "maxSelect": 1,
   265	            "values": [
   266	              "SA",
   267	              "VIC", 
   268	              "NSW",
   269	              "QLD",
   270	              "WA",
   271	              "TAS",
   272	              "NT",
   273	              "ACT"
   274	            ]
   275	          },
   276	          "description": "Australian state"
   277	        },
   278	        {
   279	          "name": "postcode",
   280	          "type": "text",
   281	          "required": false,
   282	          "options": {
   283	            "pattern": "^[0-9]{4}$"
   284	          },
   285	          "description": "Australian postcode"
   286	        },
   287	        {
   288	          "name": "latitude",
   289	          "type": "number",
   290	          "required": false,
   291	          "description": "GPS latitude"
   292	        },
   293	        {
   294	          "name": "longitude",
   295	          "type": "number",
   296	          "required": false,
   297	          "description": "GPS longitude"
   298	        },
   299	        {
   300	          "name": "venue_type",
   301	          "type": "select",
   302	          "required": false,
   303	          "options": {
   304	            "maxSelect": 1,
   305	            "values": [
   306	              "outdoor",
   307	              "indoor",
   308	              "covered",
   309	              "mixed"
   310	            ]
   311	          },
   312	          "description": "Venue type"
   313	        },
   314	        {
   315	          "name": "contact_email",
   316	          "type": "email",
   317	          "required": true,
   318	          "description": "Market contact email"
   319	        },
   320	        {
   321	          "name": "contact_phone",
   322	          "type": "text",
   323	          "required": false,
   324	          "options": {
   325	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   326	          },
   327	          "description": "Market contact phone"
   328	        },
   329	        {
   330	          "name": "website",
   331	          "type": "url",
   332	          "required": false,
   333	          "description": "Market website"
   334	        },
   335	        {
   336	          "name": "social_media",
   337	          "type": "json",
   338	          "required": false,
   339	          "options": {
   340	            "maxSize": 2000000
   341	          },
   342	          "description": "Social media links"
   343	        },
   344	        {
   345	          "name": "max_stalls",
   346	          "type": "number",
   347	          "required": false,
   348	          "options": {
   349	            "min": 1
   350	          },
   351	          "description": "Maximum number of stalls"
   352	        },
   353	        {
   354	          "name": "insurance_minimum",
   355	          "type": "number",
   356	          "required": false,
   357	          "options": {
   358	            "min": 0
   359	          },
   360	          "description": "Minimum insurance coverage required"
   361	        },
   362	        {
   363	          "name": "abn_required",
   364	          "type": "bool",
   365	          "required": false,
   366	          "description": "ABN required for stallholders"
   367	        },
   368	        {
   369	          "name": "waiting_list_enabled",
   370	          "type": "bool",
   371	          "required": false,
   372	          "description": "Enable waiting list when full"
   373	        },
   374	        {
   375	          "name": "featured_image",
   376	          "type": "file",
   377	          "required": false,
   378	          "options": {
   379	            "maxSelect": 1,
   380	            "maxSize": 5242880,
   381	            "mimeTypes": [
   382	              "image/jpeg",
   383	              "image/png",
   384	              "image/webp"
   385	            ]
   386	          },
   387	          "description": "Main market image"
   388	        },
   389	        {
   390	          "name": "gallery_images",
   391	          "type": "file",
   392	          "required": false,
   393	          "options": {
   394	            "maxSelect": 10,
   395	            "maxSize": 5242880,
   396	            "mimeTypes": [
   397	              "image/jpeg",
   398	              "image/png", 
   399	              "image/webp"
   400	            ]
   401	          },
   402	          "description": "Market gallery images"
   403	        },
   404	        {
   405	          "name": "active",
   406	          "type": "bool",
   407	          "required": false,
   408	          "description": "Market is active/published"
   409	        },
   410	        {
   411	          "name": "view_count",
   412	          "type": "number",
   413	          "required": false,
   414	          "options": {
   415	            "min": 0
   416	          },
   417	          "description": "Profile view count"
   418	        },
   419	        {
   420	          "name": "favorite_count",
   421	          "type": "number",
   422	          "required": false,
   423	          "options": {
   424	            "min": 0
   425	          },
   426	          "description": "Times favorited by users"
   427	        },
   428	        {
   429	          "name": "average_rating",
   430	          "type": "number",
   431	          "required": false,
   432	          "options": {
   433	            "min": 0,
   434	            "max": 5
   435	          },
   436	          "description": "Average user rating"
   437	        },
   438	        {
   439	          "name": "total_reviews",
   440	          "type": "number",
   441	          "required": false,
   442	          "options": {
   443	            "min": 0
   444	          },
   445	          "description": "Total number of reviews"
   446	        }
   447	      ],
   448	      "listRule": "",
   449	      "viewRule": "",
   450	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"organizer\"",
   451	      "updateRule": "@request.auth.id = organizer.id",
   452	      "deleteRule": "@request.auth.id = organizer.id"
   453	    },
   454	    "market_amenities": {
   455	      "name": "market_amenities",
   456	      "type": "base",
   457	      "description": "Normalized amenities for markets",
   458	      "schema": [
   459	        {
   460	          "name": "market",
   461	          "type": "relation",
   462	          "required": true,
   463	          "options": {
   464	            "collectionId": "MARKETS_ID",
   465	            "cascadeDelete": true,
   466	            "minSelect": null,
   467	            "maxSelect": 1,
   468	            "displayFields": ["name"]
   469	          },
   470	          "description": "Related market"
   471	        },
   472	        {
   473	          "name": "amenity_type",
   474	          "type": "relation",
   475	          "required": true,
   476	          "options": {
   477	            "collectionId": "AMENITY_TYPES_ID",
   478	            "cascadeDelete": false,
   479	            "minSelect": null,
   480	            "maxSelect": 1,
   481	            "displayFields": ["name"]
   482	          },
   483	          "description": "Type of amenity"
   484	        },
   485	        {
   486	          "name": "available",
   487	          "type": "bool",
   488	          "required": false,
   489	          "description": "Is this amenity available"
   490	        },
   491	        {
   492	          "name": "notes",
   493	          "type": "text",
   494	          "required": false,
   495	          "options": {
   496	            "max": 200
   497	          },
   498	          "description": "Optional notes about this amenity"
   499	        }
   500	      ],
   501	      "listRule": "",
   502	      "viewRule": "",
   503	      "createRule": "@request.auth.id != \"\"",
   504	      "updateRule": "@request.auth.id != \"\"",
   505	      "deleteRule": "@request.auth.id != \"\""
   506	    },
   507	    "market_schedules": {
   508	      "name": "market_schedules",
   509	      "type": "base",
   510	      "description": "Advanced scheduling for markets",
   511	      "schema": [
   512	        {
   513	          "name": "market",
   514	          "type": "relation",
   515	          "required": true,
   516	          "options": {
   517	            "collectionId": "MARKETS_ID",
   518	            "cascadeDelete": true,
   519	            "minSelect": null,
   520	            "maxSelect": 1,
   521	            "displayFields": ["name"]
   522	          },
   523	          "description": "Related market"
   524	        },
   525	        {
   526	          "name": "schedule_type",
   527	          "type": "select",
   528	          "required": true,
   529	          "options": {
   530	            "maxSelect": 1,
   531	            "values": [
   532	              "regular",
   533	              "weekly_pattern",
   534	              "monthly_pattern",
   535	              "custom_dates"
   536	            ]
   537	          },
   538	          "description": "Type of schedule pattern"
   539	        },
   540	        {
   541	          "name": "schedule_data",
   542	          "type": "json",
   543	          "required": false,
   544	          "options": {
   545	            "maxSize": 2000000
   546	          },
   547	          "description": "Complex schedule patterns"
   548	        },
   549	        {
   550	          "name": "start_time",
   551	          "type": "text",
   552	          "required": false,
   553	          "options": {
   554	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   555	          },
   556	          "description": "Market start time (HH:MM)"
   557	        },
   558	        {
   559	          "name": "end_time",
   560	          "type": "text",
   561	          "required": false,
   562	          "options": {
   563	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   564	          },
   565	          "description": "Market end time (HH:MM)"
   566	        },
   567	        {
   568	          "name": "start_date",
   569	          "type": "date",
   570	          "required": false,
   571	          "description": "Schedule valid from"
   572	        },
   573	        {
   574	          "name": "end_date",
   575	          "type": "date",
   576	          "required": false,
   577	          "description": "Schedule valid until"
   578	        },
   579	        {
   580	          "name": "active",
   581	          "type": "bool",
   582	          "required": false,
   583	          "description": "Is this schedule active"
   584	        }
   585	      ],
   586	      "listRule": "",
   587	      "viewRule": "",
   588	      "createRule": "@request.auth.id != \"\"",
   589	      "updateRule": "@request.auth.id != \"\"",
   590	      "deleteRule": "@request.auth.id != \"\""
   591	    },
   592	    "market_fees": {
   593	      "name": "market_fees",
   594	      "type": "base",
   595	      "description": "Detailed fee structure for markets",
   596	      "schema": [
   597	        {
   598	          "name": "market",
   599	          "type": "relation",
   600	          "required": true,
   601	          "options": {
   602	            "collectionId": "MARKETS_ID",
   603	            "cascadeDelete": true,
   604	            "minSelect": null,
   605	            "maxSelect": 1,
   606	            "displayFields": ["name"]
   607	          },
   608	          "description": "Related market"
   609	        },
   610	        {
   611	          "name": "fee_type",
   612	          "type": "select",
   613	          "required": true,
   614	          "options": {
   615	            "maxSelect": 1,
   616	            "values": [
   617	              "stall_fee",
   618	              "application_fee",
   619	              "bond",
   620	              "power",
   621	              "other"
   622	            ]
   623	          },
   624	          "description": "Type of fee"
   625	        },
   626	        {
   627	          "name": "fee_name",
   628	          "type": "text",
   629	          "required": true,
   630	          "options": {
   631	            "max": 100
   632	          },
   633	          "description": "Display name for fee"
   634	        },
   635	        {
   636	          "name": "amount",
   637	          "type": "number",
   638	          "required": true,
   639	          "options": {
   640	            "min": 0
   641	          },
   642	          "description": "Fee amount"
   643	        },
   644	        {
   645	          "name": "currency",
   646	          "type": "text",
   647	          "required": false,
   648	          "options": {
   649	            "max": 3
   650	          },
   651	          "description": "Currency code (AUD)"
   652	        },
   653	        {
   654	          "name": "frequency",
   655	          "type": "select",
   656	          "required": false,
   657	          "options": {
   658	            "maxSelect": 1,
   659	            "values": [
   660	              "per_day",
   661	              "per_event",
   662	              "one_time"
   663	            ]
   664	          },
   665	          "description": "Fee frequency"
   666	        },
   667	        {
   668	          "name": "conditions",
   669	          "type": "json",
   670	          "required": false,
   671	          "options": {
   672	            "maxSize": 2000000
   673	          },
   674	          "description": "Conditions for this fee"
   675	        },
   676	        {
   677	          "name": "valid_from",
   678	          "type": "date",
   679	          "required": false,
   680	          "description": "Fee valid from date"
   681	        },
   682	        {
   683	          "name": "valid_until",
   684	          "type": "date",
   685	          "required": false,
   686	          "description": "Fee valid until date"
   687	        },
   688	        {
   689	          "name": "active",
   690	          "type": "bool",
   691	          "required": false,
   692	          "description": "Is this fee active"
   693	        }
   694	      ],
   695	      "listRule": "",
   696	      "viewRule": "",
   697	      "createRule": "@request.auth.id != \"\"",
   698	      "updateRule": "@request.auth.id != \"\"",
   699	      "deleteRule": "@request.auth.id != \"\""
   700	    },
   701	    "stallholders": {
   702	      "name": "stallholders",
   703	      "type": "base",
   704	      "description": "Stallholder business profiles",
   705	      "schema": [
   706	        {
   707	          "name": "user",
   708	          "type": "relation",
   709	          "required": true,
   710	          "options": {
   711	            "collectionId": "_pb_users_auth_",
   712	            "cascadeDelete": true,
   713	            "minSelect": null,
   714	            "maxSelect": 1,
   715	            "displayFields": ["name", "email"]
   716	          },
   717	          "description": "Associated user account"
   718	        },
   719	        {
   720	          "name": "business_name",
   721	          "type": "text",
   722	          "required": true,
   723	          "options": {
   724	            "min": 2,
   725	            "max": 100
   726	          },
   727	          "description": "Business name"
   728	        },
   729	        {
   730	          "name": "business_description",
   731	          "type": "text",
   732	          "required": false,
   733	          "options": {
   734	            "max": 1000
   735	          },
   736	          "description": "Business description"
   737	        },
   738	        {
   739	          "name": "abn",
   740	          "type": "text",
   741	          "required": false,
   742	          "options": {
   743	            "pattern": "^[0-9]{11}$"
   744	          },
   745	          "description": "Australian Business Number"
   746	        },
   747	        {
   748	          "name": "product_categories",
   749	          "type": "json",
   750	          "required": false,
   751	          "options": {
   752	            "maxSize": 2000000
   753	          },
   754	          "description": "Product categories sold"
   755	        },
   756	        {
   757	          "name": "contact_phone",
   758	          "type": "text",
   759	          "required": false,
   760	          "options": {
   761	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   762	          },
   763	          "description": "Business contact phone"
   764	        },
   765	        {
   766	          "name": "website",
   767	          "type": "url",
   768	          "required": false,
   769	          "description": "Business website"
   770	        },
   771	        {
   772	          "name": "social_media",
   773	          "type": "json",
   774	          "required": false,
   775	          "options": {
   776	            "maxSize": 2000000
   777	          },
   778	          "description": "Social media profiles"
   779	        },
   780	        {
   781	          "name": "power_required",
   782	          "type": "bool",
   783	          "required": false,
   784	          "description": "Requires power connection"
   785	        },
   786	        {
   787	          "name": "space_requirements",
   788	          "type": "text",
   789	          "required": false,
   790	          "options": {
   791	            "max": 200
   792	          },
   793	          "description": "Space size requirements"
   794	        },
   795	        {
   796	          "name": "rating",
   797	          "type": "number",
   798	          "required": false,
   799	          "options": {
   800	            "min": 0,
   801	            "max": 5
   802	          },
   803	          "description": "Average rating"
   804	        },
   805	        {
   806	          "name": "reviews_count",
   807	          "type": "number",
   808	          "required": false,
   809	          "options": {
   810	            "min": 0
   811	          },
   812	          "description": "Total reviews"
   813	        },
   814	        {
   815	          "name": "is_verified",
   816	          "type": "bool",
   817	          "required": false,
   818	          "description": "Verified stallholder status"
   819	        },
   820	        {
   821	          "name": "subscription_tier",
   822	          "type": "select",
   823	          "required": false,
   824	          "options": {
   825	            "maxSelect": 1,
   826	            "values": [
   827	              "free",
   828	              "basic",
   829	              "premium"
   830	            ]
   831	          },
   832	          "description": "Subscription level"
   833	        }
   834	      ],
   835	      "listRule": "",
   836	      "viewRule": "",
   837	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   838	      "updateRule": "@request.auth.id = user.id",
   839	      "deleteRule": "@request.auth.id = user.id"
   840	    },
   841	    "applications": {
   842	      "name": "applications",
   843	      "type": "base",
   844	      "description": "Market applications from stallholders",
   845	      "schema": [
   846	        {
   847	          "name": "stallholder",
   848	          "type": "relation",
   849	          "required": true,
   850	          "options": {
   851	            "collectionId": "STALLHOLDERS_ID",
   852	            "cascadeDelete": true,
   853	            "minSelect": null,
   854	            "maxSelect": 1,
   855	            "displayFields": ["business_name"]
   856	          },
   857	          "description": "Applying stallholder"
   858	        },
   859	        {
   860	          "name": "market",
   861	          "type": "relation",
   862	          "required": true,
   863	          "options": {
   864	            "collectionId": "MARKETS_ID",
   865	            "cascadeDelete": true,
   866	            "minSelect": null,
   867	            "maxSelect": 1,
   868	            "displayFields": ["name"]
   869	          },
   870	          "description": "Target market"
   871	        },
   872	        {
   873	          "name": "status",
   874	          "type": "select",
   875	          "required": true,
   876	          "options": {
   877	            "maxSelect": 1,
   878	            "values": [
   879	              "pending",
   880	              "approved",
   881	              "rejected",
   882	              "waitlisted",
   883	              "cancelled"
   884	            ]
   885	          },
   886	          "description": "Application status"
   887	        },
   888	        {
   889	          "name": "application_date",
   890	          "type": "date",
   891	          "required": true,
   892	          "description": "Date of application"
   893	        },
   894	        {
   895	          "name": "requested_dates",
   896	          "type": "json",
   897	          "required": false,
   898	          "options": {
   899	            "maxSize": 2000000
   900	          },
   901	          "description": "Specific dates requested"
   902	        },
   903	        {
   904	          "name": "message",
   905	          "type": "text",
   906	          "required": false,
   907	          "options": {
   908	            "max": 1000
   909	          },
   910	          "description": "Stallholder message"
   911	        },
   912	        {
   913	          "name": "organizer_notes",
   914	          "type": "text",
   915	          "required": false,
   916	          "options": {
   917	            "max": 1000
   918	          },
   919	          "description": "Internal organizer notes"
   920	        },
   921	        {
   922	          "name": "payment_status",
   923	          "type": "select",
   924	          "required": false,
   925	          "options": {
   926	            "maxSelect": 1,
   927	            "values": [
   928	              "unpaid",
   929	              "paid",
   930	              "partial",
   931	              "refunded"
   932	            ]
   933	          },
   934	          "description": "Payment status"
   935	        },
   936	        {
   937	          "name": "payment_amount",
   938	          "type": "number",
   939	          "required": false,
   940	          "options": {
   941	            "min": 0
   942	          },
   943	          "description": "Amount paid"
   944	        },
   945	        {
   946	          "name": "stall_assignment",
   947	          "type": "text",
   948	          "required": false,
   949	          "options": {
   950	            "max": 50
   951	          },
   952	          "description": "Assigned stall location"
   953	        }
   954	      ],
   955	      "listRule": "",
   956	      "viewRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer",
   957	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   958	      "updateRule": "@request.auth.id = market.organizer",
   959	      "deleteRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer"
   960	    },
   961	    "reviews": {
   962	      "name": "reviews",
   963	      "type": "base",
   964	      "description": "User reviews for markets and stallholders",
   965	      "schema": [
   966	        {
   967	          "name": "reviewer",
   968	          "type": "relation",
   969	          "required": true,
   970	          "options": {
   971	            "collectionId": "_pb_users_auth_",
   972	            "cascadeDelete": false,
   973	            "minSelect": null,
   974	            "maxSelect": 1,
   975	            "displayFields": ["name"]
   976	          },
   977	          "description": "User who wrote the review"
   978	        },
   979	        {
   980	          "name": "target_type",
   981	          "type": "select",
   982	          "required": true,
   983	          "options": {
   984	            "maxSelect": 1,
   985	            "values": [
   986	              "market",
   987	              "stallholder"
   988	            ]
   989	          },
   990	          "description": "What is being reviewed"
   991	        },
   992	        {
   993	          "name": "target_id",
   994	          "type": "text",
   995	          "required": true,
   996	          "options": {
   997	            "min": 15,
   998	            "max": 15
   999	          },
  1000	          "description": "ID of the reviewed item"
  1001	        },
  1002	        {
  1003	          "name": "rating",
  1004	          "type": "number",
  1005	          "required": true,
  1006	          "options": {
  1007	            "min": 1,
  1008	            "max": 5
  1009	          },
  1010	          "description": "Rating (1-5 stars)"
  1011	        },
  1012	        {
  1013	          "name": "title",
  1014	          "type": "text",
  1015	          "required": false,
  1016	          "options": {
  1017	            "max": 100
  1018	          },
  1019	          "description": "Review title"
  1020	        },
  1021	        {
  1022	          "name": "comment",
  1023	          "type": "text",
  1024	          "required": false,
  1025	          "options": {
  1026	            "max": 1000
  1027	          },
  1028	          "description": "Review comment"
  1029	        },
  1030	        {
  1031	          "name": "helpful_votes",
  1032	          "type": "number",
  1033	          "required": false,
  1034	          "options": {
  1035	            "min": 0
  1036	          },
  1037	          "description": "Number of helpful votes"
  1038	        },
  1039	        {
  1040	          "name": "verified_purchase",
  1041	          "type": "bool",
  1042	          "required": false,
  1043	          "description": "Verified attendance/purchase"
  1044	        }
  1045	      ],
  1046	      "listRule": "",
  1047	      "viewRule": "",
  1048	      "createRule": "@request.auth.id != \"\"",
  1049	      "updateRule": "@request.auth.id = reviewer.id",
  1050	      "deleteRule": "@request.auth.id = reviewer.id"
  1051	    }
  1052	  }
  1053	}

========================================

üìÅ FILE: src/services/ApplicationService.js
   Size: 4.5K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/ApplicationService.js - Fix the import and missing methods
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class ApplicationService {
     6	  // Get applications for market organizer
     7	  async getMarketApplications(marketId, filters = {}) {
     8	    try {
     9	      const filterConditions = [`market = "${marketId}"`];
    10	      
    11	      if (filters.status) {
    12	        filterConditions.push(`status = "${filters.status}"`);
    13	      }
    14	
    15	      const result = await pb.collection('applications').getList(
    16	        filters.page || 1,
    17	        filters.perPage || 20,
    18	        {
    19	          filter: filterConditions.join(' && '),
    20	          sort: '-created',
    21	          expand: 'stallholder,stallholder.user,market'
    22	        }
    23	      );
    24	
    25	      return result;
    26	    } catch (error) {
    27	      console.error('Error fetching market applications:', error);
    28	      throw error;
    29	    }
    30	  }
    31	
    32	  // Get applications for stallholder (method that was missing)
    33	  async getStallholderApplications(stallholderId, filters = {}) {
    34	    try {
    35	      const filterConditions = [`stallholder = "${stallholderId}"`];
    36	      
    37	      if (filters.status) {
    38	        filterConditions.push(`status = "${filters.status}"`);
    39	      }
    40	
    41	      const result = await pb.collection('applications').getList(
    42	        filters.page || 1,
    43	        filters.perPage || 20,
    44	        {
    45	          filter: filterConditions.join(' && '),
    46	          sort: '-created',
    47	          expand: 'market,stallholder'
    48	        }
    49	      );
    50	
    51	      return result;
    52	    } catch (error) {
    53	      console.error('Error fetching stallholder applications:', error);
    54	      throw error;
    55	    }
    56	  }
    57	
    58	  // Submit application to market
    59	  async submitApplication(applicationData) {
    60	    try {
    61	      const application = await pb.collection('applications').create({
    62	        ...applicationData,
    63	        status: 'pending',
    64	        payment_status: 'unpaid'
    65	      });
    66	      
    67	      auditLogger.log('application_submitted', pb.authStore.model?.id, {
    68	        applicationId: application.id,
    69	        marketId: applicationData.market,
    70	        stallholderId: applicationData.stallholder
    71	      });
    72	
    73	      return application;
    74	    } catch (error) {
    75	      console.error('Error submitting application:', error);
    76	      throw error;
    77	    }
    78	  }
    79	
    80	  // Update application status
    81	  async updateApplicationStatus(applicationId, status, organizerNotes = '') {
    82	    try {
    83	      const application = await pb.collection('applications').update(applicationId, {
    84	        status,
    85	        organizer_notes: organizerNotes
    86	      });
    87	      
    88	      auditLogger.log('application_status_updated', pb.authStore.model?.id, {
    89	        applicationId,
    90	        newStatus: status
    91	      });
    92	
    93	      return application;
    94	    } catch (error) {
    95	      console.error('Error updating application status:', error);
    96	      throw error;
    97	    }
    98	  }
    99	
   100	  // Get application statistics for market
   101	  async getApplicationStats(marketId) {
   102	    try {
   103	      const applications = await pb.collection('applications').getFullList({
   104	        filter: `market = "${marketId}"`
   105	      });
   106	
   107	      const stats = {
   108	        total: applications.length,
   109	        pending: applications.filter(app => app.status === 'pending').length,
   110	        approved: applications.filter(app => app.status === 'approved').length,
   111	        rejected: applications.filter(app => app.status === 'rejected').length,
   112	        cancelled: applications.filter(app => app.status === 'cancelled').length
   113	      };
   114	
   115	      return stats;
   116	    } catch (error) {
   117	      console.error('Error fetching application stats:', error);
   118	      throw error;
   119	    }
   120	  }
   121	
   122	  // Check if stallholder has existing application for market
   123	  async checkExistingApplication(stallholderId, marketId) {
   124	    try {
   125	      const existing = await pb.collection('applications').getFirstListItem(
   126	        `stallholder = "${stallholderId}" && market = "${marketId}" && status != "cancelled" && status != "rejected"`
   127	      );
   128	      return existing;
   129	    } catch (error) {
   130	      if (error.status === 404) {
   131	        return null; // No existing application
   132	      }
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Cancel application
   138	  async cancelApplication(applicationId) {
   139	    try {
   140	      const application = await pb.collection('applications').update(applicationId, {
   141	        status: 'cancelled'
   142	      });
   143	      
   144	      auditLogger.log('application_cancelled', pb.authStore.model?.id, {
   145	        applicationId
   146	      });
   147	
   148	      return application;
   149	    } catch (error) {
   150	      console.error('Error cancelling application:', error);
   151	      throw error;
   152	    }
   153	  }
   154	}
   155	
   156	export default new ApplicationService();

========================================

üìÅ FILE: src/services/StallholderService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/StallholderService.js - Updated to fix import issues
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	import ApplicationService from './ApplicationService.js';
     5	
     6	class StallholderService {
     7	  // Get all stallholders with filtering
     8	  async getStallholders(filters = {}) {
     9	    try {
    10	      const filterConditions = ['user != ""']; // Changed from 'active = true' since we don't have that field
    11	      
    12	      if (filters.category) {
    13	        filterConditions.push(`product_categories ~ "${filters.category}"`);
    14	      }
    15	      
    16	      if (filters.state) {
    17	        filterConditions.push(`state = "${filters.state}"`);
    18	      }
    19	      
    20	      if (filters.search) {
    21	        filterConditions.push(`(business_name ~ "${filters.search}" || description ~ "${filters.search}")`);
    22	      }
    23	
    24	      if (filters.rating) {
    25	        filterConditions.push(`rating >= ${filters.rating}`);
    26	      }
    27	
    28	      if (filters.user) {
    29	        filterConditions.push(`user = "${filters.user}"`);
    30	      }
    31	
    32	      const result = await pb.collection('stallholders').getList(
    33	        filters.page || 1,
    34	        filters.perPage || 20,
    35	        {
    36	          filter: filterConditions.join(' && '),
    37	          sort: filters.sort || '-created',
    38	          expand: 'user'
    39	        }
    40	      );
    41	
    42	      return result;
    43	    } catch (error) {
    44	      console.error('Error fetching stallholders:', error);
    45	      throw error;
    46	    }
    47	  }
    48	
    49	  // Get single stallholder
    50	  async getStallholder(id) {
    51	    try {
    52	      const stallholder = await pb.collection('stallholders').getOne(id, {
    53	        expand: 'user'
    54	      });
    55	      return stallholder;
    56	    } catch (error) {
    57	      console.error('Error fetching stallholder:', error);
    58	      throw error;
    59	    }
    60	  }
    61	
    62	  // Create stallholder profile
    63	  async createStallholder(stallholderData) {
    64	    try {
    65	      const stallholder = await pb.collection('stallholders').create(stallholderData);
    66	      
    67	      auditLogger.log('stallholder_created', pb.authStore.model?.id, {
    68	        stallholderId: stallholder.id,
    69	        businessName: stallholder.business_name
    70	      });
    71	
    72	      return stallholder;
    73	    } catch (error) {
    74	      console.error('Error creating stallholder:', error);
    75	      throw error;
    76	    }
    77	  }
    78	
    79	  // Update stallholder profile
    80	  async updateStallholder(id, stallholderData) {
    81	    try {
    82	      const stallholder = await pb.collection('stallholders').update(id, stallholderData);
    83	      
    84	      auditLogger.log('stallholder_updated', pb.authStore.model?.id, {
    85	        stallholderId: id,
    86	        changes: Object.keys(stallholderData)
    87	      });
    88	
    89	      return stallholder;
    90	    } catch (error) {
    91	      console.error('Error updating stallholder:', error);
    92	      throw error;
    93	    }
    94	  }
    95	
    96	  // Get stallholder's applications - now properly delegated
    97	  async getApplications(stallholderId, filters = {}) {
    98	    return ApplicationService.getStallholderApplications(stallholderId, filters);
    99	  }
   100	
   101	  // Submit application to market - now properly delegated
   102	  async submitApplication(applicationData) {
   103	    return ApplicationService.submitApplication(applicationData);
   104	  }
   105	
   106	  // Get reviews for stallholder
   107	  async getReviews(stallholderId) {
   108	    try {
   109	      const reviews = await pb.collection('reviews').getList(1, 50, {
   110	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`,
   111	        sort: '-created',
   112	        expand: 'reviewer'
   113	      });
   114	      return reviews;
   115	    } catch (error) {
   116	      console.error('Error fetching reviews:', error);
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  // Add review for stallholder
   122	  async addReview(reviewData) {
   123	    try {
   124	      const review = await pb.collection('reviews').create({
   125	        ...reviewData,
   126	        target_type: 'stallholder'
   127	      });
   128	
   129	      // Update stallholder rating
   130	      await this.updateStallholderRating(reviewData.target_id);
   131	      
   132	      auditLogger.log('review_added', pb.authStore.model?.id, {
   133	        reviewId: review.id,
   134	        targetId: reviewData.target_id,
   135	        rating: reviewData.rating
   136	      });
   137	
   138	      return review;
   139	    } catch (error) {
   140	      console.error('Error adding review:', error);
   141	      throw error;
   142	    }
   143	  }
   144	
   145	  // Update stallholder's average rating
   146	  async updateStallholderRating(stallholderId) {
   147	    try {
   148	      const reviews = await pb.collection('reviews').getFullList({
   149	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`
   150	      });
   151	
   152	      if (reviews.length === 0) return;
   153	
   154	      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
   155	      const averageRating = totalRating / reviews.length;
   156	
   157	      await pb.collection('stallholders').update(stallholderId, {
   158	        rating: Math.round(averageRating * 10) / 10, // Round to 1 decimal
   159	        reviews_count: reviews.length
   160	      });
   161	    } catch (error) {
   162	      console.error('Error updating stallholder rating:', error);
   163	    }
   164	  }
   165	
   166	  // Get product categories
   167	  async getProductCategories() {
   168	    return [
   169	      'Fresh Produce',
   170	      'Baked Goods',
   171	      'Arts & Crafts',
   172	      'Clothing & Accessories',
   173	      'Food & Beverages',
   174	      'Home & Garden',
   175	      'Beauty & Wellness',
   176	      'Books & Media',
   177	      'Vintage & Antiques',
   178	      'Handmade Jewelry',
   179	      'Plants & Flowers',
   180	      'Other'
   181	    ];
   182	  }
   183	}
   184	
   185	export default new StallholderService();

========================================

üìÅ FILE: src/services/marketService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/marketService.js - Updated with better error handling
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class MarketService {
     6	  // Get all active markets
     7	  async getMarkets(filters = {}) {
     8	    try {
     9	      const filterConditions = []; // Removed 'active = true' since the field might not exist yet
    10	      
    11	      if (filters.state) {
    12	        filterConditions.push(`state = "${filters.state}"`);
    13	      }
    14	      
    15	      if (filters.category) {
    16	        filterConditions.push(`category = "${filters.category}"`);
    17	      }
    18	      
    19	      if (filters.search) {
    20	        filterConditions.push(`(name ~ "${filters.search}" || suburb ~ "${filters.search}" || description ~ "${filters.search}")`);
    21	      }
    22	
    23	      const filterString = filterConditions.length > 0 ? filterConditions.join(' && ') : '';
    24	
    25	      const result = await pb.collection('markets').getList(
    26	        filters.page || 1,
    27	        filters.perPage || 20,
    28	        {
    29	          filter: filterString,
    30	          sort: filters.sort || '-created',
    31	          expand: 'category,organizer'
    32	        }
    33	      );
    34	
    35	      return result;
    36	    } catch (error) {
    37	      console.error('Error fetching markets:', error);
    38	      throw error;
    39	    }
    40	  }
    41	
    42	  // Get single market by ID or slug
    43	  async getMarket(idOrSlug) {
    44	    try {
    45	      const market = await pb.collection('markets').getFirstListItem(
    46	        `id = "${idOrSlug}" || slug = "${idOrSlug}"`,
    47	        {
    48	          expand: 'category,organizer'
    49	        }
    50	      );
    51	
    52	      return market;
    53	    } catch (error) {
    54	      console.error('Error fetching market:', error);
    55	      throw error;
    56	    }
    57	  }
    58	
    59	  // Create new market
    60	  async createMarket(marketData) {
    61	    try {
    62	      const market = await pb.collection('markets').create(marketData);
    63	      
    64	      auditLogger.log('market_created', pb.authStore.model?.id, {
    65	        marketId: market.id,
    66	        marketName: market.name
    67	      });
    68	
    69	      return market;
    70	    } catch (error) {
    71	      console.error('Error creating market:', error);
    72	      throw error;
    73	    }
    74	  }
    75	
    76	  // Update market
    77	  async updateMarket(id, marketData) {
    78	    try {
    79	      const market = await pb.collection('markets').update(id, marketData);
    80	      
    81	      auditLogger.log('market_updated', pb.authStore.model?.id, {
    82	        marketId: id,
    83	        changes: Object.keys(marketData)
    84	      });
    85	
    86	      return market;
    87	    } catch (error) {
    88	      console.error('Error updating market:', error);
    89	      throw error;
    90	    }
    91	  }
    92	
    93	  // Delete market
    94	  async deleteMarket(id) {
    95	    try {
    96	      await pb.collection('markets').delete(id);
    97	      
    98	      auditLogger.log('market_deleted', pb.authStore.model?.id, {
    99	        marketId: id
   100	      });
   101	
   102	      return true;
   103	    } catch (error) {
   104	      console.error('Error deleting market:', error);
   105	      throw error;
   106	    }
   107	  }
   108	
   109	  // Search markets by location (geolocation)
   110	  async searchNearby(latitude, longitude, radiusKm = 25) {
   111	    try {
   112	      // This is a simplified version - in production you'd use proper geospatial queries
   113	      const markets = await pb.collection('markets').getList(1, 50, {
   114	        filter: 'latitude != null && longitude != null',
   115	        expand: 'category'
   116	      });
   117	
   118	      // Calculate distances client-side (in production, do this server-side)
   119	      const marketsWithDistance = markets.items.map(market => {
   120	        const distance = this.calculateDistance(
   121	          latitude, longitude,
   122	          market.latitude, market.longitude
   123	        );
   124	        return { ...market, distance };
   125	      });
   126	
   127	      // Filter by radius and sort by distance
   128	      return marketsWithDistance
   129	        .filter(market => market.distance <= radiusKm)
   130	        .sort((a, b) => a.distance - b.distance);
   131	    } catch (error) {
   132	      console.error('Error searching nearby markets:', error);
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Calculate distance between two points (Haversine formula)
   138	  calculateDistance(lat1, lon1, lat2, lon2) {
   139	    const R = 6371; // Earth's radius in kilometers
   140	    const dLat = this.deg2rad(lat2 - lat1);
   141	    const dLon = this.deg2rad(lon2 - lon1);
   142	    const a = 
   143	      Math.sin(dLat/2) * Math.sin(dLat/2) +
   144	      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * 
   145	      Math.sin(dLon/2) * Math.sin(dLon/2);
   146	    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
   147	    return R * c;
   148	  }
   149	
   150	  deg2rad(deg) {
   151	    return deg * (Math.PI/180);
   152	  }
   153	
   154	  // Get market categories - handle case where collection might not exist yet
   155	  async getCategories() {
   156	    try {
   157	      const categories = await pb.collection('market_categories').getFullList({
   158	        sort: 'name'
   159	      });
   160	      return categories;
   161	    } catch (error) {
   162	      console.error('Error fetching categories:', error);
   163	      // Return default categories if collection doesn't exist yet
   164	      return [
   165	        { id: 'farmers', name: 'Farmers Market', color: '#22c55e' },
   166	        { id: 'craft', name: 'Craft & Artisan', color: '#8b5cf6' },
   167	        { id: 'community', name: 'Community Market', color: '#3b82f6' },
   168	        { id: 'specialty', name: 'Specialty Market', color: '#f59e0b' },
   169	        { id: 'food', name: 'Food Market', color: '#ef4444' },
   170	        { id: 'vintage', name: 'Vintage & Antiques', color: '#6b7280' }
   171	      ];
   172	    }
   173	  }
   174	}
   175	
   176	export default new MarketService();

========================================

üìÅ FILE: src/utils/security.js
   Size: 4.3K | Modified: 2025-06-02
----------------------------------------
     1	// Input validation and sanitization
     2	export const validation = {
     3	  // Australian-specific validation
     4	  validateABN(abn) {
     5	    const cleanABN = abn.replace(/\s/g, '');
     6	    if (!/^\d{11}$/.test(cleanABN)) return false;
     7	    
     8	    // ABN checksum validation
     9	    const weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];
    10	    let sum = 0;
    11	    
    12	    for (let i = 0; i < 11; i++) {
    13	      sum += (parseInt(cleanABN[i]) - (i === 0 ? 1 : 0)) * weights[i];
    14	    }
    15	    
    16	    return sum % 89 === 0;
    17	  },
    18	
    19	  validateAustralianPhone(phone) {
    20	    const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
    21	    const australianPhoneRegex = /^(\+61|0)[2-478](?:[0-9]){8}$/;
    22	    return australianPhoneRegex.test(cleanPhone);
    23	  },
    24	
    25	  validatePostcode(postcode) {
    26	    return /^\d{4}$/.test(postcode);
    27	  },
    28	
    29	  validateEmail(email) {
    30	    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    31	    return emailRegex.test(email) && email.length <= 254;
    32	  },
    33	
    34	  // Password strength validation
    35	  validatePassword(password) {
    36	    const minLength = 12;
    37	    const hasUpperCase = /[A-Z]/.test(password);
    38	    const hasLowerCase = /[a-z]/.test(password);
    39	    const hasNumbers = /\d/.test(password);
    40	    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    41	    
    42	    return {
    43	      isValid: password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar,
    44	      length: password.length >= minLength,
    45	      uppercase: hasUpperCase,
    46	      lowercase: hasLowerCase,
    47	      numbers: hasNumbers,
    48	      special: hasSpecialChar,
    49	      score: [hasUpperCase, hasLowerCase, hasNumbers, hasSpecialChar, password.length >= minLength]
    50	        .filter(Boolean).length
    51	    };
    52	  }
    53	};
    54	
    55	// Data sanitization
    56	export const sanitizer = {
    57	  // Remove potentially dangerous characters
    58	  sanitizeInput(input) {
    59	    if (typeof input !== 'string') return input;
    60	    
    61	    return input
    62	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // Remove script tags
    63	      .replace(/javascript:/gi, '') // Remove javascript: URLs
    64	      .replace(/on\w+=/gi, '') // Remove event handlers
    65	      .replace(/[<>]/g, '') // Remove angle brackets
    66	      .trim();
    67	  },
    68	
    69	  // Sanitize HTML content (for descriptions, etc.)
    70	  sanitizeHTML(html) {
    71	    // In production, use a proper HTML sanitizer like DOMPurify
    72	    const allowedTags = ['p', 'br', 'strong', 'em', 'ul', 'ol', 'li', 'h1', 'h2', 'h3'];
    73	    // For now, just remove script tags and dangerous attributes
    74	    return html
    75	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
    76	      .replace(/on\w+="[^"]*"/gi, '')
    77	      .replace(/javascript:/gi, '');
    78	  },
    79	
    80	  // Sanitize file names
    81	  sanitizeFileName(fileName) {
    82	    return fileName
    83	      .replace(/[^a-zA-Z0-9.\-_]/g, '_')
    84	      .replace(/_{2,}/g, '_')
    85	      .substr(0, 255);
    86	  }
    87	};
    88	
    89	// Rate limiting helper
    90	export const rateLimiter = {
    91	  attempts: new Map(),
    92	
    93	  isAllowed(key, limit = 5, windowMs = 15 * 60 * 1000) { // 5 attempts per 15 minutes
    94	    const now = Date.now();
    95	    const userAttempts = this.attempts.get(key) || [];
    96	    
    97	    // Remove old attempts outside the window
    98	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
    99	    
   100	    if (validAttempts.length >= limit) {
   101	      return false;
   102	    }
   103	    
   104	    // Add current attempt
   105	    validAttempts.push(now);
   106	    this.attempts.set(key, validAttempts);
   107	    
   108	    return true;
   109	  },
   110	
   111	  getRemainingAttempts(key, limit = 5, windowMs = 15 * 60 * 1000) {
   112	    const now = Date.now();
   113	    const userAttempts = this.attempts.get(key) || [];
   114	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
   115	    
   116	    return Math.max(0, limit - validAttempts.length);
   117	  }
   118	};
   119	
   120	// Audit logging
   121	export const auditLogger = {
   122	  log(event, userId, details = {}) {
   123	    const auditEntry = {
   124	      event,
   125	      userId,
   126	      details,
   127	      timestamp: new Date().toISOString(),
   128	      userAgent: navigator.userAgent,
   129	      sessionId: sessionStorage.getItem('session_id') || 'no_session'
   130	    };
   131	
   132	    // In development, log to console
   133	    if (import.meta.env.VITE_ENVIRONMENT === 'development') {
   134	      console.log('AUDIT LOG:', auditEntry);
   135	    }
   136	
   137	    // Store in local storage for debugging (remove in production)
   138	    const logs = JSON.parse(localStorage.getItem('audit_logs') || '[]');
   139	    logs.push(auditEntry);
   140	    localStorage.setItem('audit_logs', JSON.stringify(logs.slice(-100))); // Keep last 100
   141	  }
   142	};

========================================

üìÅ FILE: src/App.css
   Size: 606 | Modified: 2025-06-02
----------------------------------------
     1	#root {
     2	  max-width: 1280px;
     3	  margin: 0 auto;
     4	  padding: 2rem;
     5	  text-align: center;
     6	}
     7	
     8	.logo {
     9	  height: 6em;
    10	  padding: 1.5em;
    11	  will-change: filter;
    12	  transition: filter 300ms;
    13	}
    14	.logo:hover {
    15	  filter: drop-shadow(0 0 2em #646cffaa);
    16	}
    17	.logo.react:hover {
    18	  filter: drop-shadow(0 0 2em #61dafbaa);
    19	}
    20	
    21	@keyframes logo-spin {
    22	  from {
    23	    transform: rotate(0deg);
    24	  }
    25	  to {
    26	    transform: rotate(360deg);
    27	  }
    28	}
    29	
    30	@media (prefers-reduced-motion: no-preference) {
    31	  a:nth-of-type(2) .logo {
    32	    animation: logo-spin infinite 20s linear;
    33	  }
    34	}
    35	
    36	.card {
    37	  padding: 2em;
    38	}
    39	
    40	.read-the-docs {
    41	  color: #888;
    42	}

========================================

üìÅ FILE: src/App.jsx
   Size: 3.5K | Modified: 2025-06-03
----------------------------------------
     1	// src/App.jsx - Add CreateMarket route
     2	import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
     3	import { AuthProvider } from './contexts/AuthContext'
     4	import Layout from './components/layout/Layout'
     5	import Home from './pages/Home'
     6	import MarketList from './pages/MarketList'
     7	import MarketDetail from './pages/MarketDetail'
     8	import CreateMarket from './pages/CreateMarket'
     9	import Login from './pages/Login'
    10	import Register from './pages/Register'
    11	import Dashboard from './pages/Dashboard'
    12	import ProtectedRoute from './components/auth/ProtectedRoute'
    13	import './App.css'
    14	
    15	function App() {
    16	  return (
    17	    <AuthProvider>
    18	      <Router>
    19	        <Layout>
    20	          <Routes>
    21	            <Route path="/" element={<Home />} />
    22	            <Route path="/markets" element={<MarketList />} />
    23	            <Route path="/markets/:slug" element={<MarketDetail />} />
    24	            <Route path="/login" element={<Login />} />
    25	            <Route path="/register" element={<Register />} />
    26	            <Route 
    27	              path="/dashboard" 
    28	              element={
    29	                <ProtectedRoute>
    30	                  <Dashboard />
    31	                </ProtectedRoute>
    32	              } 
    33	            />
    34	            <Route 
    35	              path="/markets/create" 
    36	              element={
    37	                <ProtectedRoute requiredRole="organizer">
    38	                  <CreateMarket />
    39	                </ProtectedRoute>
    40	              } 
    41	            />
    42	            {/* Placeholder routes for future features */}
    43	            <Route 
    44	              path="/profile" 
    45	              element={
    46	                <ProtectedRoute>
    47	                  <div className="min-h-screen bg-gray-50 py-8">
    48	                    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    49	                      <h1 className="text-3xl font-bold text-gray-900 mb-4">Profile</h1>
    50	                      <p className="text-gray-600">Profile management coming soon...</p>
    51	                    </div>
    52	                  </div>
    53	                </ProtectedRoute>
    54	              } 
    55	            />
    56	            <Route 
    57	              path="/stallholders" 
    58	              element={
    59	                <div className="min-h-screen bg-gray-50 py-8">
    60	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    61	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Stallholders</h1>
    62	                    <p className="text-gray-600">Stallholder directory coming soon...</p>
    63	                  </div>
    64	                </div>
    65	              } 
    66	            />
    67	            <Route 
    68	              path="/organizers" 
    69	              element={
    70	                <div className="min-h-screen bg-gray-50 py-8">
    71	                  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">For Market Organizers</h1>
    73	                    <p className="text-gray-600">Market organizer tools coming soon...</p>
    74	                  </div>
    75	                </div>
    76	              } 
    77	            />
    78	            <Route 
    79	              path="/about" 
    80	              element={
    81	                <div className="min-h-screen bg-gray-50 py-8">
    82	                  <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    83	                    <h1 className="text-3xl font-bold text-gray-900 mb-4">About SA Markets</h1>
    84	                    <p className="text-gray-600">About page coming soon...</p>
    85	                  </div>
    86	                </div>
    87	              } 
    88	            />
    89	          </Routes>
    90	        </Layout>
    91	      </Router>
    92	    </AuthProvider>
    93	  )
    94	}
    95	
    96	export default App

========================================

üìÅ FILE: src/components/auth/ProtectedRoute.jsx
   Size: 749 | Modified: 2025-06-02
----------------------------------------
     1	// src/components/auth/ProtectedRoute.jsx
     2	import { Navigate, useLocation } from 'react-router-dom'
     3	import { useAuth } from '../../contexts/AuthContext'
     4	
     5	export default function ProtectedRoute({ children, requiredRole = null }) {
     6	  const { user, loading } = useAuth()
     7	  const location = useLocation()
     8	
     9	  if (loading) {
    10	    return (
    11	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    12	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    13	      </div>
    14	    )
    15	  }
    16	
    17	  if (!user) {
    18	    return <Navigate to="/login" state={{ from: location }} replace />
    19	  }
    20	
    21	  if (requiredRole && user.role !== requiredRole) {
    22	    return <Navigate to="/dashboard" replace />
    23	  }
    24	
    25	  return children
    26	}

========================================

üìÅ FILE: src/components/layout/Footer.jsx
   Size: 3.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { MapPin, Mail, Phone, Facebook, Instagram, Twitter } from 'lucide-react'
     3	
     4	export default function Footer() {
     5	  return (
     6	    <footer className="bg-gray-900 text-white">
     7	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
     8	        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
     9	          {/* Brand */}
    10	          <div className="col-span-1 md:col-span-2">
    11	            <div className="flex items-center space-x-2 mb-4">
    12	              <MapPin className="h-8 w-8 text-primary-400" />
    13	              <span className="text-xl font-bold">SA Markets Directory</span>
    14	            </div>
    15	            <p className="text-gray-300 mb-4 max-w-md">
    16	              Connecting communities through vibrant local markets across South Australia. 
    17	              Discover fresh produce, unique crafts, and local businesses in your area.
    18	            </p>
    19	            <div className="flex space-x-4">
    20	              <Facebook className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    21	              <Instagram className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    22	              <Twitter className="h-5 w-5 text-gray-400 hover:text-primary-400 cursor-pointer transition-colors" />
    23	            </div>
    24	          </div>
    25	
    26	          {/* Quick Links */}
    27	          <div>
    28	            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
    29	            <ul className="space-y-2">
    30	              <li><Link to="/markets" className="text-gray-300 hover:text-primary-400 transition-colors">Browse Markets</Link></li>
    31	              <li><Link to="/stallholders" className="text-gray-300 hover:text-primary-400 transition-colors">For Stallholders</Link></li>
    32	              <li><Link to="/organizers" className="text-gray-300 hover:text-primary-400 transition-colors">For Organizers</Link></li>
    33	              <li><Link to="/about" className="text-gray-300 hover:text-primary-400 transition-colors">About Us</Link></li>
    34	              <li><Link to="/contact" className="text-gray-300 hover:text-primary-400 transition-colors">Contact</Link></li>
    35	            </ul>
    36	          </div>
    37	
    38	          {/* Support */}
    39	          <div>
    40	            <h3 className="text-lg font-semibold mb-4">Support</h3>
    41	            <ul className="space-y-2">
    42	              <li><Link to="/help" className="text-gray-300 hover:text-primary-400 transition-colors">Help Center</Link></li>
    43	              <li><Link to="/privacy" className="text-gray-300 hover:text-primary-400 transition-colors">Privacy Policy</Link></li>
    44	              <li><Link to="/terms" className="text-gray-300 hover:text-primary-400 transition-colors">Terms of Service</Link></li>
    45	              <li>
    46	                <div className="flex items-center space-x-2 text-gray-300">
    47	                  <Mail className="h-4 w-4" />
    48	                  <span>hello@samarkets.com.au</span>
    49	                </div>
    50	              </li>
    51	            </ul>
    52	          </div>
    53	        </div>
    54	
    55	        <hr className="border-gray-800 my-8" />
    56	
    57	        <div className="flex flex-col md:flex-row justify-between items-center">
    58	          <p className="text-gray-400 text-sm">
    59	            ¬© 2025 SA Markets Directory. All rights reserved.
    60	          </p>
    61	          <p className="text-gray-400 text-sm mt-2 md:mt-0">
    62	            Built with ‚ù§Ô∏è for Australian communities
    63	          </p>
    64	        </div>
    65	      </div>
    66	    </footer>
    67	  )
    68	}

========================================

üìÅ FILE: src/components/layout/Header.jsx
   Size: 8.6K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/layout/Header.jsx - Updated with Auth Integration
     2	import { useState } from 'react'
     3	import { Link, useNavigate } from 'react-router-dom'
     4	import { Menu, X, MapPin, User, LogOut, Settings } from 'lucide-react'
     5	import { useAuth } from '../../contexts/AuthContext'
     6	
     7	export default function Header() {
     8	  const [isMenuOpen, setIsMenuOpen] = useState(false)
     9	  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
    10	  const { user, logout, isAuthenticated } = useAuth()
    11	  const navigate = useNavigate()
    12	
    13	  const handleLogout = () => {
    14	    logout()
    15	    navigate('/')
    16	    setIsUserMenuOpen(false)
    17	  }
    18	
    19	  const getRoleDisplayName = (role) => {
    20	    switch(role) {
    21	      case 'stallholder': return 'Stallholder'
    22	      case 'organizer': return 'Organizer'
    23	      default: return 'Customer'
    24	    }
    25	  }
    26	
    27	  return (
    28	    <header className="bg-white shadow-sm border-b">
    29	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    30	        <div className="flex justify-between items-center h-16">
    31	          {/* Logo */}
    32	          <Link to="/" className="flex items-center space-x-2">
    33	            <MapPin className="h-8 w-8 text-primary-600" />
    34	            <span className="text-xl font-bold text-gray-900">SA Markets</span>
    35	          </Link>
    36	
    37	          {/* Desktop Navigation */}
    38	          <nav className="hidden md:flex space-x-8">
    39	            <Link to="/markets" className="text-gray-700 hover:text-primary-600 transition-colors">
    40	              Browse Markets
    41	            </Link>
    42	            <Link to="/stallholders" className="text-gray-700 hover:text-primary-600 transition-colors">
    43	              For Stallholders
    44	            </Link>
    45	            <Link to="/organizers" className="text-gray-700 hover:text-primary-600 transition-colors">
    46	              For Organizers
    47	            </Link>
    48	            <Link to="/about" className="text-gray-700 hover:text-primary-600 transition-colors">
    49	              About
    50	            </Link>
    51	          </nav>
    52	
    53	          {/* Desktop Auth Section */}
    54	          <div className="hidden md:flex items-center space-x-4">
    55	            {isAuthenticated ? (
    56	              <div className="relative">
    57	                <button
    58	                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
    59	                  className="flex items-center space-x-2 text-gray-700 hover:text-primary-600 transition-colors"
    60	                >
    61	                  <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
    62	                    <User className="h-5 w-5 text-primary-600" />
    63	                  </div>
    64	                  <span className="font-medium">{user?.name || 'User'}</span>
    65	                </button>
    66	
    67	                {/* User Dropdown Menu */}
    68	                {isUserMenuOpen && (
    69	                  <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
    70	                    <div className="px-4 py-2 border-b border-gray-100">
    71	                      <p className="text-sm font-medium text-gray-900">{user?.name}</p>
    72	                      <p className="text-xs text-gray-500">{user?.email}</p>
    73	                      <span className="inline-block mt-1 px-2 py-1 text-xs bg-primary-100 text-primary-700 rounded-full">
    74	                        {getRoleDisplayName(user?.role)}
    75	                      </span>
    76	                    </div>
    77	                    
    78	                    <Link
    79	                      to="/dashboard"
    80	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    81	                      onClick={() => setIsUserMenuOpen(false)}
    82	                    >
    83	                      <User className="h-4 w-4 mr-3" />
    84	                      Dashboard
    85	                    </Link>
    86	                    
    87	                    <Link
    88	                      to="/profile"
    89	                      className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
    90	                      onClick={() => setIsUserMenuOpen(false)}
    91	                    >
    92	                      <Settings className="h-4 w-4 mr-3" />
    93	                      Profile Settings
    94	                    </Link>
    95	                    
    96	                    <hr className="my-1" />
    97	                    
    98	                    <button
    99	                      onClick={handleLogout}
   100	                      className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50"
   101	                    >
   102	                      <LogOut className="h-4 w-4 mr-3" />
   103	                      Sign Out
   104	                    </button>
   105	                  </div>
   106	                )}
   107	              </div>
   108	            ) : (
   109	              <>
   110	                <Link to="/login" className="text-gray-700 hover:text-primary-600 transition-colors">
   111	                  Log In
   112	                </Link>
   113	                <Link to="/register" className="btn-primary">
   114	                  Sign Up
   115	                </Link>
   116	              </>
   117	            )}
   118	          </div>
   119	
   120	          {/* Mobile menu button */}
   121	          <button
   122	            onClick={() => setIsMenuOpen(!isMenuOpen)}
   123	            className="md:hidden p-2 rounded-md text-gray-700 hover:text-primary-600 hover:bg-gray-100"
   124	          >
   125	            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
   126	          </button>
   127	        </div>
   128	
   129	        {/* Mobile Navigation */}
   130	        {isMenuOpen && (
   131	          <div className="md:hidden py-4 border-t">
   132	            <nav className="flex flex-col space-y-2">
   133	              <Link 
   134	                to="/markets" 
   135	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   136	                onClick={() => setIsMenuOpen(false)}
   137	              >
   138	                Browse Markets
   139	              </Link>
   140	              <Link 
   141	                to="/stallholders" 
   142	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   143	                onClick={() => setIsMenuOpen(false)}
   144	              >
   145	                For Stallholders
   146	              </Link>
   147	              <Link 
   148	                to="/organizers" 
   149	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   150	                onClick={() => setIsMenuOpen(false)}
   151	              >
   152	                For Organizers
   153	              </Link>
   154	              <Link 
   155	                to="/about" 
   156	                className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   157	                onClick={() => setIsMenuOpen(false)}
   158	              >
   159	                About
   160	              </Link>
   161	              
   162	              <hr className="my-2" />
   163	              
   164	              {isAuthenticated ? (
   165	                <>
   166	                  <div className="px-3 py-2">
   167	                    <p className="text-sm font-medium text-gray-900">{user?.name}</p>
   168	                    <p className="text-xs text-gray-500">{getRoleDisplayName(user?.role)}</p>
   169	                  </div>
   170	                  <Link 
   171	                    to="/dashboard" 
   172	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   173	                    onClick={() => setIsMenuOpen(false)}
   174	                  >
   175	                    Dashboard
   176	                  </Link>
   177	                  <Link 
   178	                    to="/profile" 
   179	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   180	                    onClick={() => setIsMenuOpen(false)}
   181	                  >
   182	                    Profile Settings
   183	                  </Link>
   184	                  <button
   185	                    onClick={() => {
   186	                      handleLogout()
   187	                      setIsMenuOpen(false)
   188	                    }}
   189	                    className="px-3 py-2 text-left text-red-600 hover:text-red-500 transition-colors"
   190	                  >
   191	                    Sign Out
   192	                  </button>
   193	                </>
   194	              ) : (
   195	                <>
   196	                  <Link 
   197	                    to="/login" 
   198	                    className="px-3 py-2 text-gray-700 hover:text-primary-600 transition-colors"
   199	                    onClick={() => setIsMenuOpen(false)}
   200	                  >
   201	                    Log In
   202	                  </Link>
   203	                  <Link 
   204	                    to="/register" 
   205	                    className="px-3 py-2 btn-primary text-center mx-3"
   206	                    onClick={() => setIsMenuOpen(false)}
   207	                  >
   208	                    Sign Up
   209	                  </Link>
   210	                </>
   211	              )}
   212	            </nav>
   213	          </div>
   214	        )}
   215	      </div>
   216	      
   217	      {/* Overlay for user menu */}
   218	      {isUserMenuOpen && (
   219	        <div 
   220	          className="fixed inset-0 z-40" 
   221	          onClick={() => setIsUserMenuOpen(false)}
   222	        />
   223	      )}
   224	    </header>
   225	  )
   226	}

========================================

üìÅ FILE: src/components/layout/Layout.jsx
   Size: 287 | Modified: 2025-06-02
----------------------------------------
     1	import Header from './Header'
     2	import Footer from './Footer'
     3	
     4	export default function Layout({ children }) {
     5	  return (
     6	    <div className="min-h-screen flex flex-col">
     7	      <Header />
     8	      <main className="flex-grow">
     9	        {children}
    10	      </main>
    11	      <Footer />
    12	    </div>
    13	  )
    14	}

========================================

üìÅ FILE: src/components/market/AddressInput.jsx
   Size: 12K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/AddressInput.jsx - Google Places Integration
     2	import { useState, useEffect, useRef } from 'react'
     3	import { MapPin, Search, CheckCircle } from 'lucide-react'
     4	
     5	export default function AddressInput({ 
     6	  address, 
     7	  suburb, 
     8	  state, 
     9	  postcode, 
    10	  latitude, 
    11	  longitude,
    12	  onAddressChange 
    13	}) {
    14	  const [inputValue, setInputValue] = useState(address || '')
    15	  const [suggestions, setSuggestions] = useState([])
    16	  const [loading, setLoading] = useState(false)
    17	  const [isManualEntry, setIsManualEntry] = useState(false)
    18	  const [addressComponents, setAddressComponents] = useState({
    19	    address: address || '',
    20	    suburb: suburb || '',
    21	    state: state || 'SA',
    22	    postcode: postcode || '',
    23	    latitude: latitude || null,
    24	    longitude: longitude || null
    25	  })
    26	
    27	  const inputRef = useRef(null)
    28	  const autocompleteService = useRef(null)
    29	  const placesService = useRef(null)
    30	
    31	  useEffect(() => {
    32	    // Initialize Google Places API
    33	    if (window.google && window.google.maps) {
    34	      autocompleteService.current = new window.google.maps.places.AutocompleteService()
    35	      placesService.current = new window.google.maps.places.PlacesService(
    36	        document.createElement('div')
    37	      )
    38	    }
    39	  }, [])
    40	
    41	  useEffect(() => {
    42	    // Load Google Maps API if not already loaded
    43	    if (!window.google) {
    44	      const script = document.createElement('script')
    45	      script.src = `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}&libraries=places`
    46	      script.async = true
    47	      script.defer = true
    48	      script.onload = () => {
    49	        autocompleteService.current = new window.google.maps.places.AutocompleteService()
    50	        placesService.current = new window.google.maps.places.PlacesService(
    51	          document.createElement('div')
    52	        )
    53	      }
    54	      document.head.appendChild(script)
    55	    }
    56	  }, [])
    57	
    58	  const searchPlaces = async (query) => {
    59	    if (!autocompleteService.current || query.length < 3) {
    60	      setSuggestions([])
    61	      return
    62	    }
    63	
    64	    setLoading(true)
    65	    
    66	    const request = {
    67	      input: query,
    68	      componentRestrictions: { country: 'AU' },
    69	      types: ['address', 'establishment'],
    70	      fields: ['place_id', 'formatted_address', 'geometry', 'address_components']
    71	    }
    72	
    73	    autocompleteService.current.getPlacePredictions(request, (predictions, status) => {
    74	      setLoading(false)
    75	      if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {
    76	        setSuggestions(predictions.slice(0, 5))
    77	      } else {
    78	        setSuggestions([])
    79	      }
    80	    })
    81	  }
    82	
    83	  const selectPlace = (placeId) => {
    84	    if (!placesService.current) return
    85	
    86	    const request = {
    87	      placeId: placeId,
    88	      fields: ['formatted_address', 'geometry', 'address_components']
    89	    }
    90	
    91	    placesService.current.getDetails(request, (place, status) => {
    92	      if (status === window.google.maps.places.PlacesServiceStatus.OK && place) {
    93	        parseGooglePlace(place)
    94	        setSuggestions([])
    95	      }
    96	    })
    97	  }
    98	
    99	  const parseGooglePlace = (place) => {
   100	    const components = place.address_components
   101	    let parsedAddress = {
   102	      address: '',
   103	      suburb: '',
   104	      state: 'SA',
   105	      postcode: '',
   106	      latitude: place.geometry?.location?.lat() || null,
   107	      longitude: place.geometry?.location?.lng() || null
   108	    }
   109	
   110	    // Extract street number and route for address
   111	    const streetNumber = components.find(c => c.types.includes('street_number'))?.long_name || ''
   112	    const route = components.find(c => c.types.includes('route'))?.long_name || ''
   113	    parsedAddress.address = `${streetNumber} ${route}`.trim()
   114	
   115	    // Extract suburb
   116	    const locality = components.find(c => 
   117	      c.types.includes('locality') || 
   118	      c.types.includes('sublocality') ||
   119	      c.types.includes('administrative_area_level_2')
   120	    )
   121	    parsedAddress.suburb = locality?.long_name || ''
   122	
   123	    // Extract state
   124	    const stateComponent = components.find(c => c.types.includes('administrative_area_level_1'))
   125	    if (stateComponent) {
   126	      const stateName = stateComponent.short_name
   127	      const stateMap = {
   128	        'NSW': 'NSW', 'VIC': 'VIC', 'QLD': 'QLD', 'SA': 'SA',
   129	        'WA': 'WA', 'TAS': 'TAS', 'NT': 'NT', 'ACT': 'ACT'
   130	      }
   131	      parsedAddress.state = stateMap[stateName] || 'SA'
   132	    }
   133	
   134	    // Extract postcode
   135	    const postcodeComponent = components.find(c => c.types.includes('postal_code'))
   136	    parsedAddress.postcode = postcodeComponent?.long_name || ''
   137	
   138	    setAddressComponents(parsedAddress)
   139	    setInputValue(place.formatted_address)
   140	    onAddressChange(parsedAddress)
   141	  }
   142	
   143	  const handleInputChange = (e) => {
   144	    const value = e.target.value
   145	    setInputValue(value)
   146	    
   147	    if (!isManualEntry) {
   148	      searchPlaces(value)
   149	    }
   150	  }
   151	
   152	  const handleManualEntry = () => {
   153	    setIsManualEntry(true)
   154	    setSuggestions([])
   155	    setInputValue('')
   156	  }
   157	
   158	  const handleManualChange = (field, value) => {
   159	    const updated = { ...addressComponents, [field]: value }
   160	    setAddressComponents(updated)
   161	    onAddressChange(updated)
   162	  }
   163	
   164	  const validateAustralianPostcode = (postcode) => {
   165	    return /^[0-9]{4}$/.test(postcode)
   166	  }
   167	
   168	  return (
   169	    <div className="space-y-4">
   170	      <div className="flex items-center justify-between">
   171	        <label className="block text-sm font-medium text-gray-700">
   172	          Market Address *
   173	        </label>
   174	        <button
   175	          type="button"
   176	          onClick={handleManualEntry}
   177	          className="text-sm text-primary-600 hover:text-primary-500"
   178	        >
   179	          Enter manually
   180	        </button>
   181	      </div>
   182	
   183	      {!isManualEntry ? (
   184	        /* Google Places Autocomplete */
   185	        <div className="relative">
   186	          <div className="relative">
   187	            <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   188	            <input
   189	              ref={inputRef}
   190	              type="text"
   191	              value={inputValue}
   192	              onChange={handleInputChange}
   193	              placeholder="Start typing the market address..."
   194	              className="input-field pl-10 pr-10"
   195	              autoComplete="off"
   196	            />
   197	            {loading && (
   198	              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
   199	                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
   200	              </div>
   201	            )}
   202	          </div>
   203	
   204	          {/* Suggestions Dropdown */}
   205	          {suggestions.length > 0 && (
   206	            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
   207	              {suggestions.map((suggestion) => (
   208	                <button
   209	                  key={suggestion.place_id}
   210	                  type="button"
   211	                  onClick={() => selectPlace(suggestion.place_id)}
   212	                  className="w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 first:rounded-t-lg last:rounded-b-lg"
   213	                >
   214	                  <div className="flex items-start">
   215	                    <MapPin className="h-4 w-4 text-gray-400 mt-1 mr-3 flex-shrink-0" />
   216	                    <div>
   217	                      <div className="font-medium text-gray-900 text-sm">
   218	                        {suggestion.structured_formatting?.main_text}
   219	                      </div>
   220	                      <div className="text-xs text-gray-500">
   221	                        {suggestion.structured_formatting?.secondary_text}
   222	                      </div>
   223	                    </div>
   224	                  </div>
   225	                </button>
   226	              ))}
   227	            </div>
   228	          )}
   229	
   230	          {/* Address Confirmation */}
   231	          {addressComponents.address && !loading && (
   232	            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
   233	              <div className="flex items-start">
   234	                <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 mr-2 flex-shrink-0" />
   235	                <div className="text-sm">
   236	                  <div className="font-medium text-green-800">Address confirmed:</div>
   237	                  <div className="text-green-700">
   238	                    {addressComponents.address}<br />
   239	                    {addressComponents.suburb}, {addressComponents.state} {addressComponents.postcode}
   240	                  </div>
   241	                  {addressComponents.latitude && (
   242	                    <div className="text-xs text-green-600 mt-1">
   243	                      Coordinates: {addressComponents.latitude.toFixed(6)}, {addressComponents.longitude.toFixed(6)}
   244	                    </div>
   245	                  )}
   246	                </div>
   247	              </div>
   248	            </div>
   249	          )}
   250	        </div>
   251	      ) : (
   252	        /* Manual Entry Form */
   253	        <div className="space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
   254	          <div className="flex items-center justify-between">
   255	            <h4 className="font-medium text-gray-900">Manual Address Entry</h4>
   256	            <button
   257	              type="button"
   258	              onClick={() => setIsManualEntry(false)}
   259	              className="text-sm text-primary-600 hover:text-primary-500"
   260	            >
   261	              Use address lookup
   262	            </button>
   263	          </div>
   264	
   265	          <div className="grid grid-cols-1 gap-4">
   266	            <div>
   267	              <label className="block text-sm font-medium text-gray-700 mb-1">
   268	                Street Address *
   269	              </label>
   270	              <input
   271	                type="text"
   272	                value={addressComponents.address}
   273	                onChange={(e) => handleManualChange('address', e.target.value)}
   274	                placeholder="123 Market Street"
   275	                className="input-field"
   276	                required
   277	              />
   278	            </div>
   279	
   280	            <div className="grid grid-cols-2 gap-4">
   281	              <div>
   282	                <label className="block text-sm font-medium text-gray-700 mb-1">
   283	                  Suburb *
   284	                </label>
   285	                <input
   286	                  type="text"
   287	                  value={addressComponents.suburb}
   288	                  onChange={(e) => handleManualChange('suburb', e.target.value)}
   289	                  placeholder="Adelaide"
   290	                  className="input-field"
   291	                  required
   292	                />
   293	              </div>
   294	
   295	              <div>
   296	                <label className="block text-sm font-medium text-gray-700 mb-1">
   297	                  State *
   298	                </label>
   299	                <select
   300	                  value={addressComponents.state}
   301	                  onChange={(e) => handleManualChange('state', e.target.value)}
   302	                  className="input-field"
   303	                  required
   304	                >
   305	                  <option value="SA">South Australia</option>
   306	                  <option value="VIC">Victoria</option>
   307	                  <option value="NSW">New South Wales</option>
   308	                  <option value="QLD">Queensland</option>
   309	                  <option value="WA">Western Australia</option>
   310	                  <option value="TAS">Tasmania</option>
   311	                  <option value="NT">Northern Territory</option>
   312	                  <option value="ACT">ACT</option>
   313	                </select>
   314	              </div>
   315	            </div>
   316	
   317	            <div className="w-32">
   318	              <label className="block text-sm font-medium text-gray-700 mb-1">
   319	                Postcode *
   320	              </label>
   321	              <input
   322	                type="text"
   323	                value={addressComponents.postcode}
   324	                onChange={(e) => handleManualChange('postcode', e.target.value)}
   325	                placeholder="5000"
   326	                pattern="[0-9]{4}"
   327	                maxLength="4"
   328	                className={`input-field ${
   329	                  addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode)
   330	                    ? 'border-red-300'
   331	                    : ''
   332	                }`}
   333	                required
   334	              />
   335	              {addressComponents.postcode && !validateAustralianPostcode(addressComponents.postcode) && (
   336	                <p className="mt-1 text-sm text-red-600">Please enter a valid 4-digit Australian postcode</p>
   337	              )}
   338	            </div>
   339	          </div>
   340	        </div>
   341	      )}
   342	    </div>
   343	  )
   344	}

========================================

üìÅ FILE: src/components/market/FlexibleFrequencySelector.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/FlexibleFrequencySelector.jsx
     2	import { useState, useEffect } from 'react'
     3	import { Calendar, Plus, X, Clock, Repeat } from 'lucide-react'
     4	
     5	export default function FlexibleFrequencySelector({ 
     6	  frequencyType, 
     7	  frequencyValue, 
     8	  frequencyDetails, 
     9	  onChange 
    10	}) {
    11	  const [localType, setLocalType] = useState(frequencyType || 'regular')
    12	  const [localValue, setLocalValue] = useState(frequencyValue || '')
    13	  const [localDetails, setLocalDetails] = useState(frequencyDetails || {})
    14	
    15	  useEffect(() => {
    16	    onChange({
    17	      frequencyType: localType,
    18	      frequencyValue: localValue,
    19	      frequencyDetails: localDetails
    20	    })
    21	  }, [localType, localValue, localDetails, onChange])
    22	
    23	  const handleTypeChange = (type) => {
    24	    setLocalType(type)
    25	    setLocalValue('')
    26	    setLocalDetails({})
    27	  }
    28	
    29	  const regularOptions = [
    30	    { value: 'daily', label: 'Daily', description: 'Every day' },
    31	    { value: 'weekly', label: 'Weekly', description: 'Every week' },
    32	    { value: 'fortnightly', label: 'Fortnightly', description: 'Every 2 weeks' },
    33	    { value: 'monthly', label: 'Monthly', description: 'Every month' }
    34	  ]
    35	
    36	  const weekDays = [
    37	    { value: 0, short: 'Sun', full: 'Sunday' },
    38	    { value: 1, short: 'Mon', full: 'Monday' },
    39	    { value: 2, short: 'Tue', full: 'Tuesday' },
    40	    { value: 3, short: 'Wed', full: 'Wednesday' },
    41	    { value: 4, short: 'Thu', full: 'Thursday' },
    42	    { value: 5, short: 'Fri', full: 'Friday' },
    43	    { value: 6, short: 'Sat', full: 'Saturday' }
    44	  ]
    45	
    46	  const weekNumbers = [
    47	    { value: 1, label: '1st' },
    48	    { value: 2, label: '2nd' },
    49	    { value: 3, label: '3rd' },
    50	    { value: 4, label: '4th' },
    51	    { value: -1, label: 'Last' }
    52	  ]
    53	
    54	  const handleMonthlyPatternChange = (weekNumber, dayOfWeek) => {
    55	    setLocalDetails({
    56	      weekNumber,
    57	      dayOfWeek,
    58	      description: `${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`
    59	    })
    60	    setLocalValue(`${weekNumbers.find(w => w.value === weekNumber)?.label} ${weekDays.find(d => d.value === dayOfWeek)?.full}`)
    61	  }
    62	
    63	  const handleWeeklyPatternChange = (selectedDays) => {
    64	    const dayNames = selectedDays.map(day => weekDays.find(d => d.value === day)?.short).join(', ')
    65	    setLocalDetails({ selectedDays, dayNames })
    66	    setLocalValue(`Weekly: ${dayNames}`)
    67	  }
    68	
    69	  const addCustomDate = () => {
    70	    const newDate = prompt('Enter date (YYYY-MM-DD):')
    71	    if (newDate && /^\d{4}-\d{2}-\d{2}$/.test(newDate)) {
    72	      const currentDates = localDetails.customDates || []
    73	      setLocalDetails({
    74	        ...localDetails,
    75	        customDates: [...currentDates, newDate].sort()
    76	      })
    77	      setLocalValue(`${currentDates.length + 1} custom dates`)
    78	    }
    79	  }
    80	
    81	  const removeCustomDate = (dateToRemove) => {
    82	    const updatedDates = (localDetails.customDates || []).filter(date => date !== dateToRemove)
    83	    setLocalDetails({
    84	      ...localDetails,
    85	      customDates: updatedDates
    86	    })
    87	    setLocalValue(`${updatedDates.length} custom dates`)
    88	  }
    89	
    90	  return (
    91	    <div className="space-y-6">
    92	      {/* Type Selection */}
    93	      <div>
    94	        <label className="block text-sm font-medium text-gray-700 mb-3">
    95	          How often does your market run?
    96	        </label>
    97	        <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
    98	          <button
    99	            type="button"
   100	            onClick={() => handleTypeChange('regular')}
   101	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   102	              localType === 'regular'
   103	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   104	                : 'border-gray-200 hover:border-gray-300'
   105	            }`}
   106	          >
   107	            <div className="flex items-center">
   108	              <Repeat className="h-5 w-5 mr-3" />
   109	              <div>
   110	                <div className="font-medium">Regular</div>
   111	                <div className="text-sm text-gray-500">Daily, weekly, etc.</div>
   112	              </div>
   113	            </div>
   114	          </button>
   115	
   116	          <button
   117	            type="button"
   118	            onClick={() => handleTypeChange('weekly_pattern')}
   119	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   120	              localType === 'weekly_pattern'
   121	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   122	                : 'border-gray-200 hover:border-gray-300'
   123	            }`}
   124	          >
   125	            <div className="flex items-center">
   126	              <Calendar className="h-5 w-5 mr-3" />
   127	              <div>
   128	                <div className="font-medium">Weekly Pattern</div>
   129	                <div className="text-sm text-gray-500">Specific days each week</div>
   130	              </div>
   131	            </div>
   132	          </button>
   133	
   134	          <button
   135	            type="button"
   136	            onClick={() => handleTypeChange('monthly_pattern')}
   137	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   138	              localType === 'monthly_pattern'
   139	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   140	                : 'border-gray-200 hover:border-gray-300'
   141	            }`}
   142	          >
   143	            <div className="flex items-center">
   144	              <Calendar className="h-5 w-5 mr-3" />
   145	              <div>
   146	                <div className="font-medium">Monthly Pattern</div>
   147	                <div className="text-sm text-gray-500">3rd Wednesday, etc.</div>
   148	              </div>
   149	            </div>
   150	          </button>
   151	
   152	          <button
   153	            type="button"
   154	            onClick={() => handleTypeChange('custom_dates')}
   155	            className={`p-4 border-2 rounded-lg text-left transition-colors ${
   156	              localType === 'custom_dates'
   157	                ? 'border-primary-500 bg-primary-50 text-primary-700'
   158	                : 'border-gray-200 hover:border-gray-300'
   159	            }`}
   160	          >
   161	            <div className="flex items-center">
   162	              <Clock className="h-5 w-5 mr-3" />
   163	              <div>
   164	                <div className="font-medium">Custom Dates</div>
   165	                <div className="text-sm text-gray-500">Specific dates only</div>
   166	              </div>
   167	            </div>
   168	          </button>
   169	        </div>
   170	      </div>
   171	
   172	      {/* Regular Pattern */}
   173	      {localType === 'regular' && (
   174	        <div>
   175	          <label className="block text-sm font-medium text-gray-700 mb-3">
   176	            Select frequency
   177	          </label>
   178	          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
   179	            {regularOptions.map((option) => (
   180	              <button
   181	                key={option.value}
   182	                type="button"
   183	                onClick={() => setLocalValue(option.value)}
   184	                className={`p-3 border-2 rounded-lg text-center transition-colors ${
   185	                  localValue === option.value
   186	                    ? 'border-primary-500 bg-primary-50 text-primary-700'
   187	                    : 'border-gray-200 hover:border-gray-300'
   188	                }`}
   189	              >
   190	                <div className="font-medium">{option.label}</div>
   191	                <div className="text-xs text-gray-500">{option.description}</div>
   192	              </button>
   193	            ))}
   194	          </div>
   195	        </div>
   196	      )}
   197	
   198	      {/* Weekly Pattern */}
   199	      {localType === 'weekly_pattern' && (
   200	        <div>
   201	          <label className="block text-sm font-medium text-gray-700 mb-3">
   202	            Select which days of the week
   203	          </label>
   204	          <div className="grid grid-cols-7 gap-2">
   205	            {weekDays.map((day) => {
   206	              const selectedDays = localDetails.selectedDays || []
   207	              const isSelected = selectedDays.includes(day.value)
   208	              
   209	              return (
   210	                <button
   211	                  key={day.value}
   212	                  type="button"
   213	                  onClick={() => {
   214	                    const newSelected = isSelected 
   215	                      ? selectedDays.filter(d => d !== day.value)
   216	                      : [...selectedDays, day.value].sort()
   217	                    handleWeeklyPatternChange(newSelected)
   218	                  }}
   219	                  className={`p-3 border-2 rounded-lg text-center transition-colors ${
   220	                    isSelected
   221	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   222	                      : 'border-gray-200 hover:border-gray-300'
   223	                  }`}
   224	                >
   225	                  <div className="font-medium text-sm">{day.short}</div>
   226	                </button>
   227	              )
   228	            })}
   229	          </div>
   230	          {localDetails.selectedDays?.length > 0 && (
   231	            <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   232	              Market runs: {localDetails.dayNames}
   233	            </div>
   234	          )}
   235	        </div>
   236	      )}
   237	
   238	      {/* Monthly Pattern */}
   239	      {localType === 'monthly_pattern' && (
   240	        <div className="space-y-4">
   241	          <label className="block text-sm font-medium text-gray-700">
   242	            Select which week and day of the month
   243	          </label>
   244	          
   245	          <div>
   246	            <div className="text-sm text-gray-600 mb-2">Week of the month:</div>
   247	            <div className="grid grid-cols-5 gap-2">
   248	              {weekNumbers.map((week) => (
   249	                <button
   250	                  key={week.value}
   251	                  type="button"
   252	                  onClick={() => handleMonthlyPatternChange(week.value, localDetails.dayOfWeek || 0)}
   253	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   254	                    localDetails.weekNumber === week.value
   255	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   256	                      : 'border-gray-200 hover:border-gray-300'
   257	                  }`}
   258	                >
   259	                  <div className="font-medium text-sm">{week.label}</div>
   260	                </button>
   261	              ))}
   262	            </div>
   263	          </div>
   264	
   265	          <div>
   266	            <div className="text-sm text-gray-600 mb-2">Day of the week:</div>
   267	            <div className="grid grid-cols-7 gap-2">
   268	              {weekDays.map((day) => (
   269	                <button
   270	                  key={day.value}
   271	                  type="button"
   272	                  onClick={() => handleMonthlyPatternChange(localDetails.weekNumber || 1, day.value)}
   273	                  className={`p-2 border-2 rounded-lg text-center transition-colors ${
   274	                    localDetails.dayOfWeek === day.value
   275	                      ? 'border-primary-500 bg-primary-50 text-primary-700'
   276	                      : 'border-gray-200 hover:border-gray-300'
   277	                  }`}
   278	                >
   279	                  <div className="font-medium text-sm">{day.short}</div>
   280	                </button>
   281	              ))}
   282	            </div>
   283	          </div>
   284	
   285	          {localDetails.description && (
   286	            <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   287	              Market runs: {localDetails.description} of each month
   288	            </div>
   289	          )}
   290	        </div>
   291	      )}
   292	
   293	      {/* Custom Dates */}
   294	      {localType === 'custom_dates' && (
   295	        <div className="space-y-4">
   296	          <div className="flex items-center justify-between">
   297	            <label className="block text-sm font-medium text-gray-700">
   298	              Custom market dates
   299	            </label>
   300	            <button
   301	              type="button"
   302	              onClick={addCustomDate}
   303	              className="flex items-center px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700"
   304	            >
   305	              <Plus className="h-4 w-4 mr-1" />
   306	              Add Date
   307	            </button>
   308	          </div>
   309	
   310	          {localDetails.customDates?.length > 0 ? (
   311	            <div className="space-y-2">
   312	              {localDetails.customDates.map((date, index) => (
   313	                <div key={index} className="flex items-center justify-between p-2 border border-gray-200 rounded">
   314	                  <span className="text-sm">{new Date(date).toLocaleDateString()}</span>
   315	                  <button
   316	                    type="button"
   317	                    onClick={() => removeCustomDate(date)}
   318	                    className="text-red-500 hover:text-red-700"
   319	                  >
   320	                    <X className="h-4 w-4" />
   321	                  </button>
   322	                </div>
   323	              ))}
   324	            </div>
   325	          ) : (
   326	            <div className="p-4 bg-gray-50 border border-gray-200 rounded text-center text-gray-500">
   327	              No custom dates added yet. Click "Add Date" to specify when your market runs.
   328	            </div>
   329	          )}
   330	        </div>
   331	      )}
   332	
   333	      {/* Current Selection Summary */}
   334	      {localValue && (
   335	        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
   336	          <div className="flex items-center text-blue-800">
   337	            <Calendar className="h-5 w-5 mr-2" />
   338	            <div>
   339	              <div className="font-medium">Market Schedule:</div>
   340	              <div className="text-sm">{localValue}</div>
   341	              {localType === 'custom_dates' && localDetails.customDates?.length > 0 && (
   342	                <div className="text-xs mt-1">
   343	                  Next date: {new Date(Math.min(...localDetails.customDates.map(d => new Date(d)))).toLocaleDateString()}
   344	                </div>
   345	              )}
   346	            </div>
   347	          </div>
   348	        </div>
   349	      )}
   350	    </div>
   351	  )
   352	}

========================================

üìÅ FILE: src/components/market/TimeInput.jsx
   Size: 4.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/components/market/TimeInput.jsx
     2	import { useState } from 'react'
     3	import { Clock } from 'lucide-react'
     4	
     5	export default function TimeInput({ 
     6	  startTime, 
     7	  endTime, 
     8	  onStartTimeChange, 
     9	  onEndTimeChange,
    10	  error 
    11	}) {
    12	  const [timeError, setTimeError] = useState('')
    13	
    14	  const validateTimes = (start, end) => {
    15	    if (!start || !end) return ''
    16	    
    17	    const startMinutes = timeToMinutes(start)
    18	    const endMinutes = timeToMinutes(end)
    19	    
    20	    if (startMinutes >= endMinutes) {
    21	      return 'End time must be after start time'
    22	    }
    23	    
    24	    const duration = endMinutes - startMinutes
    25	    if (duration < 60) { // Less than 1 hour
    26	      return 'Market should run for at least 1 hour'
    27	    }
    28	    
    29	    if (duration > 720) { // More than 12 hours
    30	      return 'Market duration seems unusually long'
    31	    }
    32	    
    33	    return ''
    34	  }
    35	
    36	  const timeToMinutes = (time) => {
    37	    const [hours, minutes] = time.split(':').map(Number)
    38	    return hours * 60 + minutes
    39	  }
    40	
    41	  const formatDuration = (start, end) => {
    42	    if (!start || !end) return ''
    43	    
    44	    const startMinutes = timeToMinutes(start)
    45	    const endMinutes = timeToMinutes(end)
    46	    const duration = endMinutes - startMinutes
    47	    
    48	    const hours = Math.floor(duration / 60)
    49	    const mins = duration % 60
    50	    
    51	    return `${hours}h ${mins > 0 ? `${mins}m` : ''}`
    52	  }
    53	
    54	  const handleStartChange = (value) => {
    55	    onStartTimeChange(value)
    56	    const error = validateTimes(value, endTime)
    57	    setTimeError(error)
    58	  }
    59	
    60	  const handleEndChange = (value) => {
    61	    onEndTimeChange(value)
    62	    const error = validateTimes(startTime, value)
    63	    setTimeError(error)
    64	  }
    65	
    66	  const quickTimeOptions = [
    67	    { label: 'Early Morning', start: '06:00', end: '10:00' },
    68	    { label: 'Morning Market', start: '08:00', end: '12:00' },
    69	    { label: 'Weekend Market', start: '08:00', end: '14:00' },
    70	    { label: 'Afternoon Market', start: '14:00', end: '18:00' },
    71	    { label: 'Evening Market', start: '16:00', end: '20:00' }
    72	  ]
    73	
    74	  const setQuickTime = (start, end) => {
    75	    handleStartChange(start)
    76	    handleEndChange(end)
    77	  }
    78	
    79	  return (
    80	    <div className="space-y-4">
    81	      <label className="block text-sm font-medium text-gray-700">
    82	        Operating Hours *
    83	      </label>
    84	
    85	      {/* Quick Time Presets */}
    86	      <div>
    87	        <div className="text-sm text-gray-600 mb-2">Quick presets:</div>
    88	        <div className="flex flex-wrap gap-2">
    89	          {quickTimeOptions.map((option) => (
    90	            <button
    91	              key={option.label}
    92	              type="button"
    93	              onClick={() => setQuickTime(option.start, option.end)}
    94	              className="px-3 py-1 text-xs border border-gray-300 rounded-full hover:bg-gray-50 transition-colors"
    95	            >
    96	              {option.label}
    97	            </button>
    98	          ))}
    99	        </div>
   100	      </div>
   101	
   102	      {/* Time Inputs */}
   103	      <div className="grid grid-cols-2 gap-4">
   104	        <div>
   105	          <label className="block text-xs font-medium text-gray-600 mb-1">
   106	            Start Time
   107	          </label>
   108	          <div className="relative">
   109	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   110	            <input
   111	              type="time"
   112	              value={startTime}
   113	              onChange={(e) => handleStartChange(e.target.value)}
   114	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   115	              required
   116	            />
   117	          </div>
   118	        </div>
   119	
   120	        <div>
   121	          <label className="block text-xs font-medium text-gray-600 mb-1">
   122	            End Time
   123	          </label>
   124	          <div className="relative">
   125	            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
   126	            <input
   127	              type="time"
   128	              value={endTime}
   129	              onChange={(e) => handleEndChange(e.target.value)}
   130	              className={`input-field pl-10 ${timeError ? 'border-red-300' : ''}`}
   131	              required
   132	            />
   133	          </div>
   134	        </div>
   135	      </div>
   136	
   137	      {/* Duration Display */}
   138	      {startTime && endTime && !timeError && (
   139	        <div className="p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700">
   140	          Duration: {formatDuration(startTime, endTime)}
   141	        </div>
   142	      )}
   143	
   144	      {/* Error Display */}
   145	      {(timeError || error) && (
   146	        <div className="text-sm text-red-600">
   147	          {timeError || error}
   148	        </div>
   149	      )}
   150	    </div>
   151	  )
   152	}

========================================

üìÅ FILE: src/contexts/AuthContext.jsx
   Size: 2.5K | Modified: 2025-06-02
----------------------------------------
     1	import React, { createContext, useContext, useState, useEffect } from 'react';
     2	import pb, { auth, handlePocketBaseError } from '../lib/pocketbase';
     3	
     4	const AuthContext = createContext({});
     5	
     6	export const useAuth = () => {
     7	  const context = useContext(AuthContext);
     8	  if (!context) {
     9	    throw new Error('useAuth must be used within an AuthProvider');
    10	  }
    11	  return context;
    12	};
    13	
    14	export const AuthProvider = ({ children }) => {
    15	  const [user, setUser] = useState(null);
    16	  const [loading, setLoading] = useState(true);
    17	  const [error, setError] = useState(null);
    18	
    19	  useEffect(() => {
    20	    if (pb.authStore.isValid) {
    21	      setUser(pb.authStore.model);
    22	    }
    23	    setLoading(false);
    24	
    25	    const unsubscribe = pb.authStore.onChange((token, model) => {
    26	      setUser(model);
    27	    });
    28	
    29	    return unsubscribe;
    30	  }, []);
    31	
    32	  const login = async (email, password) => {
    33	    try {
    34	      setLoading(true);
    35	      setError(null);
    36	      
    37	      const authData = await auth.login(email, password);
    38	      setUser(authData.record);
    39	      
    40	      return authData;
    41	    } catch (err) {
    42	      const errorData = handlePocketBaseError(err);
    43	      setError(errorData);
    44	      throw errorData;
    45	    } finally {
    46	      setLoading(false);
    47	    }
    48	  };
    49	
    50	  const register = async (userData) => {
    51	    try {
    52	      setLoading(true);
    53	      setError(null);
    54	      
    55	      const user = await auth.register({
    56	        ...userData,
    57	        emailVisibility: true,
    58	        passwordConfirm: userData.password
    59	      });
    60	
    61	      const authData = await auth.login(userData.email, userData.password);
    62	      setUser(authData.record);
    63	      
    64	      return authData;
    65	    } catch (err) {
    66	      const errorData = handlePocketBaseError(err);
    67	      setError(errorData);
    68	      throw errorData;
    69	    } finally {
    70	      setLoading(false);
    71	    }
    72	  };
    73	
    74	  const logout = () => {
    75	    auth.logout();
    76	    setUser(null);
    77	    setError(null);
    78	  };
    79	
    80	  const updateProfile = async (userData) => {
    81	    try {
    82	      setLoading(true);
    83	      setError(null);
    84	      
    85	      const updatedUser = await pb.collection('users').update(user.id, userData);
    86	      setUser(updatedUser);
    87	      
    88	      return updatedUser;
    89	    } catch (err) {
    90	      const errorData = handlePocketBaseError(err);
    91	      setError(errorData);
    92	      throw errorData;
    93	    } finally {
    94	      setLoading(false);
    95	    }
    96	  };
    97	
    98	  const value = {
    99	    user,
   100	    loading,
   101	    error,
   102	    login,
   103	    register,
   104	    logout,
   105	    updateProfile,
   106	    isAuthenticated: !!user
   107	  };
   108	
   109	  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
   110	};

========================================

üìÅ FILE: src/hooks/useApplications.js
   Size: 1.9K | Modified: 2025-06-02
----------------------------------------
     1	// src/hooks/useApplications.js - Fixed import
     2	import { useState, useEffect } from 'react';
     3	import ApplicationService from '../services/ApplicationService.js';
     4	
     5	export const useApplications = (stallholderId, filters = {}) => {
     6	  const [applications, setApplications] = useState([]);
     7	  const [loading, setLoading] = useState(true);
     8	  const [error, setError] = useState(null);
     9	  const [pagination, setPagination] = useState(null);
    10	
    11	  useEffect(() => {
    12	    if (stallholderId) {
    13	      fetchApplications();
    14	    }
    15	  }, [stallholderId, filters]);
    16	
    17	  const fetchApplications = async () => {
    18	    try {
    19	      setLoading(true);
    20	      const result = await ApplicationService.getStallholderApplications(stallholderId, filters);
    21	      setApplications(result.items);
    22	      setPagination({
    23	        page: result.page,
    24	        perPage: result.perPage,
    25	        totalItems: result.totalItems,
    26	        totalPages: result.totalPages
    27	      });
    28	    } catch (err) {
    29	      setError(err.message);
    30	    } finally {
    31	      setLoading(false);
    32	    }
    33	  };
    34	
    35	  const submitApplication = async (applicationData) => {
    36	    try {
    37	      const newApplication = await ApplicationService.submitApplication(applicationData);
    38	      setApplications(prev => [newApplication, ...prev]);
    39	      return newApplication;
    40	    } catch (err) {
    41	      setError(err.message);
    42	      throw err;
    43	    }
    44	  };
    45	
    46	  const cancelApplication = async (applicationId) => {
    47	    try {
    48	      await ApplicationService.cancelApplication(applicationId);
    49	      setApplications(prev => 
    50	        prev.map(app => 
    51	          app.id === applicationId 
    52	            ? { ...app, status: 'cancelled' }
    53	            : app
    54	        )
    55	      );
    56	    } catch (err) {
    57	      setError(err.message);
    58	      throw err;
    59	    }
    60	  };
    61	
    62	  return {
    63	    applications,
    64	    loading,
    65	    error,
    66	    pagination,
    67	    submitApplication,
    68	    cancelApplication,
    69	    refetch: fetchApplications
    70	  };
    71	};

========================================

üìÅ FILE: src/hooks/useStallholder.js
   Size: 2.4K | Modified: 2025-06-03
----------------------------------------
     1	// src/hooks/useStallholder.js - Complete Implementation
     2	import { useState, useEffect } from 'react';
     3	import StallholderService from '../services/StallholderService.js';
     4	import { useAuth } from '../contexts/AuthContext';
     5	
     6	export const useStallholder = () => {
     7	  const [stallholder, setStallholder] = useState(null);
     8	  const [loading, setLoading] = useState(true);
     9	  const [error, setError] = useState(null);
    10	  const { user } = useAuth();
    11	
    12	  useEffect(() => {
    13	    if (user && user.role === 'stallholder') {
    14	      fetchStallholder();
    15	    } else {
    16	      setLoading(false);
    17	    }
    18	  }, [user]);
    19	
    20	  const fetchStallholder = async () => {
    21	    try {
    22	      setLoading(true);
    23	      setError(null);
    24	      
    25	      // Get stallholder profile for current user
    26	      const result = await StallholderService.getStallholders({
    27	        user: user.id
    28	      });
    29	      
    30	      if (result.items.length > 0) {
    31	        setStallholder(result.items[0]);
    32	      }
    33	    } catch (err) {
    34	      console.error('Error fetching stallholder:', err);
    35	      setError(err.message);
    36	    } finally {
    37	      setLoading(false);
    38	    }
    39	  };
    40	
    41	  const updateStallholder = async (data) => {
    42	    try {
    43	      setLoading(true);
    44	      setError(null);
    45	      
    46	      if (!stallholder) {
    47	        throw new Error('No stallholder profile to update');
    48	      }
    49	      
    50	      const updated = await StallholderService.updateStallholder(stallholder.id, data);
    51	      setStallholder(updated);
    52	      return updated;
    53	    } catch (err) {
    54	      console.error('Error updating stallholder:', err);
    55	      setError(err.message);
    56	      throw err;
    57	    } finally {
    58	      setLoading(false);
    59	    }
    60	  };
    61	
    62	  const createStallholder = async (data) => {
    63	    try {
    64	      setLoading(true);
    65	      setError(null);
    66	      
    67	      if (!user) {
    68	        throw new Error('User must be logged in to create stallholder profile');
    69	      }
    70	      
    71	      const created = await StallholderService.createStallholder({
    72	        ...data,
    73	        user: user.id
    74	      });
    75	      
    76	      setStallholder(created);
    77	      return created;
    78	    } catch (err) {
    79	      console.error('Error creating stallholder:', err);
    80	      setError(err.message);
    81	      throw err;
    82	    } finally {
    83	      setLoading(false);
    84	    }
    85	  };
    86	
    87	  return {
    88	    stallholder,
    89	    loading,
    90	    error,
    91	    updateStallholder,
    92	    createStallholder,
    93	    refetch: fetchStallholder,
    94	    hasProfile: !!stallholder
    95	  };
    96	};

========================================

üìÅ FILE: src/index.css
   Size: 813 | Modified: 2025-06-02
----------------------------------------
     1	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
     2	
     3	@tailwind base;
     4	@tailwind components;
     5	@tailwind utilities;
     6	
     7	@layer base {
     8	  html {
     9	    font-family: 'Inter', system-ui, sans-serif;
    10	  }
    11	}
    12	
    13	@layer components {
    14	  .btn-primary {
    15	    @apply bg-primary-600 hover:bg-primary-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    16	  }
    17	  
    18	  .btn-secondary {
    19	    @apply bg-secondary-500 hover:bg-secondary-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200;
    20	  }
    21	  
    22	  .card {
    23	    @apply bg-white rounded-lg shadow-md border border-gray-200 p-6;
    24	  }
    25	  
    26	  .input-field {
    27	    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent;
    28	  }
    29	}

========================================

üìÅ FILE: src/lib/constants.js
   Size: 1.5K | Modified: 2025-06-02
----------------------------------------
     1	export const USER_ROLES = {
     2	  CUSTOMER: 'customer',
     3	  ORGANIZER: 'organizer', 
     4	  STALLHOLDER: 'stallholder'
     5	};
     6	
     7	export const MARKET_FREQUENCIES = {
     8	  DAILY: 'Daily',
     9	  WEEKLY: 'Weekly',
    10	  FIRST_SATURDAY: '1st Saturday',
    11	  FIRST_SUNDAY: '1st Sunday',
    12	  SECOND_SATURDAY: '2nd Saturday',
    13	  SECOND_SUNDAY: '2nd Sunday',
    14	  THIRD_SATURDAY: '3rd Saturday',
    15	  THIRD_SUNDAY: '3rd Sunday',
    16	  FOURTH_SATURDAY: '4th Saturday',
    17	  FOURTH_SUNDAY: '4th Sunday',
    18	  SPECIFIC_DATES: 'Specific Dates',
    19	  SEASONAL: 'Seasonal',
    20	  MONTHLY: 'Monthly'
    21	};
    22	
    23	export const MARKET_CATEGORIES = {
    24	  FARMERS: 'Farmers Market',
    25	  CRAFT: 'Craft & Artisan',
    26	  COMMUNITY: 'Community Market',
    27	  SPECIALTY: 'Specialty Market',
    28	  FOOD: 'Food Market',
    29	  VINTAGE: 'Vintage & Antiques',
    30	  GENERAL: 'General Market'
    31	};
    32	
    33	export const AUSTRALIAN_STATES = {
    34	  SA: 'South Australia',
    35	  VIC: 'Victoria',
    36	  NSW: 'New South Wales',
    37	  QLD: 'Queensland',
    38	  WA: 'Western Australia',
    39	  TAS: 'Tasmania',
    40	  NT: 'Northern Territory',
    41	  ACT: 'Australian Capital Territory'
    42	};
    43	
    44	export const SUBSCRIPTION_TIERS = {
    45	  FREE: 'free',
    46	  BASIC: 'basic',
    47	  PREMIUM: 'premium',
    48	  ENTERPRISE: 'enterprise'
    49	};
    50	
    51	export const APPLICATION_STATUS = {
    52	  PENDING: 'pending',
    53	  APPROVED: 'approved',
    54	  REJECTED: 'rejected',
    55	  WAITLISTED: 'waitlisted'
    56	};
    57	
    58	export const SEARCH_RADIUS_OPTIONS = [
    59	  { value: 5, label: '5 km' },
    60	  { value: 10, label: '10 km' },
    61	  { value: 25, label: '25 km' },
    62	  { value: 50, label: '50 km' },
    63	  { value: 100, label: '100 km' }
    64	];

========================================

üìÅ FILE: src/lib/pocketbase.js
   Size: 1.4K | Modified: 2025-06-02
----------------------------------------
     1	import PocketBase from 'pocketbase';
     2	
     3	const pb = new PocketBase(import.meta.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     4	
     5	// Configure authentication
     6	pb.autoCancellation(false);
     7	
     8	// Export the instance
     9	export default pb;
    10	
    11	// Helper functions for common operations
    12	export const auth = {
    13	  // Login user
    14	  async login(email, password) {
    15	    return await pb.collection('users').authWithPassword(email, password);
    16	  },
    17	
    18	  // Register user
    19	  async register(data) {
    20	    return await pb.collection('users').create(data);
    21	  },
    22	
    23	  // Logout
    24	  logout() {
    25	    pb.authStore.clear();
    26	  },
    27	
    28	  // Get current user
    29	  getCurrentUser() {
    30	    return pb.authStore.model;
    31	  },
    32	
    33	  // Check if user is authenticated
    34	  isAuthenticated() {
    35	    return pb.authStore.isValid;
    36	  },
    37	
    38	  // Subscribe to auth changes
    39	  onChange(callback) {
    40	    return pb.authStore.onChange(callback);
    41	  }
    42	};
    43	
    44	// Helper for handling API errors
    45	export const handlePocketBaseError = (error) => {
    46	  console.error('PocketBase Error:', error);
    47	  
    48	  if (error?.response?.data) {
    49	    // Extract field-specific errors
    50	    const fieldErrors = {};
    51	    Object.entries(error.response.data).forEach(([field, fieldError]) => {
    52	      fieldErrors[field] = fieldError.message || fieldError;
    53	    });
    54	    return fieldErrors;
    55	  }
    56	  
    57	  return { general: error.message || 'An unexpected error occurred' };
    58	};

========================================

üìÅ FILE: src/main.jsx
   Size: 229 | Modified: 2025-06-02
----------------------------------------
     1	import { StrictMode } from 'react'
     2	import { createRoot } from 'react-dom/client'
     3	import './index.css'
     4	import App from './App.jsx'
     5	
     6	createRoot(document.getElementById('root')).render(
     7	  <StrictMode>
     8	    <App />
     9	  </StrictMode>,
    10	)

========================================

üìÅ FILE: src/pages/CreateMarket.jsx
   Size: 20K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/CreateMarket.jsx - Market Creation Form
     2	import { useState, useEffect } from 'react'
     3	import { useNavigate } from 'react-router-dom'
     4	import { Save, ArrowLeft, MapPin, Clock, Calendar, DollarSign } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	import marketService from '../services/marketService'
     7	
     8	export default function CreateMarket() {
     9	  const [loading, setLoading] = useState(false)
    10	  const [categories, setCategories] = useState([])
    11	  const [error, setError] = useState(null)
    12	  const [formData, setFormData] = useState({
    13	    name: '',
    14	    category: '',
    15	    description: '',
    16	    address: '',
    17	    suburb: '',
    18	    state: 'SA',
    19	    postcode: '',
    20	    frequency: '',
    21	    operating_hours: '',
    22	    contact_email: '',
    23	    contact_phone: '',
    24	    website: '',
    25	    facilities: [],
    26	    stall_fee: '',
    27	    application_fee: '',
    28	    bond_required: false,
    29	    bond_amount: '',
    30	    insurance_required: true,
    31	    power_available: false,
    32	    parking_available: true,
    33	    accessibility_notes: ''
    34	  })
    35	
    36	  const { user } = useAuth()
    37	  const navigate = useNavigate()
    38	
    39	  // Redirect if not organizer
    40	  useEffect(() => {
    41	    if (user && user.role !== 'organizer') {
    42	      navigate('/dashboard')
    43	    }
    44	  }, [user, navigate])
    45	
    46	  useEffect(() => {
    47	    fetchCategories()
    48	  }, [])
    49	
    50	  const fetchCategories = async () => {
    51	    try {
    52	      const categoriesData = await marketService.getCategories()
    53	      setCategories(categoriesData)
    54	    } catch (error) {
    55	      console.error('Error fetching categories:', error)
    56	    }
    57	  }
    58	
    59	  const handleChange = (e) => {
    60	    const { name, value, type, checked } = e.target
    61	    setFormData(prev => ({
    62	      ...prev,
    63	      [name]: type === 'checkbox' ? checked : value
    64	    }))
    65	  }
    66	
    67	  const handleFacilitiesChange = (facility) => {
    68	    setFormData(prev => ({
    69	      ...prev,
    70	      facilities: prev.facilities.includes(facility)
    71	        ? prev.facilities.filter(f => f !== facility)
    72	        : [...prev.facilities, facility]
    73	    }))
    74	  }
    75	
    76	  const createSlug = (name) => {
    77	    return name
    78	      .toLowerCase()
    79	      .replace(/[^a-z0-9\s-]/g, '')
    80	      .replace(/\s+/g, '-')
    81	      .replace(/-+/g, '-')
    82	      .trim()
    83	  }
    84	
    85	  const handleSubmit = async (e) => {
    86	    e.preventDefault()
    87	    setLoading(true)
    88	    setError(null)
    89	
    90	    try {
    91	      const marketData = {
    92	        ...formData,
    93	        slug: createSlug(formData.name),
    94	        organizer: user.id,
    95	        active: true,
    96	        stall_fee: formData.stall_fee ? parseFloat(formData.stall_fee) : null,
    97	        application_fee: formData.application_fee ? parseFloat(formData.application_fee) : null,
    98	        bond_amount: formData.bond_amount ? parseFloat(formData.bond_amount) : null
    99	      }
   100	
   101	      const newMarket = await marketService.createMarket(marketData)
   102	      navigate(`/markets/${newMarket.slug}`)
   103	    } catch (err) {
   104	      console.error('Error creating market:', err)
   105	      setError(err.message || 'Failed to create market')
   106	    } finally {
   107	      setLoading(false)
   108	    }
   109	  }
   110	
   111	  const facilityOptions = [
   112	    'Toilets', 'Parking', 'Food Court', 'ATM', 'Wheelchair Access',
   113	    'Children\'s Area', 'Entertainment', 'Seating', 'Shelter/Cover',
   114	    'Storage', 'Loading Dock', 'Security'
   115	  ]
   116	
   117	  const frequencyOptions = [
   118	    'Daily', 'Weekly', 'Fortnightly', 'Monthly',
   119	    'First Saturday', 'First Sunday', 'Second Saturday', 'Second Sunday',
   120	    'Third Saturday', 'Third Sunday', 'Fourth Saturday', 'Fourth Sunday',
   121	    'Specific Dates', 'Seasonal'
   122	  ]
   123	
   124	  if (user && user.role !== 'organizer') {
   125	    return (
   126	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
   127	        <div className="text-center">
   128	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Access Restricted</h2>
   129	          <p className="text-gray-600">Only market organizers can create markets.</p>
   130	        </div>
   131	      </div>
   132	    )
   133	  }
   134	
   135	  return (
   136	    <div className="min-h-screen bg-gray-50 py-8">
   137	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
   138	        {/* Header */}
   139	        <div className="mb-8">
   140	          <button
   141	            onClick={() => navigate('/dashboard')}
   142	            className="flex items-center text-primary-600 hover:text-primary-500 mb-4"
   143	          >
   144	            <ArrowLeft className="h-5 w-5 mr-2" />
   145	            Back to Dashboard
   146	          </button>
   147	          <h1 className="text-3xl font-bold text-gray-900">Create New Market</h1>
   148	          <p className="text-gray-600 mt-2">
   149	            Set up your market listing to attract stallholders and customers
   150	          </p>
   151	        </div>
   152	
   153	        <form onSubmit={handleSubmit} className="space-y-8">
   154	          {error && (
   155	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
   156	              {error}
   157	            </div>
   158	          )}
   159	
   160	          {/* Basic Information */}
   161	          <div className="bg-white rounded-lg shadow p-6">
   162	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   163	              <MapPin className="h-5 w-5 mr-2 text-primary-600" />
   164	              Basic Information
   165	            </h2>
   166	            
   167	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   168	              <div className="md:col-span-2">
   169	                <label className="block text-sm font-medium text-gray-700 mb-2">
   170	                  Market Name *
   171	                </label>
   172	                <input
   173	                  type="text"
   174	                  name="name"
   175	                  required
   176	                  className="input-field"
   177	                  value={formData.name}
   178	                  onChange={handleChange}
   179	                  placeholder="e.g. Adelaide Central Market"
   180	                />
   181	              </div>
   182	
   183	              <div>
   184	                <label className="block text-sm font-medium text-gray-700 mb-2">
   185	                  Category *
   186	                </label>
   187	                <select
   188	                  name="category"
   189	                  required
   190	                  className="input-field"
   191	                  value={formData.category}
   192	                  onChange={handleChange}
   193	                >
   194	                  <option value="">Select a category</option>
   195	                  {categories.map((category) => (
   196	                    <option key={category.id} value={category.id}>
   197	                      {category.name}
   198	                    </option>
   199	                  ))}
   200	                </select>
   201	              </div>
   202	
   203	              <div>
   204	                <label className="block text-sm font-medium text-gray-700 mb-2">
   205	                  State
   206	                </label>
   207	                <select
   208	                  name="state"
   209	                  className="input-field"
   210	                  value={formData.state}
   211	                  onChange={handleChange}
   212	                >
   213	                  <option value="SA">South Australia</option>
   214	                  <option value="VIC">Victoria</option>
   215	                  <option value="NSW">New South Wales</option>
   216	                  <option value="QLD">Queensland</option>
   217	                  <option value="WA">Western Australia</option>
   218	                  <option value="TAS">Tasmania</option>
   219	                  <option value="NT">Northern Territory</option>
   220	                  <option value="ACT">ACT</option>
   221	                </select>
   222	              </div>
   223	
   224	              <div className="md:col-span-2">
   225	                <label className="block text-sm font-medium text-gray-700 mb-2">
   226	                  Description
   227	                </label>
   228	                <textarea
   229	                  name="description"
   230	                  rows={4}
   231	                  className="input-field"
   232	                  value={formData.description}
   233	                  onChange={handleChange}
   234	                  placeholder="Describe your market, its atmosphere, and what makes it special..."
   235	                />
   236	              </div>
   237	            </div>
   238	          </div>
   239	
   240	          {/* Location Details */}
   241	          <div className="bg-white rounded-lg shadow p-6">
   242	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   243	              Location Details
   244	            </h2>
   245	            
   246	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   247	              <div className="md:col-span-2">
   248	                <label className="block text-sm font-medium text-gray-700 mb-2">
   249	                  Street Address *
   250	                </label>
   251	                <input
   252	                  type="text"
   253	                  name="address"
   254	                  required
   255	                  className="input-field"
   256	                  value={formData.address}
   257	                  onChange={handleChange}
   258	                  placeholder="123 Market Street"
   259	                />
   260	              </div>
   261	
   262	              <div>
   263	                <label className="block text-sm font-medium text-gray-700 mb-2">
   264	                  Suburb *
   265	                </label>
   266	                <input
   267	                  type="text"
   268	                  name="suburb"
   269	                  required
   270	                  className="input-field"
   271	                  value={formData.suburb}
   272	                  onChange={handleChange}
   273	                  placeholder="Adelaide"
   274	                />
   275	              </div>
   276	
   277	              <div>
   278	                <label className="block text-sm font-medium text-gray-700 mb-2">
   279	                  Postcode *
   280	                </label>
   281	                <input
   282	                  type="text"
   283	                  name="postcode"
   284	                  required
   285	                  pattern="[0-9]{4}"
   286	                  className="input-field"
   287	                  value={formData.postcode}
   288	                  onChange={handleChange}
   289	                  placeholder="5000"
   290	                />
   291	              </div>
   292	            </div>
   293	          </div>
   294	
   295	          {/* Schedule & Operations */}
   296	          <div className="bg-white rounded-lg shadow p-6">
   297	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   298	              <Calendar className="h-5 w-5 mr-2 text-primary-600" />
   299	              Schedule & Operations
   300	            </h2>
   301	            
   302	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   303	              <div>
   304	                <label className="block text-sm font-medium text-gray-700 mb-2">
   305	                  Frequency *
   306	                </label>
   307	                <select
   308	                  name="frequency"
   309	                  required
   310	                  className="input-field"
   311	                  value={formData.frequency}
   312	                  onChange={handleChange}
   313	                >
   314	                  <option value="">Select frequency</option>
   315	                  {frequencyOptions.map((freq) => (
   316	                    <option key={freq} value={freq}>
   317	                      {freq}
   318	                    </option>
   319	                  ))}
   320	                </select>
   321	              </div>
   322	
   323	              <div>
   324	                <label className="block text-sm font-medium text-gray-700 mb-2">
   325	                  Operating Hours
   326	                </label>
   327	                <input
   328	                  type="text"
   329	                  name="operating_hours"
   330	                  className="input-field"
   331	                  value={formData.operating_hours}
   332	                  onChange={handleChange}
   333	                  placeholder="8:00 AM - 2:00 PM"
   334	                />
   335	              </div>
   336	            </div>
   337	          </div>
   338	
   339	          {/* Contact Information */}
   340	          <div className="bg-white rounded-lg shadow p-6">
   341	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   342	              Contact Information
   343	            </h2>
   344	            
   345	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   346	              <div>
   347	                <label className="block text-sm font-medium text-gray-700 mb-2">
   348	                  Contact Email *
   349	                </label>
   350	                <input
   351	                  type="email"
   352	                  name="contact_email"
   353	                  required
   354	                  className="input-field"
   355	                  value={formData.contact_email}
   356	                  onChange={handleChange}
   357	                  placeholder="info@yourmarket.com"
   358	                />
   359	              </div>
   360	
   361	              <div>
   362	                <label className="block text-sm font-medium text-gray-700 mb-2">
   363	                  Contact Phone
   364	                </label>
   365	                <input
   366	                  type="tel"
   367	                  name="contact_phone"
   368	                  className="input-field"
   369	                  value={formData.contact_phone}
   370	                  onChange={handleChange}
   371	                  placeholder="08 1234 5678"
   372	                />
   373	              </div>
   374	
   375	              <div className="md:col-span-2">
   376	                <label className="block text-sm font-medium text-gray-700 mb-2">
   377	                  Website
   378	                </label>
   379	                <input
   380	                  type="url"
   381	                  name="website"
   382	                  className="input-field"
   383	                  value={formData.website}
   384	                  onChange={handleChange}
   385	                  placeholder="https://yourmarket.com"
   386	                />
   387	              </div>
   388	            </div>
   389	          </div>
   390	
   391	          {/* Facilities */}
   392	          <div className="bg-white rounded-lg shadow p-6">
   393	            <h2 className="text-xl font-semibold text-gray-900 mb-4">
   394	              Facilities & Amenities
   395	            </h2>
   396	            
   397	            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   398	              {facilityOptions.map((facility) => (
   399	                <label key={facility} className="flex items-center">
   400	                  <input
   401	                    type="checkbox"
   402	                    checked={formData.facilities.includes(facility)}
   403	                    onChange={() => handleFacilitiesChange(facility)}
   404	                    className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   405	                  />
   406	                  <span className="ml-2 text-sm text-gray-700">{facility}</span>
   407	                </label>
   408	              ))}
   409	            </div>
   410	
   411	            <div className="mt-6">
   412	              <label className="block text-sm font-medium text-gray-700 mb-2">
   413	                Accessibility Notes
   414	              </label>
   415	              <textarea
   416	                name="accessibility_notes"
   417	                rows={3}
   418	                className="input-field"
   419	                value={formData.accessibility_notes}
   420	                onChange={handleChange}
   421	                placeholder="Describe accessibility features, parking, wheelchair access, etc."
   422	              />
   423	            </div>
   424	          </div>
   425	
   426	          {/* Pricing & Requirements */}
   427	          <div className="bg-white rounded-lg shadow p-6">
   428	            <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
   429	              <DollarSign className="h-5 w-5 mr-2 text-primary-600" />
   430	              Pricing & Requirements
   431	            </h2>
   432	            
   433	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   434	              <div>
   435	                <label className="block text-sm font-medium text-gray-700 mb-2">
   436	                  Stall Fee (per market day)
   437	                </label>
   438	                <div className="relative">
   439	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   440	                  <input
   441	                    type="number"
   442	                    name="stall_fee"
   443	                    min="0"
   444	                    step="0.01"
   445	                    className="input-field pl-8"
   446	                    value={formData.stall_fee}
   447	                    onChange={handleChange}
   448	                    placeholder="50.00"
   449	                  />
   450	                </div>
   451	              </div>
   452	
   453	              <div>
   454	                <label className="block text-sm font-medium text-gray-700 mb-2">
   455	                  Application Fee
   456	                </label>
   457	                <div className="relative">
   458	                  <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   459	                  <input
   460	                    type="number"
   461	                    name="application_fee"
   462	                    min="0"
   463	                    step="0.01"
   464	                    className="input-field pl-8"
   465	                    value={formData.application_fee}
   466	                    onChange={handleChange}
   467	                    placeholder="10.00"
   468	                  />
   469	                </div>
   470	              </div>
   471	
   472	              <div className="md:col-span-2">
   473	                <div className="space-y-4">
   474	                  <label className="flex items-center">
   475	                    <input
   476	                      type="checkbox"
   477	                      name="bond_required"
   478	                      checked={formData.bond_required}
   479	                      onChange={handleChange}
   480	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   481	                    />
   482	                    <span className="ml-2 text-sm text-gray-700">Bond Required</span>
   483	                  </label>
   484	
   485	                  {formData.bond_required && (
   486	                    <div className="ml-6">
   487	                      <label className="block text-sm font-medium text-gray-700 mb-2">
   488	                        Bond Amount
   489	                      </label>
   490	                      <div className="relative max-w-xs">
   491	                        <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
   492	                        <input
   493	                          type="number"
   494	                          name="bond_amount"
   495	                          min="0"
   496	                          step="0.01"
   497	                          className="input-field pl-8"
   498	                          value={formData.bond_amount}
   499	                          onChange={handleChange}
   500	                          placeholder="100.00"
   501	                        />
   502	                      </div>
   503	                    </div>
   504	                  )}
   505	
   506	                  <label className="flex items-center">
   507	                    <input
   508	                      type="checkbox"
   509	                      name="insurance_required"
   510	                      checked={formData.insurance_required}
   511	                      onChange={handleChange}
   512	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   513	                    />
   514	                    <span className="ml-2 text-sm text-gray-700">Public Liability Insurance Required</span>
   515	                  </label>
   516	
   517	                  <label className="flex items-center">
   518	                    <input
   519	                      type="checkbox"
   520	                      name="power_available"
   521	                      checked={formData.power_available}
   522	                      onChange={handleChange}
   523	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   524	                    />
   525	                    <span className="ml-2 text-sm text-gray-700">Power Available for Stalls</span>
   526	                  </label>
   527	
   528	                  <label className="flex items-center">
   529	                    <input
   530	                      type="checkbox"
   531	                      name="parking_available"
   532	                      checked={formData.parking_available}
   533	                      onChange={handleChange}
   534	                      className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   535	                    />
   536	                    <span className="ml-2 text-sm text-gray-700">Parking Available</span>
   537	                  </label>
   538	                </div>
   539	              </div>
   540	            </div>
   541	          </div>
   542	
   543	          {/* Submit Button */}
   544	          <div className="flex justify-end space-x-4">
   545	            <button
   546	              type="button"
   547	              onClick={() => navigate('/dashboard')}
   548	              className="btn-secondary"
   549	              disabled={loading}
   550	            >
   551	              Cancel
   552	            </button>
   553	            <button
   554	              type="submit"
   555	              className="btn-primary flex items-center"
   556	              disabled={loading}
   557	            >
   558	              {loading ? (
   559	                <>
   560	                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
   561	                  Creating Market...
   562	                </>
   563	              ) : (
   564	                <>
   565	                  <Save className="h-4 w-4 mr-2" />
   566	                  Create Market
   567	                </>
   568	              )}
   569	            </button>
   570	          </div>
   571	        </form>
   572	      </div>
   573	    </div>
   574	  )
   575	}

========================================

üìÅ FILE: src/pages/Dashboard.jsx
   Size: 14K | Modified: 2025-06-03
----------------------------------------
     1	// src/pages/Dashboard.jsx - Fixed Role Detection
     2	import { useState, useEffect } from 'react'
     3	import { Link } from 'react-router-dom'
     4	import { User, MapPin, ShoppingBag, BarChart3, Plus, Calendar, Users } from 'lucide-react'
     5	import { useAuth } from '../contexts/AuthContext'
     6	
     7	export default function Dashboard() {
     8	  const { user, loading } = useAuth()
     9	
    10	  // Debug: Let's see what user object looks like
    11	  useEffect(() => {
    12	    console.log('Dashboard - Current user:', user)
    13	    console.log('Dashboard - User role:', user?.role)
    14	  }, [user])
    15	
    16	  if (loading) {
    17	    return (
    18	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    19	        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
    20	      </div>
    21	    )
    22	  }
    23	
    24	  if (!user) {
    25	    return (
    26	      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
    27	        <div className="text-center">
    28	          <p className="text-gray-600">Please log in to access your dashboard.</p>
    29	          <Link to="/login" className="btn-primary mt-4">
    30	            Log In
    31	          </Link>
    32	        </div>
    33	      </div>
    34	    )
    35	  }
    36	
    37	  const renderRoleSpecificContent = () => {
    38	    console.log('Rendering content for role:', user.role) // Debug log
    39	    
    40	    switch (user.role) {
    41	      case 'stallholder':
    42	        return <StallholderDashboard user={user} />
    43	      case 'organizer':
    44	        return <OrganizerDashboard user={user} />
    45	      case 'customer':
    46	      default:
    47	        return <CustomerDashboard user={user} />
    48	    }
    49	  }
    50	
    51	  const getRoleDisplayName = (role) => {
    52	    switch(role) {
    53	      case 'stallholder': return 'Stallholder'
    54	      case 'organizer': return 'Market Organizer'
    55	      case 'customer': return 'Customer'
    56	      default: return 'User'
    57	    }
    58	  }
    59	
    60	  return (
    61	    <div className="min-h-screen bg-gray-50 py-8">
    62	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    63	        {/* Header */}
    64	        <div className="mb-8">
    65	          <h1 className="text-3xl font-bold text-gray-900 mb-2">
    66	            Welcome back, {user.name}!
    67	          </h1>
    68	          <div className="flex items-center space-x-4">
    69	            <p className="text-gray-600">
    70	              {user.role === 'stallholder' && 'Manage your stallholder profile and applications'}
    71	              {user.role === 'organizer' && 'Manage your markets and stallholder applications'}
    72	              {(user.role === 'customer' || !user.role) && 'Discover and save your favorite markets'}
    73	            </p>
    74	            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
    75	              {getRoleDisplayName(user.role)}
    76	            </span>
    77	          </div>
    78	        </div>
    79	
    80	        {/* Debug Info (remove this after testing) */}
    81	        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
    82	          <h3 className="text-sm font-medium text-blue-800 mb-2">Debug Info:</h3>
    83	          <p className="text-xs text-blue-600">User ID: {user.id}</p>
    84	          <p className="text-xs text-blue-600">User Role: {user.role || 'undefined'}</p>
    85	          <p className="text-xs text-blue-600">User Email: {user.email}</p>
    86	        </div>
    87	
    88	        {renderRoleSpecificContent()}
    89	      </div>
    90	    </div>
    91	  )
    92	}
    93	
    94	// Customer Dashboard Component
    95	const CustomerDashboard = ({ user }) => {
    96	  return (
    97	    <div>
    98	      <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
    99	        <p className="text-green-800 font-medium">‚úÖ Customer Dashboard Loaded</p>
   100	      </div>
   101	
   102	      {/* Quick Stats */}
   103	      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
   104	        <div className="card">
   105	          <div className="flex items-center">
   106	            <div className="bg-primary-100 rounded-lg p-3">
   107	              <MapPin className="h-6 w-6 text-primary-600" />
   108	            </div>
   109	            <div className="ml-4">
   110	              <p className="text-2xl font-bold text-gray-900">12</p>
   111	              <p className="text-gray-600">Favorite Markets</p>
   112	            </div>
   113	          </div>
   114	        </div>
   115	        <div className="card">
   116	          <div className="flex items-center">
   117	            <div className="bg-secondary-100 rounded-lg p-3">
   118	              <Calendar className="h-6 w-6 text-secondary-600" />
   119	            </div>
   120	            <div className="ml-4">
   121	              <p className="text-2xl font-bold text-gray-900">3</p>
   122	              <p className="text-gray-600">This Weekend</p>
   123	            </div>
   124	          </div>
   125	        </div>
   126	        <div className="card">
   127	          <div className="flex items-center">
   128	            <div className="bg-green-100 rounded-lg p-3">
   129	              <User className="h-6 w-6 text-green-600" />
   130	            </div>
   131	            <div className="ml-4">
   132	              <p className="text-2xl font-bold text-gray-900">Free</p>
   133	              <p className="text-gray-600">Current Plan</p>
   134	            </div>
   135	          </div>
   136	        </div>
   137	      </div>
   138	
   139	      {/* Quick Actions */}
   140	      <div className="bg-white rounded-lg shadow p-6">
   141	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   142	        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   143	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   144	            <MapPin className="h-8 w-8 text-primary-600 mr-4" />
   145	            <div>
   146	              <h3 className="font-medium text-gray-900">Browse Markets</h3>
   147	              <p className="text-sm text-gray-600">Find new markets in your area</p>
   148	            </div>
   149	          </Link>
   150	          <Link to="/register?role=stallholder" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   151	            <ShoppingBag className="h-8 w-8 text-secondary-600 mr-4" />
   152	            <div>
   153	              <h3 className="font-medium text-gray-900">Become a Stallholder</h3>
   154	              <p className="text-sm text-gray-600">Start selling at local markets</p>
   155	            </div>
   156	          </Link>
   157	        </div>
   158	      </div>
   159	    </div>
   160	  )
   161	}
   162	
   163	// Stallholder Dashboard Component
   164	const StallholderDashboard = ({ user }) => {
   165	  return (
   166	    <div>
   167	      <div className="mb-4 p-4 bg-purple-50 border border-purple-200 rounded-lg">
   168	        <p className="text-purple-800 font-medium">‚úÖ Stallholder Dashboard Loaded</p>
   169	      </div>
   170	
   171	      {/* Quick Stats */}
   172	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   173	        <div className="card">
   174	          <div className="flex items-center">
   175	            <div className="bg-primary-100 rounded-lg p-3">
   176	              <ShoppingBag className="h-6 w-6 text-primary-600" />
   177	            </div>
   178	            <div className="ml-4">
   179	              <p className="text-2xl font-bold text-gray-900">5</p>
   180	              <p className="text-gray-600">Active Applications</p>
   181	            </div>
   182	          </div>
   183	        </div>
   184	        <div className="card">
   185	          <div className="flex items-center">
   186	            <div className="bg-green-100 rounded-lg p-3">
   187	              <BarChart3 className="h-6 w-6 text-green-600" />
   188	            </div>
   189	            <div className="ml-4">
   190	              <p className="text-2xl font-bold text-gray-900">3</p>
   191	              <p className="text-gray-600">Approved</p>
   192	            </div>
   193	          </div>
   194	        </div>
   195	        <div className="card">
   196	          <div className="flex items-center">
   197	            <div className="bg-yellow-100 rounded-lg p-3">
   198	              <Calendar className="h-6 w-6 text-yellow-600" />
   199	            </div>
   200	            <div className="ml-4">
   201	              <p className="text-2xl font-bold text-gray-900">2</p>
   202	              <p className="text-gray-600">This Weekend</p>
   203	            </div>
   204	          </div>
   205	        </div>
   206	        <div className="card">
   207	          <div className="flex items-center">
   208	            <div className="bg-purple-100 rounded-lg p-3">
   209	              <User className="h-6 w-6 text-purple-600" />
   210	            </div>
   211	            <div className="ml-4">
   212	              <p className="text-2xl font-bold text-gray-900">4.8</p>
   213	              <p className="text-gray-600">Rating</p>
   214	            </div>
   215	          </div>
   216	        </div>
   217	      </div>
   218	
   219	      {/* Quick Actions */}
   220	      <div className="bg-white rounded-lg shadow p-6">
   221	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   222	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   223	          <Link to="/profile" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   224	            <User className="h-8 w-8 text-primary-600 mr-4" />
   225	            <div>
   226	              <h3 className="font-medium text-gray-900">Update Profile</h3>
   227	              <p className="text-sm text-gray-600">Edit your business details</p>
   228	            </div>
   229	          </Link>
   230	          <Link to="/markets" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   231	            <MapPin className="h-8 w-8 text-secondary-600 mr-4" />
   232	            <div>
   233	              <h3 className="font-medium text-gray-900">Find Markets</h3>
   234	              <p className="text-sm text-gray-600">Discover new opportunities</p>
   235	            </div>
   236	          </Link>
   237	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   238	            <Plus className="h-8 w-8 text-green-600 mr-4" />
   239	            <div>
   240	              <h3 className="font-medium text-gray-900">Apply to Market</h3>
   241	              <p className="text-sm text-gray-600">Submit new application</p>
   242	            </div>
   243	          </button>
   244	        </div>
   245	      </div>
   246	    </div>
   247	  )
   248	}
   249	
   250	// Organizer Dashboard Component
   251	const OrganizerDashboard = ({ user }) => {
   252	  return (
   253	    <div>
   254	      <div className="mb-4 p-4 bg-orange-50 border border-orange-200 rounded-lg">
   255	        <p className="text-orange-800 font-medium">‚úÖ Organizer Dashboard Loaded</p>
   256	      </div>
   257	
   258	      {/* Quick Stats */}
   259	      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
   260	        <div className="card">
   261	          <div className="flex items-center">
   262	            <div className="bg-primary-100 rounded-lg p-3">
   263	              <MapPin className="h-6 w-6 text-primary-600" />
   264	            </div>
   265	            <div className="ml-4">
   266	              <p className="text-2xl font-bold text-gray-900">3</p>
   267	              <p className="text-gray-600">Active Markets</p>
   268	            </div>
   269	          </div>
   270	        </div>
   271	        <div className="card">
   272	          <div className="flex items-center">
   273	            <div className="bg-secondary-100 rounded-lg p-3">
   274	              <Users className="h-6 w-6 text-secondary-600" />
   275	            </div>
   276	            <div className="ml-4">
   277	              <p className="text-2xl font-bold text-gray-900">47</p>
   278	              <p className="text-gray-600">Total Stallholders</p>
   279	            </div>
   280	          </div>
   281	        </div>
   282	        <div className="card">
   283	          <div className="flex items-center">
   284	            <div className="bg-yellow-100 rounded-lg p-3">
   285	              <ShoppingBag className="h-6 w-6 text-yellow-600" />
   286	            </div>
   287	            <div className="ml-4">
   288	              <p className="text-2xl font-bold text-gray-900">12</p>
   289	              <p className="text-gray-600">Pending Applications</p>
   290	            </div>
   291	          </div>
   292	        </div>
   293	        <div className="card">
   294	          <div className="flex items-center">
   295	            <div className="bg-green-100 rounded-lg p-3">
   296	              <BarChart3 className="h-6 w-6 text-green-600" />
   297	            </div>
   298	            <div className="ml-4">
   299	              <p className="text-2xl font-bold text-gray-900">$2,450</p>
   300	              <p className="text-gray-600">Monthly Revenue</p>
   301	            </div>
   302	          </div>
   303	        </div>
   304	      </div>
   305	
   306	      {/* Quick Actions */}
   307	      <div className="bg-white rounded-lg shadow p-6">
   308	        <h2 className="text-xl font-semibold text-gray-900 mb-4">Quick Actions</h2>
   309	        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
   310	          <Link to="/markets/create" className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   311	            <Plus className="h-8 w-8 text-primary-600 mr-4" />
   312	            <div>
   313	              <h3 className="font-medium text-gray-900">Create Market</h3>
   314	              <p className="text-sm text-gray-600">Add a new market listing</p>
   315	            </div>
   316	          </Link>
   317	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   318	            <Users className="h-8 w-8 text-secondary-600 mr-4" />
   319	            <div>
   320	              <h3 className="font-medium text-gray-900">Manage Applications</h3>
   321	              <p className="text-sm text-gray-600">Review stallholder requests</p>
   322	            </div>
   323	          </button>
   324	          <button className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
   325	            <BarChart3 className="h-8 w-8 text-green-600 mr-4" />
   326	            <div>
   327	              <h3 className="font-medium text-gray-900">View Analytics</h3>
   328	              <p className="text-sm text-gray-600">Market performance data</p>
   329	            </div>
   330	          </button>
   331	        </div>
   332	      </div>
   333	    </div>
   334	  )
   335	}

========================================

üìÅ FILE: src/pages/DatabaseTest.jsx
   Size: 7.7K | Modified: 2025-06-03
----------------------------------------
     1	// PocketBase Verification Component
     2	// Add this to src/pages/DatabaseTest.jsx for internal verification
     3	
     4	import { useState, useEffect } from 'react'
     5	import pb from '../lib/pocketbase'
     6	import { CheckCircle, XCircle, AlertCircle, RefreshCw } from 'lucide-react'
     7	
     8	export default function DatabaseTest() {
     9	  const [status, setStatus] = useState({
    10	    loading: true,
    11	    pocketbaseOnline: false,
    12	    collections: {},
    13	    dataCounts: {},
    14	    errors: []
    15	  })
    16	
    17	  const checkDatabase = async () => {
    18	    setStatus(prev => ({ ...prev, loading: true, errors: [] }))
    19	    
    20	    try {
    21	      const collections = ['users', 'markets', 'market_categories', 'stallholders', 'applications', 'reviews']
    22	      const collectionStatus = {}
    23	      const dataStatus = {}
    24	      const errors = []
    25	
    26	      // Check PocketBase health
    27	      const healthCheck = await fetch(`${pb.baseUrl}/api/health`)
    28	      const pocketbaseOnline = healthCheck.ok
    29	
    30	      // Check each collection
    31	      for (const collection of collections) {
    32	        try {
    33	          const result = await pb.collection(collection).getList(1, 1)
    34	          collectionStatus[collection] = true
    35	          dataStatus[collection] = result.totalItems
    36	        } catch (error) {
    37	          collectionStatus[collection] = false
    38	          dataStatus[collection] = 0
    39	          errors.push(`${collection}: ${error.message}`)
    40	        }
    41	      }
    42	
    43	      // Test market query specifically
    44	      try {
    45	        const markets = await pb.collection('markets').getList(1, 3, {
    46	          expand: 'category'
    47	        })
    48	        console.log('Sample markets found:', markets.items)
    49	      } catch (error) {
    50	        errors.push(`Market query failed: ${error.message}`)
    51	      }
    52	
    53	      setStatus({
    54	        loading: false,
    55	        pocketbaseOnline,
    56	        collections: collectionStatus,
    57	        dataCounts: dataStatus,
    58	        errors
    59	      })
    60	
    61	    } catch (error) {
    62	      setStatus(prev => ({
    63	        ...prev,
    64	        loading: false,
    65	        pocketbaseOnline: false,
    66	        errors: [`General error: ${error.message}`]
    67	      }))
    68	    }
    69	  }
    70	
    71	  useEffect(() => {
    72	    checkDatabase()
    73	  }, [])
    74	
    75	  const StatusIcon = ({ status }) => {
    76	    if (status === true) return <CheckCircle className="h-5 w-5 text-green-500" />
    77	    if (status === false) return <XCircle className="h-5 w-5 text-red-500" />
    78	    return <AlertCircle className="h-5 w-5 text-yellow-500" />
    79	  }
    80	
    81	  return (
    82	    <div className="min-h-screen bg-gray-50 py-8">
    83	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    84	        <div className="mb-8">
    85	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Database Verification</h1>
    86	          <p className="text-gray-600">
    87	            Checking PocketBase collections and data integrity
    88	          </p>
    89	          <button 
    90	            onClick={checkDatabase}
    91	            className="mt-4 btn-primary inline-flex items-center"
    92	            disabled={status.loading}
    93	          >
    94	            <RefreshCw className={`h-4 w-4 mr-2 ${status.loading ? 'animate-spin' : ''}`} />
    95	            Refresh Check
    96	          </button>
    97	        </div>
    98	
    99	        {/* PocketBase Status */}
   100	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   101	          <h2 className="text-xl font-semibold mb-4">PocketBase Status</h2>
   102	          <div className="flex items-center">
   103	            <StatusIcon status={status.pocketbaseOnline} />
   104	            <span className="ml-2">
   105	              {status.pocketbaseOnline ? 'Online and responding' : 'Offline or not responding'}
   106	            </span>
   107	          </div>
   108	          <p className="text-sm text-gray-500 mt-2">URL: {pb.baseUrl}</p>
   109	        </div>
   110	
   111	        {/* Collections Status */}
   112	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   113	          <h2 className="text-xl font-semibold mb-4">Collections Status</h2>
   114	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   115	            {Object.entries(status.collections).map(([collection, exists]) => (
   116	              <div key={collection} className="flex items-center justify-between p-3 border rounded">
   117	                <div className="flex items-center">
   118	                  <StatusIcon status={exists} />
   119	                  <span className="ml-2 font-medium">{collection}</span>
   120	                </div>
   121	                <span className="text-sm text-gray-500">
   122	                  {status.dataCounts[collection]} records
   123	                </span>
   124	              </div>
   125	            ))}
   126	          </div>
   127	        </div>
   128	
   129	        {/* Data Summary */}
   130	        <div className="bg-white rounded-lg shadow p-6 mb-6">
   131	          <h2 className="text-xl font-semibold mb-4">Data Summary</h2>
   132	          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
   133	            <div className="text-center p-4 bg-blue-50 rounded">
   134	              <div className="text-2xl font-bold text-blue-600">
   135	                {status.dataCounts.markets || 0}
   136	              </div>
   137	              <div className="text-sm text-blue-800">Markets</div>
   138	            </div>
   139	            <div className="text-center p-4 bg-green-50 rounded">
   140	              <div className="text-2xl font-bold text-green-600">
   141	                {status.dataCounts.stallholders || 0}
   142	              </div>
   143	              <div className="text-sm text-green-800">Stallholders</div>
   144	            </div>
   145	            <div className="text-center p-4 bg-purple-50 rounded">
   146	              <div className="text-2xl font-bold text-purple-600">
   147	                {status.dataCounts.applications || 0}
   148	              </div>
   149	              <div className="text-sm text-purple-800">Applications</div>
   150	            </div>
   151	            <div className="text-center p-4 bg-yellow-50 rounded">
   152	              <div className="text-2xl font-bold text-yellow-600">
   153	                {status.dataCounts.users || 0}
   154	              </div>
   155	              <div className="text-sm text-yellow-800">Users</div>
   156	            </div>
   157	            <div className="text-center p-4 bg-red-50 rounded">
   158	              <div className="text-2xl font-bold text-red-600">
   159	                {status.dataCounts.reviews || 0}
   160	              </div>
   161	              <div className="text-sm text-red-800">Reviews</div>
   162	            </div>
   163	            <div className="text-center p-4 bg-indigo-50 rounded">
   164	              <div className="text-2xl font-bold text-indigo-600">
   165	                {status.dataCounts.market_categories || 0}
   166	              </div>
   167	              <div className="text-sm text-indigo-800">Categories</div>
   168	            </div>
   169	          </div>
   170	        </div>
   171	
   172	        {/* Errors */}
   173	        {status.errors.length > 0 && (
   174	          <div className="bg-white rounded-lg shadow p-6 mb-6">
   175	            <h2 className="text-xl font-semibold mb-4 text-red-600">Issues Detected</h2>
   176	            <div className="space-y-2">
   177	              {status.errors.map((error, index) => (
   178	                <div key={index} className="flex items-start">
   179	                  <XCircle className="h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0" />
   180	                  <span className="text-sm text-red-700">{error}</span>
   181	                </div>
   182	              ))}
   183	            </div>
   184	          </div>
   185	        )}
   186	
   187	        {/* Quick Actions */}
   188	        <div className="bg-white rounded-lg shadow p-6">
   189	          <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
   190	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   191	            <button 
   192	              onClick={() => window.open(`${pb.baseUrl}/_/`, '_blank')}
   193	              className="btn-secondary"
   194	            >
   195	              Open PocketBase Admin
   196	            </button>
   197	            <button 
   198	              onClick={() => window.location.href = '/markets'}
   199	              className="btn-primary"
   200	            >
   201	              Test Market Listing
   202	            </button>
   203	          </div>
   204	        </div>
   205	      </div>
   206	    </div>
   207	  )
   208	}
   209	
   210	// Add this route to your App.jsx for testing:
   211	// <Route path="/database-test" element={<DatabaseTest />} />

========================================

üìÅ FILE: src/pages/Home.jsx
   Size: 4.4K | Modified: 2025-06-02
----------------------------------------
     1	import { Link } from 'react-router-dom'
     2	import { Search, MapPin, Users, ShoppingBag, ArrowRight } from 'lucide-react'
     3	
     4	export default function Home() {
     5	  return (
     6	    <div>
     7	      {/* Hero Section */}
     8	      <section className="bg-gradient-to-br from-primary-600 to-primary-800 text-white">
     9	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    10	          <div className="text-center">
    11	            <h1 className="text-4xl md:text-6xl font-bold mb-6">
    12	              Discover Local Markets
    13	              <span className="block text-secondary-400">Across South Australia</span>
    14	            </h1>
    15	            <p className="text-xl md:text-2xl mb-8 max-w-3xl mx-auto text-primary-100">
    16	              Connect with vibrant local markets, fresh produce, unique crafts, and community experiences right in your neighborhood.
    17	            </p>
    18	            <div className="flex flex-col sm:flex-row gap-4 justify-center">
    19	              <Link to="/markets" className="btn-secondary text-lg px-8 py-3">
    20	                <Search className="h-5 w-5 mr-2" />
    21	                Browse Markets
    22	              </Link>
    23	              <Link to="/register" className="bg-white text-primary-600 hover:bg-gray-100 font-medium py-3 px-8 rounded-lg transition-colors text-lg">
    24	                Join as Stallholder
    25	              </Link>
    26	            </div>
    27	          </div>
    28	        </div>
    29	      </section>
    30	
    31	      {/* Features Section */}
    32	      <section className="py-20 bg-white">
    33	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center mb-16">
    35	            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
    36	              Why Choose SA Markets?
    37	            </h2>
    38	            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
    39	              We're building stronger communities by connecting local markets, stallholders, and customers across South Australia.
    40	            </p>
    41	          </div>
    42	
    43	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
    44	            <div className="text-center">
    45	              <div className="bg-primary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    46	                <MapPin className="h-8 w-8 text-primary-600" />
    47	              </div>
    48	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Find Markets Nearby</h3>
    49	              <p className="text-gray-600">
    50	                Discover farmers markets, craft fairs, and community markets in your local area with our interactive map and search tools.
    51	              </p>
    52	            </div>
    53	
    54	            <div className="text-center">
    55	              <div className="bg-secondary-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    56	                <Users className="h-8 w-8 text-secondary-600" />
    57	              </div>
    58	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Connect Communities</h3>
    59	              <p className="text-gray-600">
    60	                Join a vibrant network of local producers, artisans, and market-goers who share a passion for community and quality.
    61	              </p>
    62	            </div>
    63	
    64	            <div className="text-center">
    65	              <div className="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
    66	                <ShoppingBag className="h-8 w-8 text-green-600" />
    67	              </div>
    68	              <h3 className="text-xl font-semibold text-gray-900 mb-2">Support Local Business</h3>
    69	              <p className="text-gray-600">
    70	                Shop directly from local farmers, makers, and small businesses while supporting your community's economic growth.
    71	              </p>
    72	            </div>
    73	          </div>
    74	        </div>
    75	      </section>
    76	
    77	      {/* CTA Section */}
    78	      <section className="py-16 bg-gray-50">
    79	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    80	          <h2 className="text-3xl font-bold text-gray-900 mb-4">
    81	            Ready to explore local markets?
    82	          </h2>
    83	          <p className="text-xl text-gray-600 mb-8">
    84	            Join thousands of South Australians discovering amazing local products and experiences.
    85	          </p>
    86	          <Link to="/markets" className="btn-primary text-lg px-8 py-3 inline-flex items-center">
    87	            Start Exploring
    88	            <ArrowRight className="h-5 w-5 ml-2" />
    89	          </Link>
    90	        </div>
    91	      </section>
    92	    </div>
    93	  )
    94	}

========================================

üìÅ FILE: src/pages/Login.jsx
   Size: 5.2K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate, useLocation } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Login() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    email: '',
    10	    password: ''
    11	  })
    12	  
    13	  const { login, loading, error } = useAuth()
    14	  const navigate = useNavigate()
    15	  const location = useLocation()
    16	  
    17	  const from = location.state?.from?.pathname || '/dashboard'
    18	
    19	  const handleSubmit = async (e) => {
    20	    e.preventDefault()
    21	    try {
    22	      await login(formData.email, formData.password)
    23	      navigate(from, { replace: true })
    24	    } catch (err) {
    25	      // Error is handled by AuthContext
    26	      console.error('Login failed:', err)
    27	    }
    28	  }
    29	
    30	  return (
    31	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    32	      <div className="max-w-md w-full space-y-8">
    33	        <div>
    34	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    35	            Welcome back
    36	          </h2>
    37	          <p className="mt-2 text-center text-sm text-gray-600">
    38	            Sign in to your account
    39	          </p>
    40	        </div>
    41	        
    42	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    43	          {error && (
    44	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    45	              {typeof error === 'object' ? error.general || 'Login failed' : error}
    46	            </div>
    47	          )}
    48	          
    49	          <div className="space-y-4">
    50	            <div>
    51	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    52	                Email address
    53	              </label>
    54	              <input
    55	                id="email"
    56	                name="email"
    57	                type="email"
    58	                required
    59	                className="input-field mt-1"
    60	                placeholder="Enter your email"
    61	                value={formData.email}
    62	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    63	                disabled={loading}
    64	              />
    65	              {error?.email && (
    66	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    67	              )}
    68	            </div>
    69	            
    70	            <div>
    71	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    72	                Password
    73	              </label>
    74	              <div className="mt-1 relative">
    75	                <input
    76	                  id="password"
    77	                  name="password"
    78	                  type={showPassword ? 'text' : 'password'}
    79	                  required
    80	                  className="input-field pr-10"
    81	                  placeholder="Enter your password"
    82	                  value={formData.password}
    83	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
    84	                  disabled={loading}
    85	                />
    86	                <button
    87	                  type="button"
    88	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
    89	                  onClick={() => setShowPassword(!showPassword)}
    90	                  disabled={loading}
    91	                >
    92	                  {showPassword ? (
    93	                    <EyeOff className="h-5 w-5 text-gray-400" />
    94	                  ) : (
    95	                    <Eye className="h-5 w-5 text-gray-400" />
    96	                  )}
    97	                </button>
    98	              </div>
    99	              {error?.password && (
   100	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   101	              )}
   102	            </div>
   103	          </div>
   104	
   105	          <div className="flex items-center justify-between">
   106	            <div className="flex items-center">
   107	              <input
   108	                id="remember-me"
   109	                name="remember-me"
   110	                type="checkbox"
   111	                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
   112	              />
   113	              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
   114	                Remember me
   115	              </label>
   116	            </div>
   117	
   118	            <div className="text-sm">
   119	              <Link to="/forgot-password" className="text-primary-600 hover:text-primary-500">
   120	                Forgot your password?
   121	              </Link>
   122	            </div>
   123	          </div>
   124	
   125	          <div>
   126	            <button 
   127	              type="submit" 
   128	              className="btn-primary w-full flex items-center justify-center"
   129	              disabled={loading}
   130	            >
   131	              {loading ? (
   132	                <>
   133	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   134	                  Signing in...
   135	                </>
   136	              ) : (
   137	                'Sign in'
   138	              )}
   139	            </button>
   140	          </div>
   141	
   142	          <div className="text-center">
   143	            <span className="text-sm text-gray-600">
   144	              Don't have an account?{' '}
   145	              <Link to="/register" className="text-primary-600 hover:text-primary-500 font-medium">
   146	                Sign up here
   147	              </Link>
   148	            </span>
   149	          </div>
   150	        </form>
   151	      </div>
   152	    </div>
   153	  )
   154	}

========================================

üìÅ FILE: src/pages/MarketDetail.jsx
   Size: 5.1K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { useParams, Link } from 'react-router-dom'
     3	import { MapPin, Clock, Calendar, ArrowLeft } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketDetail() {
     7	  const { slug } = useParams()
     8	  const [market, setMarket] = useState(null)
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	
    12	  useEffect(() => {
    13	    fetchMarket()
    14	  }, [slug])
    15	
    16	  const fetchMarket = async () => {
    17	    try {
    18	      setLoading(true)
    19	      setError(null)
    20	      const marketData = await marketService.getMarket(slug)
    21	      setMarket(marketData)
    22	    } catch (error) {
    23	      console.error('Error fetching market:', error)
    24	      setError('Market not found or failed to load.')
    25	    } finally {
    26	      setLoading(false)
    27	    }
    28	  }
    29	
    30	  if (loading) {
    31	    return (
    32	      <div className="min-h-screen bg-gray-50 py-8">
    33	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    34	          <div className="text-center py-12">
    35	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    36	            <p className="mt-4 text-gray-600">Loading market details...</p>
    37	          </div>
    38	        </div>
    39	      </div>
    40	    )
    41	  }
    42	
    43	  if (error || !market) {
    44	    return (
    45	      <div className="min-h-screen bg-gray-50 py-8">
    46	        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    47	          <div className="text-center py-12">
    48	            <p className="text-red-600 mb-4">{error}</p>
    49	            <Link to="/markets" className="btn-primary">
    50	              Back to Markets
    51	            </Link>
    52	          </div>
    53	        </div>
    54	      </div>
    55	    )
    56	  }
    57	
    58	  return (
    59	    <div className="min-h-screen bg-gray-50 py-8">
    60	      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    61	        <Link to="/markets" className="inline-flex items-center text-primary-600 hover:text-primary-500 mb-6">
    62	          <ArrowLeft className="h-5 w-5 mr-2" />
    63	          Back to Markets
    64	        </Link>
    65	
    66	        <div className="bg-white rounded-lg shadow p-8 mb-8">
    67	          {market.expand?.category && (
    68	            <div className="mb-4">
    69	              <span 
    70	                className="inline-block text-white text-sm px-3 py-1 rounded-full"
    71	                style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
    72	              >
    73	                {market.expand.category.name}
    74	              </span>
    75	            </div>
    76	          )}
    77	
    78	          <h1 className="text-4xl font-bold text-gray-900 mb-4">{market.name}</h1>
    79	          
    80	          <div className="flex items-center text-gray-600 mb-6">
    81	            <MapPin className="h-5 w-5 mr-2" />
    82	            <span>{market.address || `${market.suburb}, ${market.state}`}</span>
    83	          </div>
    84	          
    85	          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    86	            {market.frequency && (
    87	              <div className="flex items-center">
    88	                <Calendar className="h-5 w-5 text-primary-600 mr-3" />
    89	                <div>
    90	                  <p className="font-medium text-gray-900">Schedule</p>
    91	                  <p className="text-gray-600">{market.frequency}</p>
    92	                </div>
    93	              </div>
    94	            )}
    95	
    96	            {market.operating_hours && (
    97	              <div className="flex items-center">
    98	                <Clock className="h-5 w-5 text-primary-600 mr-3" />
    99	                <div>
   100	                  <p className="font-medium text-gray-900">Hours</p>
   101	                  <p className="text-gray-600">{market.operating_hours}</p>
   102	                </div>
   103	              </div>
   104	            )}
   105	
   106	            {market.website && (
   107	              <div className="flex items-center">
   108	                <div>
   109	                  <p className="font-medium text-gray-900">Website</p>
   110	                  <a 
   111	                    href={market.website} 
   112	                    target="_blank" 
   113	                    rel="noopener noreferrer"
   114	                    className="text-primary-600 hover:underline"
   115	                  >
   116	                    Visit Site
   117	                  </a>
   118	                </div>
   119	              </div>
   120	            )}
   121	          </div>
   122	        </div>
   123	
   124	        {market.description && (
   125	          <div className="bg-white rounded-lg shadow p-8 mb-8">
   126	            <h2 className="text-2xl font-bold text-gray-900 mb-4">About This Market</h2>
   127	            <div className="text-gray-600 leading-relaxed">
   128	              {market.description}
   129	            </div>
   130	          </div>
   131	        )}
   132	
   133	        <div className="bg-white rounded-lg shadow p-8">
   134	          <h2 className="text-2xl font-bold text-gray-900 mb-4">Interested in Selling Here?</h2>
   135	          <p className="text-gray-600 mb-6">
   136	            Connect with the market organizers to learn about stallholder opportunities, 
   137	            application requirements, and available spaces.
   138	          </p>
   139	          <div className="flex flex-col sm:flex-row gap-4">
   140	            <Link to="/register" className="btn-primary">
   141	              Apply as Stallholder
   142	            </Link>
   143	            <button className="btn-secondary">
   144	              Contact Organizer
   145	            </button>
   146	          </div>
   147	        </div>
   148	      </div>
   149	    </div>
   150	  )
   151	}

========================================

üìÅ FILE: src/pages/MarketList.jsx
   Size: 7.3K | Modified: 2025-06-02
----------------------------------------
     1	import { useState, useEffect } from 'react'
     2	import { Link } from 'react-router-dom'
     3	import { Search, Filter, MapPin, Clock, Calendar } from 'lucide-react'
     4	import marketService from '../services/marketService'
     5	
     6	export default function MarketList() {
     7	  const [markets, setMarkets] = useState([])
     8	  const [categories, setCategories] = useState([])
     9	  const [loading, setLoading] = useState(true)
    10	  const [error, setError] = useState(null)
    11	  const [filters, setFilters] = useState({
    12	    search: '',
    13	    category: '',
    14	    state: 'SA'
    15	  })
    16	
    17	  useEffect(() => {
    18	    fetchData()
    19	  }, [filters])
    20	
    21	  const fetchData = async () => {
    22	    try {
    23	      setLoading(true)
    24	      setError(null)
    25	
    26	      // Fetch categories
    27	      const categoriesData = await marketService.getCategories()
    28	      setCategories(categoriesData)
    29	
    30	      // Fetch markets with filters
    31	      const marketsData = await marketService.getMarkets({
    32	        search: filters.search,
    33	        category: filters.category,
    34	        state: filters.state,
    35	        perPage: 50
    36	      })
    37	      
    38	      setMarkets(marketsData.items || [])
    39	    } catch (error) {
    40	      console.error('Error fetching data:', error)
    41	      setError('Failed to load markets. Please try again.')
    42	    } finally {
    43	      setLoading(false)
    44	    }
    45	  }
    46	
    47	  const handleSearchChange = (e) => {
    48	    setFilters({ ...filters, search: e.target.value })
    49	  }
    50	
    51	  const handleCategoryChange = (categoryId) => {
    52	    setFilters({ ...filters, category: categoryId })
    53	  }
    54	
    55	  if (loading) {
    56	    return (
    57	      <div className="min-h-screen bg-gray-50 py-8">
    58	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    59	          <div className="text-center py-12">
    60	            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
    61	            <p className="mt-4 text-gray-600">Loading markets...</p>
    62	          </div>
    63	        </div>
    64	      </div>
    65	    )
    66	  }
    67	
    68	  if (error) {
    69	    return (
    70	      <div className="min-h-screen bg-gray-50 py-8">
    71	        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    72	          <div className="text-center py-12">
    73	            <p className="text-red-600">{error}</p>
    74	            <button 
    75	              onClick={fetchData}
    76	              className="btn-primary mt-4"
    77	            >
    78	              Try Again
    79	            </button>
    80	          </div>
    81	        </div>
    82	      </div>
    83	    )
    84	  }
    85	
    86	  return (
    87	    <div className="min-h-screen bg-gray-50 py-8">
    88	      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    89	        <div className="mb-8">
    90	          <h1 className="text-3xl font-bold text-gray-900 mb-4">Browse Markets</h1>
    91	          <p className="text-gray-600">
    92	            Discover {markets.length} local markets across South Australia
    93	          </p>
    94	        </div>
    95	
    96	        <div className="bg-white rounded-lg shadow p-6 mb-8">
    97	          <div className="grid grid-cols-1 md:grid-cols-12 gap-4">
    98	            <div className="md:col-span-6">
    99	              <div className="relative">
   100	                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
   101	                <input
   102	                  type="text"
   103	                  placeholder="Search markets by name or location..."
   104	                  className="input-field pl-10"
   105	                  value={filters.search}
   106	                  onChange={handleSearchChange}
   107	                />
   108	              </div>
   109	            </div>
   110	
   111	            <div className="md:col-span-4">
   112	              <select
   113	                className="input-field"
   114	                value={filters.category}
   115	                onChange={(e) => handleCategoryChange(e.target.value)}
   116	              >
   117	                <option value="">All Categories</option>
   118	                {categories.map((category) => (
   119	                  <option key={category.id} value={category.id}>
   120	                    {category.name}
   121	                  </option>
   122	                ))}
   123	              </select>
   124	            </div>
   125	
   126	            <div className="md:col-span-2">
   127	              <select
   128	                className="input-field"
   129	                value={filters.state}
   130	                onChange={(e) => setFilters({ ...filters, state: e.target.value })}
   131	              >
   132	                <option value="SA">South Australia</option>
   133	                <option value="VIC">Victoria</option>
   134	                <option value="NSW">New South Wales</option>
   135	                <option value="QLD">Queensland</option>
   136	                <option value="WA">Western Australia</option>
   137	                <option value="TAS">Tasmania</option>
   138	                <option value="NT">Northern Territory</option>
   139	                <option value="ACT">ACT</option>
   140	              </select>
   141	            </div>
   142	          </div>
   143	        </div>
   144	
   145	        {markets.length === 0 ? (
   146	          <div className="text-center py-12">
   147	            <p className="text-gray-600">No markets found matching your criteria.</p>
   148	            <button 
   149	              onClick={() => setFilters({ search: '', category: '', state: 'SA' })}
   150	              className="btn-secondary mt-4"
   151	            >
   152	              Clear Filters
   153	            </button>
   154	          </div>
   155	        ) : (
   156	          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
   157	            {markets.map((market) => (
   158	              <div key={market.id} className="card hover:shadow-lg transition-shadow">
   159	                {market.expand?.category && (
   160	                  <div className="mb-4">
   161	                    <span 
   162	                      className="inline-block text-white text-xs px-2 py-1 rounded-full"
   163	                      style={{ backgroundColor: market.expand.category.color || '#6b7280' }}
   164	                    >
   165	                      {market.expand.category.name}
   166	                    </span>
   167	                  </div>
   168	                )}
   169	
   170	                <h3 className="text-xl font-semibold text-gray-900 mb-2">{market.name}</h3>
   171	                
   172	                <div className="flex items-center text-gray-600 mb-2">
   173	                  <MapPin className="h-4 w-4 mr-1" />
   174	                  <span>{market.suburb}, {market.state}</span>
   175	                </div>
   176	
   177	                {market.frequency && (
   178	                  <div className="flex items-center text-gray-600 mb-2">
   179	                    <Calendar className="h-4 w-4 mr-1" />
   180	                    <span>{market.frequency}</span>
   181	                  </div>
   182	                )}
   183	
   184	                {market.operating_hours && (
   185	                  <div className="flex items-center text-gray-600 mb-4">
   186	                    <Clock className="h-4 w-4 mr-1" />
   187	                    <span>{market.operating_hours}</span>
   188	                  </div>
   189	                )}
   190	
   191	                {market.description && (
   192	                  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
   193	                    {market.description.substring(0, 100)}...
   194	                  </p>
   195	                )}
   196	
   197	                <div className="flex gap-2">
   198	                  <Link 
   199	                    to={`/markets/${market.slug}`}
   200	                    className="btn-primary flex-1 text-center"
   201	                  >
   202	                    View Details
   203	                  </Link>
   204	                  {market.website && (
   205	                    <button className="btn-secondary px-3 py-2" title="Visit Website">
   206	                      üåê
   207	                    </button>
   208	                  )}
   209	                </div>
   210	              </div>
   211	            ))}
   212	          </div>
   213	        )}
   214	      </div>
   215	    </div>
   216	  )
   217	}

========================================

üìÅ FILE: src/pages/Register.jsx
   Size: 5.9K | Modified: 2025-06-03
----------------------------------------
     1	import { useState } from 'react'
     2	import { Link, useNavigate } from 'react-router-dom'
     3	import { Eye, EyeOff, Loader2 } from 'lucide-react'
     4	import { useAuth } from '../contexts/AuthContext'
     5	
     6	export default function Register() {
     7	  const [showPassword, setShowPassword] = useState(false)
     8	  const [formData, setFormData] = useState({
     9	    name: '',
    10	    email: '',
    11	    password: '',
    12	    role: 'customer'
    13	  })
    14	  
    15	  const { register, loading, error } = useAuth()
    16	  const navigate = useNavigate()
    17	
    18	  const handleSubmit = async (e) => {
    19	    e.preventDefault()
    20	    try {
    21	      await register(formData)
    22	      navigate('/dashboard')
    23	    } catch (err) {
    24	      // Error is handled by AuthContext
    25	      console.error('Registration failed:', err)
    26	    }
    27	  }
    28	
    29	  return (
    30	    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    31	      <div className="max-w-md w-full space-y-8">
    32	        <div>
    33	          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
    34	            Join SA Markets
    35	          </h2>
    36	          <p className="mt-2 text-center text-sm text-gray-600">
    37	            Create your account to get started
    38	          </p>
    39	        </div>
    40	        
    41	        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
    42	          {error && (
    43	            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    44	              {typeof error === 'object' ? error.general || 'Registration failed' : error}
    45	            </div>
    46	          )}
    47	          
    48	          <div className="space-y-4">
    49	            <div>
    50	              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
    51	                Full Name
    52	              </label>
    53	              <input
    54	                id="name"
    55	                name="name"
    56	                type="text"
    57	                required
    58	                className="input-field mt-1"
    59	                placeholder="Enter your full name"
    60	                value={formData.name}
    61	                onChange={(e) => setFormData({...formData, name: e.target.value})}
    62	                disabled={loading}
    63	              />
    64	              {error?.name && (
    65	                <p className="mt-1 text-sm text-red-600">{error.name}</p>
    66	              )}
    67	            </div>
    68	            
    69	            <div>
    70	              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
    71	                Email address
    72	              </label>
    73	              <input
    74	                id="email"
    75	                name="email"
    76	                type="email"
    77	                required
    78	                className="input-field mt-1"
    79	                placeholder="Enter your email"
    80	                value={formData.email}
    81	                onChange={(e) => setFormData({...formData, email: e.target.value})}
    82	                disabled={loading}
    83	              />
    84	              {error?.email && (
    85	                <p className="mt-1 text-sm text-red-600">{error.email}</p>
    86	              )}
    87	            </div>
    88	            
    89	            <div>
    90	              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
    91	                Password
    92	              </label>
    93	              <div className="mt-1 relative">
    94	                <input
    95	                  id="password"
    96	                  name="password"
    97	                  type={showPassword ? 'text' : 'password'}
    98	                  required
    99	                  className="input-field pr-10"
   100	                  placeholder="Create a password"
   101	                  value={formData.password}
   102	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
   103	                  disabled={loading}
   104	                />
   105	                <button
   106	                  type="button"
   107	                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
   108	                  onClick={() => setShowPassword(!showPassword)}
   109	                  disabled={loading}
   110	                >
   111	                  {showPassword ? (
   112	                    <EyeOff className="h-5 w-5 text-gray-400" />
   113	                  ) : (
   114	                    <Eye className="h-5 w-5 text-gray-400" />
   115	                  )}
   116	                </button>
   117	              </div>
   118	              {error?.password && (
   119	                <p className="mt-1 text-sm text-red-600">{error.password}</p>
   120	              )}
   121	            </div>
   122	            
   123	            <div>
   124	              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
   125	                I am a...
   126	              </label>
   127	              <select
   128	                id="role"
   129	                name="role"
   130	                className="input-field mt-1"
   131	                value={formData.role}
   132	                onChange={(e) => setFormData({...formData, role: e.target.value})}
   133	                disabled={loading}
   134	              >
   135	                <option value="customer">Market Customer</option>
   136	                <option value="stallholder">Stallholder/Vendor</option>
   137	                <option value="organizer">Market Organizer</option>
   138	              </select>
   139	              {error?.role && (
   140	                <p className="mt-1 text-sm text-red-600">{error.role}</p>
   141	              )}
   142	            </div>
   143	          </div>
   144	
   145	          <div>
   146	            <button 
   147	              type="submit" 
   148	              className="btn-primary w-full flex items-center justify-center"
   149	              disabled={loading}
   150	            >
   151	              {loading ? (
   152	                <>
   153	                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
   154	                  Creating account...
   155	                </>
   156	              ) : (
   157	                'Create Account'
   158	              )}
   159	            </button>
   160	          </div>
   161	
   162	          <div className="text-center">
   163	            <span className="text-sm text-gray-600">
   164	              Already have an account?{' '}
   165	              <Link to="/login" className="text-primary-600 hover:text-primary-500 font-medium">
   166	                Sign in here
   167	              </Link>
   168	            </span>
   169	          </div>
   170	        </form>
   171	      </div>
   172	    </div>
   173	  )
   174	}

========================================

üìÅ FILE: src/scripts/auth-manager.js
   Size: 5.2K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/auth-manager.js - Fixed Authentication System
     2	import fs from 'fs/promises';
     3	import { existsSync } from 'fs';
     4	import crypto from 'crypto';
     5	import os from 'os';
     6	import path from 'path';
     7	import { createInterface } from 'readline';
     8	
     9	class AuthManager {
    10	  constructor() {
    11	    this.configDir = path.join(os.homedir(), '.sa-markets');
    12	    this.tokenFile = path.join(this.configDir, 'auth.json');
    13	    this.encryptionKey = this.getOrCreateEncryptionKey();
    14	  }
    15	
    16	  async ensureConfigDir() {
    17	    if (!existsSync(this.configDir)) {
    18	      await fs.mkdir(this.configDir, { recursive: true, mode: 0o700 });
    19	    }
    20	  }
    21	
    22	  getOrCreateEncryptionKey() {
    23	    // Use a combination of machine-specific data for encryption
    24	    const machineId = os.hostname() + os.platform() + os.arch();
    25	    return crypto.createHash('sha256').update(machineId).digest();
    26	  }
    27	
    28	  encrypt(text) {
    29	    const iv = crypto.randomBytes(16);
    30	    const cipher = crypto.createCipheriv('aes-256-cbc', this.encryptionKey, iv);
    31	    let encrypted = cipher.update(text, 'utf8', 'hex');
    32	    encrypted += cipher.final('hex');
    33	    return iv.toString('hex') + ':' + encrypted;
    34	  }
    35	
    36	  decrypt(encryptedData) {
    37	    try {
    38	      const [ivHex, encrypted] = encryptedData.split(':');
    39	      const iv = Buffer.from(ivHex, 'hex');
    40	      const decipher = crypto.createDecipheriv('aes-256-cbc', this.encryptionKey, iv);
    41	      let decrypted = decipher.update(encrypted, 'hex', 'utf8');
    42	      decrypted += decipher.final('utf8');
    43	      return decrypted;
    44	    } catch (error) {
    45	      throw new Error('Failed to decrypt stored credentials');
    46	    }
    47	  }
    48	
    49	  async saveCredentials(email, password, token) {
    50	    try {
    51	      await this.ensureConfigDir();
    52	      
    53	      const credentials = {
    54	        email: this.encrypt(email),
    55	        password: this.encrypt(password),
    56	        token: this.encrypt(token),
    57	        timestamp: Date.now(),
    58	        expiresAt: Date.now() + (7 * 24 * 60 * 60 * 1000) // 7 days
    59	      };
    60	
    61	      await fs.writeFile(this.tokenFile, JSON.stringify(credentials, null, 2), { mode: 0o600 });
    62	      console.log('üîê Credentials saved securely');
    63	    } catch (error) {
    64	      console.error('‚ùå Error saving credentials:', error.message);
    65	    }
    66	  }
    67	
    68	  async loadCredentials() {
    69	    try {
    70	      if (!existsSync(this.tokenFile)) {
    71	        return null;
    72	      }
    73	
    74	      const credentialsData = await fs.readFile(this.tokenFile, 'utf8');
    75	      const credentials = JSON.parse(credentialsData);
    76	
    77	      // Check if credentials are expired
    78	      if (Date.now() > credentials.expiresAt) {
    79	        await this.clearCredentials();
    80	        return null;
    81	      }
    82	
    83	      return {
    84	        email: this.decrypt(credentials.email),
    85	        password: this.decrypt(credentials.password),
    86	        token: this.decrypt(credentials.token),
    87	        timestamp: credentials.timestamp,
    88	        expiresAt: credentials.expiresAt
    89	      };
    90	    } catch (error) {
    91	      console.error('‚ùå Error loading credentials:', error.message);
    92	      await this.clearCredentials(); // Clear corrupted credentials
    93	      return null;
    94	    }
    95	  }
    96	
    97	  async clearCredentials() {
    98	    try {
    99	      if (existsSync(this.tokenFile)) {
   100	        await fs.unlink(this.tokenFile);
   101	        console.log('üóëÔ∏è  Stored credentials cleared');
   102	      }
   103	    } catch (error) {
   104	      console.error('‚ùå Error clearing credentials:', error.message);
   105	    }
   106	  }
   107	}
   108	
   109	// Fixed password input with better cross-platform support
   110	class PasswordInput {
   111	  static async getPassword(prompt = 'Password: ') {
   112	    return new Promise((resolve) => {
   113	      const rl = createInterface({
   114	        input: process.stdin,
   115	        output: process.stdout
   116	      });
   117	
   118	      process.stdout.write(prompt);
   119	      
   120	      let password = '';
   121	      let stdin = process.stdin;
   122	      
   123	      // Hide input
   124	      stdin.setRawMode(true);
   125	      stdin.resume();
   126	      stdin.setEncoding('utf8');
   127	
   128	      const onData = (char) => {
   129	        switch (char) {
   130	          case '\n':
   131	          case '\r':
   132	          case '\u0004': // Ctrl+D
   133	            stdin.setRawMode(false);
   134	            stdin.pause();
   135	            stdin.removeListener('data', onData);
   136	            rl.close();
   137	            process.stdout.write('\n');
   138	            resolve(password);
   139	            break;
   140	          case '\u0003': // Ctrl+C
   141	            console.log('\n^C');
   142	            process.exit(1);
   143	            break;
   144	          case '\u007f': // Backspace
   145	          case '\b': // Backspace on Windows
   146	            if (password.length > 0) {
   147	              password = password.slice(0, -1);
   148	              process.stdout.write('\b \b');
   149	            }
   150	            break;
   151	          default:
   152	            // Only accept printable characters
   153	            if (char.charCodeAt(0) >= 32 && char.charCodeAt(0) < 127) {
   154	              password += char;
   155	              process.stdout.write('*');
   156	            }
   157	            break;
   158	        }
   159	      };
   160	
   161	      stdin.on('data', onData);
   162	    });
   163	  }
   164	
   165	  static async getInput(prompt) {
   166	    const rl = createInterface({
   167	      input: process.stdin,
   168	      output: process.stdout
   169	    });
   170	
   171	    try {
   172	      const answer = await new Promise((resolve) => {
   173	        rl.question(prompt, (answer) => {
   174	          resolve(answer);
   175	        });
   176	      });
   177	      return answer.trim();
   178	    } finally {
   179	      rl.close();
   180	    }
   181	  }
   182	}
   183	
   184	export { AuthManager, PasswordInput };

========================================

üìÅ FILE: src/scripts/manage-database.js
   Size: 11K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/manage-database.js - ES Module Version
     2	import PocketBase from 'pocketbase';
     3	import fs from 'fs';
     4	
     5	const pb = new PocketBase(process.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     6	
     7	class DatabaseManager {
     8	  constructor() {
     9	    this.newMarketFields = [
    10	      // Enhanced Schedule Fields
    11	      { name: "frequency_type", type: "select", required: false, options: {
    12	        maxSelect: 1, values: ["regular", "weekly_pattern", "monthly_pattern", "custom_dates"]
    13	      }},
    14	      { name: "frequency_details", type: "json", required: false },
    15	      { name: "start_time", type: "text", required: false },
    16	      { name: "end_time", type: "text", required: false },
    17	      { name: "setup_time", type: "text", required: false },
    18	      { name: "packdown_time", type: "text", required: false },
    19	      
    20	      // Enhanced Location Fields
    21	      { name: "latitude", type: "number", required: false },
    22	      { name: "longitude", type: "number", required: false },
    23	      { name: "venue_type", type: "select", required: false, options: {
    24	        maxSelect: 1, values: ["outdoor", "indoor", "covered", "mixed"]
    25	      }},
    26	      
    27	      // Amenities (boolean fields)
    28	      { name: "toilets", type: "bool", required: false },
    29	      { name: "parking", type: "bool", required: false },
    30	      { name: "food_court", type: "bool", required: false },
    31	      { name: "atm", type: "bool", required: false },
    32	      { name: "wheelchair_access", type: "bool", required: false },
    33	      { name: "childrens_area", type: "bool", required: false },
    34	      { name: "entertainment", type: "bool", required: false },
    35	      { name: "seating", type: "bool", required: false },
    36	      { name: "weather_protection", type: "bool", required: false },
    37	      { name: "storage_available", type: "bool", required: false },
    38	      { name: "loading_dock", type: "bool", required: false },
    39	      { name: "security", type: "bool", required: false },
    40	      { name: "wifi", type: "bool", required: false },
    41	      { name: "pet_friendly", type: "bool", required: false },
    42	      
    43	      // Enhanced Fee Structure
    44	      { name: "fee_structure", type: "json", required: false },
    45	      { name: "base_stall_fee", type: "number", required: false },
    46	      { name: "application_fee", type: "number", required: false },
    47	      { name: "bond_required", type: "bool", required: false },
    48	      { name: "bond_amount", type: "number", required: false },
    49	      
    50	      // Stallholder Requirements
    51	      { name: "insurance_required", type: "bool", required: false },
    52	      { name: "insurance_minimum", type: "number", required: false },
    53	      { name: "abn_required", type: "bool", required: false },
    54	      { name: "power_available", type: "bool", required: false },
    55	      { name: "power_cost", type: "number", required: false },
    56	      
    57	      // Capacity
    58	      { name: "max_stalls", type: "number", required: false },
    59	      { name: "stall_sizes", type: "json", required: false },
    60	      
    61	      // Media
    62	      { name: "featured_image", type: "file", required: false, options: { maxSelect: 1, maxSize: 5242880 } },
    63	      { name: "gallery_images", type: "file", required: false, options: { maxSelect: 10, maxSize: 5242880 } },
    64	      
    65	      // Analytics
    66	      { name: "view_count", type: "number", required: false },
    67	      { name: "favorite_count", type: "number", required: false }
    68	    ];
    69	  }
    70	
    71	  async addFieldsToMarkets() {
    72	    try {
    73	      console.log('üîÑ Adding new fields to markets collection...');
    74	      
    75	      // Get current markets collection
    76	      const collection = await pb.collections.getOne('markets');
    77	      const currentFields = collection.schema.map(field => field.name);
    78	      
    79	      console.log(`üìã Current fields: ${currentFields.length}`);
    80	      console.log(`üìã Fields to add: ${this.newMarketFields.length}`);
    81	      
    82	      // Add new fields that don't exist
    83	      let fieldsAdded = 0;
    84	      const updatedSchema = [...collection.schema];
    85	      
    86	      for (const newField of this.newMarketFields) {
    87	        if (!currentFields.includes(newField.name)) {
    88	          updatedSchema.push(newField);
    89	          fieldsAdded++;
    90	          console.log(`‚úÖ Will add field: ${newField.name} (${newField.type})`);
    91	        } else {
    92	          console.log(`‚è≠Ô∏è  Field already exists: ${newField.name}`);
    93	        }
    94	      }
    95	      
    96	      if (fieldsAdded > 0) {
    97	        console.log(`üîÑ Updating collection with ${fieldsAdded} new fields...`);
    98	        
    99	        // Update the collection with new schema
   100	        await pb.collections.update(collection.id, {
   101	          schema: updatedSchema
   102	        });
   103	        
   104	        console.log(`üéâ Successfully added ${fieldsAdded} new fields to markets collection!`);
   105	      } else {
   106	        console.log('‚úÖ All fields already exist, no updates needed.');
   107	      }
   108	      
   109	    } catch (error) {
   110	      console.error('‚ùå Error updating markets collection:', error);
   111	      
   112	      // More detailed error information
   113	      if (error.response) {
   114	        console.error('Response data:', error.response.data);
   115	      }
   116	      
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  async backupSchema() {
   122	    try {
   123	      console.log('üíæ Creating schema backup...');
   124	      
   125	      const collections = ['users', 'markets', 'market_categories', 'stallholders', 'applications', 'reviews'];
   126	      const backup = {
   127	        timestamp: new Date().toISOString(),
   128	        collections: {}
   129	      };
   130	      
   131	      for (const name of collections) {
   132	        try {
   133	          const collection = await pb.collections.getOne(name);
   134	          backup.collections[name] = collection;
   135	          console.log(`‚úÖ Backed up ${name} (${collection.schema.length} fields)`);
   136	        } catch (error) {
   137	          console.log(`‚ö†Ô∏è  Could not backup ${name}: Collection not found`);
   138	        }
   139	      }
   140	
   141	      const backupFile = `schema-backup-${new Date().toISOString().split('T')[0]}.json`;
   142	      fs.writeFileSync(backupFile, JSON.stringify(backup, null, 2));
   143	      console.log(`üíæ Schema backup saved to: ${backupFile}`);
   144	      
   145	      return backupFile;
   146	    } catch (error) {
   147	      console.error('‚ùå Error creating backup:', error);
   148	      throw error;
   149	    }
   150	  }
   151	
   152	  async validateConnection() {
   153	    try {
   154	      console.log('üîç Testing PocketBase connection...');
   155	      const response = await fetch(`${pb.baseUrl}/api/health`);
   156	      if (response.ok) {
   157	        console.log('‚úÖ PocketBase is running');
   158	        return true;
   159	      } else {
   160	        console.log('‚ùå PocketBase health check failed');
   161	        return false;
   162	      }
   163	    } catch (error) {
   164	      console.log('‚ùå Cannot connect to PocketBase:', error.message);
   165	      return false;
   166	    }
   167	  }
   168	
   169	  async listCollections() {
   170	    try {
   171	      console.log('üìã Current collections:');
   172	      const collections = await pb.collections.getFullList();
   173	      collections.forEach(col => {
   174	        console.log(`  üìÅ ${col.name} (${col.schema.length} fields)`);
   175	      });
   176	      return collections;
   177	    } catch (error) {
   178	      console.error('‚ùå Error listing collections:', error);
   179	      throw error;
   180	    }
   181	  }
   182	
   183	  async showMarketFields() {
   184	    try {
   185	      const collection = await pb.collections.getOne('markets');
   186	      console.log(`\nüìã Current markets collection fields (${collection.schema.length}):`);
   187	      collection.schema.forEach((field, index) => {
   188	        const required = field.required ? 'üî¥ REQUIRED' : '‚ö™ optional';
   189	        console.log(`  ${index + 1}. ${field.name} (${field.type}) ${required}`);
   190	      });
   191	      return collection.schema;
   192	    } catch (error) {
   193	      console.error('‚ùå Error showing market fields:', error);
   194	      throw error;
   195	    }
   196	  }
   197	
   198	  async checkMissingFields() {
   199	    try {
   200	      const collection = await pb.collections.getOne('markets');
   201	      const currentFields = collection.schema.map(field => field.name);
   202	      
   203	      const missingFields = this.newMarketFields.filter(
   204	        newField => !currentFields.includes(newField.name)
   205	      );
   206	      
   207	      console.log(`\nüîç Missing fields analysis:`);
   208	      console.log(`üìä Current fields: ${currentFields.length}`);
   209	      console.log(`üìä Available to add: ${this.newMarketFields.length}`);
   210	      console.log(`üìä Missing fields: ${missingFields.length}`);
   211	      
   212	      if (missingFields.length > 0) {
   213	        console.log(`\nüìã Missing fields:`);
   214	        missingFields.forEach((field, index) => {
   215	          console.log(`  ${index + 1}. ${field.name} (${field.type})`);
   216	        });
   217	      } else {
   218	        console.log(`\n‚úÖ All fields are already present!`);
   219	      }
   220	      
   221	      return missingFields;
   222	    } catch (error) {
   223	      console.error('‚ùå Error checking missing fields:', error);
   224	      throw error;
   225	    }
   226	  }
   227	}
   228	
   229	// CLI Interface
   230	async function main() {
   231	  const args = process.argv.slice(2);
   232	  const command = args[0];
   233	  
   234	  const manager = new DatabaseManager();
   235	
   236	  // Test connection first
   237	  const connected = await manager.validateConnection();
   238	  if (!connected) {
   239	    console.log('\n‚ùå Cannot connect to PocketBase.');
   240	    console.log('Make sure PocketBase is running: ./pocketbase serve');
   241	    console.log('Expected URL: http://localhost:8090');
   242	    process.exit(1);
   243	  }
   244	
   245	  try {
   246	    switch (command) {
   247	      case 'backup':
   248	        await manager.backupSchema();
   249	        break;
   250	        
   251	      case 'update':
   252	        console.log('üöÄ Starting markets collection update...\n');
   253	        await manager.backupSchema();
   254	        console.log(''); // Empty line
   255	        await manager.addFieldsToMarkets();
   256	        console.log('\n‚úÖ Update complete!');
   257	        console.log('Run "node scripts/manage-database.js fields" to see updated schema');
   258	        break;
   259	        
   260	      case 'list':
   261	        await manager.listCollections();
   262	        break;
   263	        
   264	      case 'fields':
   265	        await manager.showMarketFields();
   266	        break;
   267	        
   268	      case 'check':
   269	        await manager.checkMissingFields();
   270	        break;
   271	        
   272	      case 'validate':
   273	        await manager.listCollections();
   274	        await manager.showMarketFields();
   275	        await manager.checkMissingFields();
   276	        break;
   277	        
   278	      default:
   279	        console.log(`
   280	üóÑÔ∏è  Database Schema Manager
   281	
   282	Usage:
   283	  node scripts/manage-database.js <command>
   284	
   285	Commands:
   286	  backup    - Create backup of current schema
   287	  update    - Add new fields to markets collection (with backup)
   288	  list      - Show all collections
   289	  fields    - Show current market fields
   290	  check     - Check which fields are missing
   291	  validate  - Complete analysis (list + fields + check)
   292	
   293	Recommended workflow:
   294	  1. node scripts/manage-database.js check     # See what will be added
   295	  2. node scripts/manage-database.js backup   # Create backup
   296	  3. node scripts/manage-database.js update   # Apply changes
   297	  4. node scripts/manage-database.js fields   # Verify results
   298	
   299	Examples:
   300	  node scripts/manage-database.js check
   301	  node scripts/manage-database.js update
   302	  node scripts/manage-database.js validate
   303	        `);
   304	    }
   305	  } catch (error) {
   306	    console.error('\n‚ùå Command failed:', error.message);
   307	    process.exit(1);
   308	  }
   309	}
   310	
   311	main().catch(error => {
   312	  console.error('\n‚ùå Script failed:', error.message);
   313	  process.exit(1);
   314	});

========================================

üìÅ FILE: src/scripts/save-schema.js
   Size: 27K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/save-schema.js - Save the provided schema to database.json
     2	import fs from 'fs/promises';
     3	import { existsSync } from 'fs';
     4	
     5	const schema = {
     6	  "version": "1.0.0",
     7	  "description": "SA Markets Directory Database Schema",
     8	  "collections": {
     9	    "users": {
    10	      "name": "users",
    11	      "type": "auth",
    12	      "system": true,
    13	      "description": "Built-in PocketBase users collection with custom fields",
    14	      "schema": [
    15	        {
    16	          "name": "role",
    17	          "type": "select",
    18	          "required": true,
    19	          "options": {
    20	            "maxSelect": 1,
    21	            "values": ["customer", "stallholder", "organizer"]
    22	          },
    23	          "description": "User role in the platform"
    24	        },
    25	        {
    26	          "name": "phone",
    27	          "type": "text",
    28	          "required": false,
    29	          "options": {
    30	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
    31	          },
    32	          "description": "Australian phone number"
    33	        },
    34	        {
    35	          "name": "verified",
    36	          "type": "bool",
    37	          "required": false,
    38	          "description": "Email verification status"
    39	        },
    40	        {
    41	          "name": "subscription_tier",
    42	          "type": "select",
    43	          "required": false,
    44	          "options": {
    45	            "maxSelect": 1,
    46	            "values": ["free", "basic", "premium", "enterprise"]
    47	          },
    48	          "description": "Subscription level"
    49	        }
    50	      ],
    51	      "listRule": "id = @request.auth.id",
    52	      "viewRule": "id = @request.auth.id",
    53	      "createRule": "",
    54	      "updateRule": "id = @request.auth.id",
    55	      "deleteRule": "id = @request.auth.id"
    56	    },
    57	
    58	    "market_categories": {
    59	      "name": "market_categories",
    60	      "type": "base",
    61	      "description": "Market categorization system",
    62	      "schema": [
    63	        {
    64	          "name": "name",
    65	          "type": "text",
    66	          "required": true,
    67	          "options": {
    68	            "min": 2,
    69	            "max": 50
    70	          },
    71	          "description": "Category name"
    72	        },
    73	        {
    74	          "name": "description",
    75	          "type": "text",
    76	          "required": false,
    77	          "options": {
    78	            "max": 200
    79	          },
    80	          "description": "Category description"
    81	        },
    82	        {
    83	          "name": "color",
    84	          "type": "text",
    85	          "required": false,
    86	          "options": {
    87	            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
    88	          },
    89	          "description": "Hex color code for UI"
    90	        },
    91	        {
    92	          "name": "icon",
    93	          "type": "text",
    94	          "required": false,
    95	          "options": {
    96	            "max": 50
    97	          },
    98	          "description": "Icon identifier"
    99	        },
   100	        {
   101	          "name": "sort_order",
   102	          "type": "number",
   103	          "required": false,
   104	          "options": {
   105	            "min": 0
   106	          },
   107	          "description": "Display order"
   108	        }
   109	      ],
   110	      "listRule": "",
   111	      "viewRule": "",
   112	      "createRule": "@request.auth.role = \"organizer\"",
   113	      "updateRule": "@request.auth.role = \"organizer\"",
   114	      "deleteRule": "@request.auth.role = \"organizer\""
   115	    },
   116	
   117	    "markets": {
   118	      "name": "markets",
   119	      "type": "base",
   120	      "description": "Market listings and information",
   121	      "schema": [
   122	        {
   123	          "name": "name",
   124	          "type": "text",
   125	          "required": true,
   126	          "options": {
   127	            "min": 2,
   128	            "max": 100
   129	          },
   130	          "description": "Market name"
   131	        },
   132	        {
   133	          "name": "slug",
   134	          "type": "text",
   135	          "required": true,
   136	          "options": {
   137	            "pattern": "^[a-z0-9-]+$",
   138	            "min": 2,
   139	            "max": 100
   140	          },
   141	          "description": "URL-friendly identifier"
   142	        },
   143	        {
   144	          "name": "description",
   145	          "type": "text",
   146	          "required": false,
   147	          "options": {
   148	            "max": 2000
   149	          },
   150	          "description": "Market description"
   151	        },
   152	        {
   153	          "name": "category",
   154	          "type": "relation",
   155	          "required": true,
   156	          "options": {
   157	            "collectionId": "market_categories",
   158	            "cascadeDelete": false,
   159	            "minSelect": null,
   160	            "maxSelect": 1,
   161	            "displayFields": ["name"]
   162	          },
   163	          "description": "Market category"
   164	        },
   165	        {
   166	          "name": "organizer",
   167	          "type": "relation",
   168	          "required": true,
   169	          "options": {
   170	            "collectionId": "users",
   171	            "cascadeDelete": false,
   172	            "minSelect": null,
   173	            "maxSelect": 1,
   174	            "displayFields": ["name", "email"]
   175	          },
   176	          "description": "Market organizer"
   177	        },
   178	        {
   179	          "name": "address",
   180	          "type": "text",
   181	          "required": true,
   182	          "options": {
   183	            "max": 200
   184	          },
   185	          "description": "Street address"
   186	        },
   187	        {
   188	          "name": "suburb",
   189	          "type": "text",
   190	          "required": true,
   191	          "options": {
   192	            "max": 50
   193	          },
   194	          "description": "Suburb/City"
   195	        },
   196	        {
   197	          "name": "state",
   198	          "type": "select",
   199	          "required": true,
   200	          "options": {
   201	            "maxSelect": 1,
   202	            "values": ["SA", "VIC", "NSW", "QLD", "WA", "TAS", "NT", "ACT"]
   203	          },
   204	          "description": "Australian state"
   205	        },
   206	        {
   207	          "name": "postcode",
   208	          "type": "text",
   209	          "required": true,
   210	          "options": {
   211	            "pattern": "^[0-9]{4}$"
   212	          },
   213	          "description": "Australian postcode"
   214	        },
   215	        {
   216	          "name": "latitude",
   217	          "type": "number",
   218	          "required": false,
   219	          "description": "GPS latitude"
   220	        },
   221	        {
   222	          "name": "longitude",
   223	          "type": "number",
   224	          "required": false,
   225	          "description": "GPS longitude"
   226	        },
   227	        {
   228	          "name": "venue_type",
   229	          "type": "select",
   230	          "required": false,
   231	          "options": {
   232	            "maxSelect": 1,
   233	            "values": ["outdoor", "indoor", "covered", "mixed"]
   234	          },
   235	          "description": "Venue type"
   236	        },
   237	        {
   238	          "name": "frequency_type",
   239	          "type": "select",
   240	          "required": false,
   241	          "options": {
   242	            "maxSelect": 1,
   243	            "values": ["regular", "weekly_pattern", "monthly_pattern", "custom_dates"]
   244	          },
   245	          "description": "How often market runs"
   246	        },
   247	        {
   248	          "name": "frequency_value",
   249	          "type": "text",
   250	          "required": false,
   251	          "options": {
   252	            "max": 100
   253	          },
   254	          "description": "Frequency description"
   255	        },
   256	        {
   257	          "name": "frequency_details",
   258	          "type": "json",
   259	          "required": false,
   260	          "description": "Complex frequency patterns"
   261	        },
   262	        {
   263	          "name": "start_time",
   264	          "type": "text",
   265	          "required": false,
   266	          "options": {
   267	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   268	          },
   269	          "description": "Market start time (HH:MM)"
   270	        },
   271	        {
   272	          "name": "end_time",
   273	          "type": "text",
   274	          "required": false,
   275	          "options": {
   276	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   277	          },
   278	          "description": "Market end time (HH:MM)"
   279	        },
   280	        {
   281	          "name": "setup_time",
   282	          "type": "text",
   283	          "required": false,
   284	          "options": {
   285	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   286	          },
   287	          "description": "Stallholder setup time"
   288	        },
   289	        {
   290	          "name": "packdown_time",
   291	          "type": "text",
   292	          "required": false,
   293	          "options": {
   294	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   295	          },
   296	          "description": "Stallholder packdown time"
   297	        },
   298	        {
   299	          "name": "start_date",
   300	          "type": "date",
   301	          "required": false,
   302	          "description": "Market series start date"
   303	        },
   304	        {
   305	          "name": "end_date",
   306	          "type": "date",
   307	          "required": false,
   308	          "description": "Market series end date"
   309	        },
   310	        {
   311	          "name": "contact_email",
   312	          "type": "email",
   313	          "required": true,
   314	          "description": "Market contact email"
   315	        },
   316	        {
   317	          "name": "contact_phone",
   318	          "type": "text",
   319	          "required": false,
   320	          "options": {
   321	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   322	          },
   323	          "description": "Market contact phone"
   324	        },
   325	        {
   326	          "name": "website",
   327	          "type": "url",
   328	          "required": false,
   329	          "description": "Market website"
   330	        },
   331	        {
   332	          "name": "social_media",
   333	          "type": "json",
   334	          "required": false,
   335	          "description": "Social media links"
   336	        },
   337	        {
   338	          "name": "toilets",
   339	          "type": "bool",
   340	          "required": false,
   341	          "description": "Toilets available"
   342	        },
   343	        {
   344	          "name": "parking",
   345	          "type": "bool",
   346	          "required": false,
   347	          "description": "Parking available"
   348	        },
   349	        {
   350	          "name": "food_court",
   351	          "type": "bool",
   352	          "required": false,
   353	          "description": "Food court available"
   354	        },
   355	        {
   356	          "name": "atm",
   357	          "type": "bool",
   358	          "required": false,
   359	          "description": "ATM available"
   360	        },
   361	        {
   362	          "name": "wheelchair_access",
   363	          "type": "bool",
   364	          "required": false,
   365	          "description": "Wheelchair accessible"
   366	        },
   367	        {
   368	          "name": "childrens_area",
   369	          "type": "bool",
   370	          "required": false,
   371	          "description": "Children's area available"
   372	        },
   373	        {
   374	          "name": "entertainment",
   375	          "type": "bool",
   376	          "required": false,
   377	          "description": "Entertainment provided"
   378	        },
   379	        {
   380	          "name": "seating",
   381	          "type": "bool",
   382	          "required": false,
   383	          "description": "Seating available"
   384	        },
   385	        {
   386	          "name": "weather_protection",
   387	          "type": "bool",
   388	          "required": false,
   389	          "description": "Covered/sheltered areas"
   390	        },
   391	        {
   392	          "name": "storage_available",
   393	          "type": "bool",
   394	          "required": false,
   395	          "description": "Storage for stallholders"
   396	        },
   397	        {
   398	          "name": "loading_dock",
   399	          "type": "bool",
   400	          "required": false,
   401	          "description": "Loading dock access"
   402	        },
   403	        {
   404	          "name": "security",
   405	          "type": "bool",
   406	          "required": false,
   407	          "description": "Security provided"
   408	        },
   409	        {
   410	          "name": "wifi",
   411	          "type": "bool",
   412	          "required": false,
   413	          "description": "WiFi available"
   414	        },
   415	        {
   416	          "name": "pet_friendly",
   417	          "type": "bool",
   418	          "required": false,
   419	          "description": "Pets allowed"
   420	        },
   421	        {
   422	          "name": "fee_structure",
   423	          "type": "json",
   424	          "required": false,
   425	          "description": "Complete fee structure with tiers"
   426	        },
   427	        {
   428	          "name": "base_stall_fee",
   429	          "type": "number",
   430	          "required": false,
   431	          "options": {
   432	            "min": 0
   433	          },
   434	          "description": "Basic stall fee per day"
   435	        },
   436	        {
   437	          "name": "application_fee",
   438	          "type": "number",
   439	          "required": false,
   440	          "options": {
   441	            "min": 0
   442	          },
   443	          "description": "Application processing fee"
   444	        },
   445	        {
   446	          "name": "bond_required",
   447	          "type": "bool",
   448	          "required": false,
   449	          "description": "Security bond required"
   450	        },
   451	        {
   452	          "name": "bond_amount",
   453	          "type": "number",
   454	          "required": false,
   455	          "options": {
   456	            "min": 0
   457	          },
   458	          "description": "Security bond amount"
   459	        },
   460	        {
   461	          "name": "insurance_required",
   462	          "type": "bool",
   463	          "required": false,
   464	          "description": "Public liability insurance required"
   465	        },
   466	        {
   467	          "name": "insurance_minimum",
   468	          "type": "number",
   469	          "required": false,
   470	          "options": {
   471	            "min": 0
   472	          },
   473	          "description": "Minimum insurance coverage"
   474	        },
   475	        {
   476	          "name": "abn_required",
   477	          "type": "bool",
   478	          "required": false,
   479	          "description": "ABN required for stallholders"
   480	        },
   481	        {
   482	          "name": "power_available",
   483	          "type": "bool",
   484	          "required": false,
   485	          "description": "Power available for stalls"
   486	        },
   487	        {
   488	          "name": "power_cost",
   489	          "type": "number",
   490	          "required": false,
   491	          "options": {
   492	            "min": 0
   493	          },
   494	          "description": "Cost of power per stall"
   495	        },
   496	        {
   497	          "name": "max_stalls",
   498	          "type": "number",
   499	          "required": false,
   500	          "options": {
   501	            "min": 1
   502	          },
   503	          "description": "Maximum number of stalls"
   504	        },
   505	        {
   506	          "name": "stall_sizes",
   507	          "type": "json",
   508	          "required": false,
   509	          "description": "Available stall sizes and counts"
   510	        },
   511	        {
   512	          "name": "waiting_list_enabled",
   513	          "type": "bool",
   514	          "required": false,
   515	          "description": "Enable waiting list when full"
   516	        },
   517	        {
   518	          "name": "featured_image",
   519	          "type": "file",
   520	          "required": false,
   521	          "options": {
   522	            "maxSelect": 1,
   523	            "maxSize": 5242880,
   524	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   525	          },
   526	          "description": "Main market image"
   527	        },
   528	        {
   529	          "name": "gallery_images",
   530	          "type": "file",
   531	          "required": false,
   532	          "options": {
   533	            "maxSelect": 10,
   534	            "maxSize": 5242880,
   535	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   536	          },
   537	          "description": "Market gallery images"
   538	        },
   539	        {
   540	          "name": "active",
   541	          "type": "bool",
   542	          "required": false,
   543	          "description": "Market is active/published"
   544	        },
   545	        {
   546	          "name": "view_count",
   547	          "type": "number",
   548	          "required": false,
   549	          "options": {
   550	            "min": 0
   551	          },
   552	          "description": "Profile view count"
   553	        },
   554	        {
   555	          "name": "favorite_count",
   556	          "type": "number",
   557	          "required": false,
   558	          "options": {
   559	            "min": 0
   560	          },
   561	          "description": "Times favorited by users"
   562	        },
   563	        {
   564	          "name": "average_rating",
   565	          "type": "number",
   566	          "required": false,
   567	          "options": {
   568	            "min": 0,
   569	            "max": 5
   570	          },
   571	          "description": "Average user rating"
   572	        },
   573	        {
   574	          "name": "total_reviews",
   575	          "type": "number",
   576	          "required": false,
   577	          "options": {
   578	            "min": 0
   579	          },
   580	          "description": "Total number of reviews"
   581	        }
   582	      ],
   583	      "listRule": "",
   584	      "viewRule": "",
   585	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"organizer\"",
   586	      "updateRule": "@request.auth.id = organizer.id",
   587	      "deleteRule": "@request.auth.id = organizer.id"
   588	    },
   589	
   590	    "stallholders": {
   591	      "name": "stallholders",
   592	      "type": "base",
   593	      "description": "Stallholder business profiles",
   594	      "schema": [
   595	        {
   596	          "name": "user",
   597	          "type": "relation",
   598	          "required": true,
   599	          "options": {
   600	            "collectionId": "users",
   601	            "cascadeDelete": true,
   602	            "minSelect": null,
   603	            "maxSelect": 1,
   604	            "displayFields": ["name", "email"]
   605	          },
   606	          "description": "Associated user account"
   607	        },
   608	        {
   609	          "name": "business_name",
   610	          "type": "text",
   611	          "required": true,
   612	          "options": {
   613	            "min": 2,
   614	            "max": 100
   615	          },
   616	          "description": "Business name"
   617	        },
   618	        {
   619	          "name": "abn",
   620	          "type": "text",
   621	          "required": false,
   622	          "options": {
   623	            "pattern": "^[0-9]{11}$"
   624	          },
   625	          "description": "Australian Business Number"
   626	        },
   627	        {
   628	          "name": "business_description",
   629	          "type": "text",
   630	          "required": false,
   631	          "options": {
   632	            "max": 1000
   633	          },
   634	          "description": "Business description"
   635	        },
   636	        {
   637	          "name": "product_categories",
   638	          "type": "json",
   639	          "required": false,
   640	          "description": "Product categories sold"
   641	        },
   642	        {
   643	          "name": "contact_phone",
   644	          "type": "text",
   645	          "required": false,
   646	          "options": {
   647	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   648	          },
   649	          "description": "Business contact phone"
   650	        },
   651	        {
   652	          "name": "website",
   653	          "type": "url",
   654	          "required": false,
   655	          "description": "Business website"
   656	        },
   657	        {
   658	          "name": "social_media",
   659	          "type": "json",
   660	          "required": false,
   661	          "description": "Social media profiles"
   662	        },
   663	        {
   664	          "name": "insurance_details",
   665	          "type": "json",
   666	          "required": false,
   667	          "description": "Insurance policy details"
   668	        },
   669	        {
   670	          "name": "certifications",
   671	          "type": "json",
   672	          "required": false,
   673	          "description": "Business certifications"
   674	        },
   675	        {
   676	          "name": "setup_requirements",
   677	          "type": "text",
   678	          "required": false,
   679	          "options": {
   680	            "max": 500
   681	          },
   682	          "description": "Special setup requirements"
   683	        },
   684	        {
   685	          "name": "power_required",
   686	          "type": "bool",
   687	          "required": false,
   688	          "description": "Requires power connection"
   689	        },
   690	        {
   691	          "name": "space_requirements",
   692	          "type": "text",
   693	          "required": false,
   694	          "options": {
   695	            "max": 200
   696	          },
   697	          "description": "Space size requirements"
   698	        },
   699	        {
   700	          "name": "portfolio_images",
   701	          "type": "file",
   702	          "required": false,
   703	          "options": {
   704	            "maxSelect": 20,
   705	            "maxSize": 5242880,
   706	            "mimeTypes": ["image/jpeg", "image/png", "image/webp"]
   707	          },
   708	          "description": "Product/business images"
   709	        },
   710	        {
   711	          "name": "rating",
   712	          "type": "number",
   713	          "required": false,
   714	          "options": {
   715	            "min": 0,
   716	            "max": 5
   717	          },
   718	          "description": "Average rating"
   719	        },
   720	        {
   721	          "name": "reviews_count",
   722	          "type": "number",
   723	          "required": false,
   724	          "options": {
   725	            "min": 0
   726	          },
   727	          "description": "Total reviews"
   728	        },
   729	        {
   730	          "name": "verified",
   731	          "type": "bool",
   732	          "required": false,
   733	          "description": "Verified stallholder status"
   734	        },
   735	        {
   736	          "name": "subscription_tier",
   737	          "type": "select",
   738	          "required": false,
   739	          "options": {
   740	            "maxSelect": 1,
   741	            "values": ["free", "basic", "premium"]
   742	          },
   743	          "description": "Subscription level"
   744	        }
   745	      ],
   746	      "listRule": "",
   747	      "viewRule": "",
   748	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   749	      "updateRule": "@request.auth.id = user.id",
   750	      "deleteRule": "@request.auth.id = user.id"
   751	    },
   752	
   753	    "applications": {
   754	      "name": "applications",
   755	      "type": "base",
   756	      "description": "Market applications from stallholders",
   757	      "schema": [
   758	        {
   759	          "name": "stallholder",
   760	          "type": "relation",
   761	          "required": true,
   762	          "options": {
   763	            "collectionId": "stallholders",
   764	            "cascadeDelete": true,
   765	            "minSelect": null,
   766	            "maxSelect": 1,
   767	            "displayFields": ["business_name"]
   768	          },
   769	          "description": "Applying stallholder"
   770	        },
   771	        {
   772	          "name": "market",
   773	          "type": "relation",
   774	          "required": true,
   775	          "options": {
   776	            "collectionId": "markets",
   777	            "cascadeDelete": true,
   778	            "minSelect": null,
   779	            "maxSelect": 1,
   780	            "displayFields": ["name"]
   781	          },
   782	          "description": "Target market"
   783	        },
   784	        {
   785	          "name": "status",
   786	          "type": "select",
   787	          "required": true,
   788	          "options": {
   789	            "maxSelect": 1,
   790	            "values": ["pending", "approved", "rejected", "waitlisted", "cancelled"]
   791	          },
   792	          "description": "Application status"
   793	        },
   794	        {
   795	          "name": "application_date",
   796	          "type": "date",
   797	          "required": true,
   798	          "description": "Date of application"
   799	        },
   800	        {
   801	          "name": "requested_dates",
   802	          "type": "json",
   803	          "required": false,
   804	          "description": "Specific dates requested"
   805	        },
   806	        {
   807	          "name": "message",
   808	          "type": "text",
   809	          "required": false,
   810	          "options": {
   811	            "max": 1000
   812	          },
   813	          "description": "Stallholder message"
   814	        },
   815	        {
   816	          "name": "organizer_notes",
   817	          "type": "text",
   818	          "required": false,
   819	          "options": {
   820	            "max": 1000
   821	          },
   822	          "description": "Internal organizer notes"
   823	        },
   824	        {
   825	          "name": "fee_structure_snapshot",
   826	          "type": "json",
   827	          "required": false,
   828	          "description": "Fee structure at time of application"
   829	        },
   830	        {
   831	          "name": "payment_status",
   832	          "type": "select",
   833	          "required": false,
   834	          "options": {
   835	            "maxSelect": 1,
   836	            "values": ["unpaid", "paid", "partial", "refunded"]
   837	          },
   838	          "description": "Payment status"
   839	        },
   840	        {
   841	          "name": "payment_amount",
   842	          "type": "number",
   843	          "required": false,
   844	          "options": {
   845	            "min": 0
   846	          },
   847	          "description": "Amount paid"
   848	        },
   849	        {
   850	          "name": "stall_assignment",
   851	          "type": "text",
   852	          "required": false,
   853	          "options": {
   854	            "max": 50
   855	          },
   856	          "description": "Assigned stall location"
   857	        }
   858	      ],
   859	      "listRule": "",
   860	      "viewRule": "@request.auth.id = stallholder.user.id || @request.auth.id = market.organizer.id",
   861	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   862	      "updateRule": "@request.auth.id = market.organizer.id",
   863	      "deleteRule": "@request.auth.id = stallholder.user.id || @request.auth.id = market.organizer.id"
   864	    },
   865	
   866	    "reviews": {
   867	      "name": "reviews",
   868	      "type": "base",
   869	      "description": "User reviews for markets and stallholders",
   870	      "schema": [
   871	        {
   872	          "name": "reviewer",
   873	          "type": "relation",
   874	          "required": true,
   875	          "options": {
   876	            "collectionId": "users",
   877	            "cascadeDelete": false,
   878	            "minSelect": null,
   879	            "maxSelect": 1,
   880	            "displayFields": ["name"]
   881	          },
   882	          "description": "User who wrote the review"
   883	        },
   884	        {
   885	          "name": "target_type",
   886	          "type": "select",
   887	          "required": true,
   888	          "options": {
   889	            "maxSelect": 1,
   890	            "values": ["market", "stallholder"]
   891	          },
   892	          "description": "What is being reviewed"
   893	        },
   894	        {
   895	          "name": "target_id",
   896	          "type": "text",
   897	          "required": true,
   898	          "options": {
   899	            "min": 15,
   900	            "max": 15
   901	          },
   902	          "description": "ID of the reviewed item"
   903	        },
   904	        {
   905	          "name": "rating",
   906	          "type": "number",
   907	          "required": true,
   908	          "options": {
   909	            "min": 1,
   910	            "max": 5
   911	          },
   912	          "description": "Rating (1-5 stars)"
   913	        },
   914	        {
   915	          "name": "title",
   916	          "type": "text",
   917	          "required": false,
   918	          "options": {
   919	            "max": 100
   920	          },
   921	          "description": "Review title"
   922	        },
   923	        {
   924	          "name": "comment",
   925	          "type": "text",
   926	          "required": false,
   927	          "options": {
   928	            "max": 1000
   929	          },
   930	          "description": "Review comment"
   931	        },
   932	        {
   933	          "name": "helpful_votes",
   934	          "type": "number",
   935	          "required": false,
   936	          "options": {
   937	            "min": 0
   938	          },
   939	          "description": "Number of helpful votes"
   940	        },
   941	        {
   942	          "name": "verified_purchase",
   943	          "type": "bool",
   944	          "required": false,
   945	          "description": "Verified attendance/purchase"
   946	        }
   947	      ],
   948	      "listRule": "",
   949	      "viewRule": "",
   950	      "createRule": "@request.auth.id != \"\"",
   951	      "updateRule": "@request.auth.id = reviewer.id",
   952	      "deleteRule": "@request.auth.id = reviewer.id"
   953	    }
   954	  }
   955	};
   956	
   957	async function saveSchema() {
   958	  try {
   959	    console.log('üíæ Saving SA Markets Directory schema...');
   960	    
   961	    // Ensure schema directory exists
   962	    if (!existsSync('./schema')) {
   963	      await fs.mkdir('./schema', { recursive: true });
   964	      console.log('üìÅ Created schema directory');
   965	    }
   966	
   967	    // Save the schema
   968	    const schemaPath = './schema/database.json';
   969	    await fs.writeFile(schemaPath, JSON.stringify(schema, null, 2));
   970	    
   971	    console.log(`‚úÖ Schema saved to: ${schemaPath}`);
   972	    console.log(`üìã Collections: ${Object.keys(schema.collections).length}`);
   973	    console.log('');
   974	    console.log('Collections created:');
   975	    Object.keys(schema.collections).forEach(name => {
   976	      const collection = schema.collections[name];
   977	      console.log(`  - ${name} (${collection.type}) - ${collection.schema?.length || 0} fields`);
   978	    });
   979	    
   980	    console.log('');
   981	    console.log('üìù Next steps:');
   982	    console.log('1. Make sure PocketBase is running: ./pocketbase serve');
   983	    console.log('2. Create admin account: http://localhost:8090/_/');
   984	    console.log('3. Apply schema: node scripts/schema-manager.js apply');
   985	    console.log('4. Seed data: node scripts/schema-manager.js seed');
   986	    
   987	  } catch (error) {
   988	    console.error('‚ùå Error saving schema:', error.message);
   989	    process.exit(1);
   990	  }
   991	}
   992	
   993	saveSchema();

========================================

üìÅ FILE: src/scripts/schema-manager.js
   Size: 39K | Modified: 2025-06-04
----------------------------------------
     1	// scripts/schema-manager.js - Enhanced with Collection ID Resolution (FIXED)
     2	import PocketBase from 'pocketbase';
     3	import fs from 'fs/promises';
     4	import { existsSync } from 'fs';
     5	import path from 'path';
     6	import { AuthManager, PasswordInput } from './auth-manager.js';
     7	
     8	const pb = new PocketBase(process.env.VITE_POCKETBASE_URL || 'http://localhost:8090');
     9	
    10	class SchemaManager {
    11	  constructor() {
    12	    this.authenticated = false;
    13	    this.authManager = new AuthManager();
    14	    this.schemaPath = './schema/database.json';
    15	    this.backupPath = './schema/backups';
    16	    this.schema = null;
    17	    this.resolvedSchema = null; // ADD: Store resolved schema separately
    18	    this.debug = process.env.DEBUG === 'true' || process.argv.includes('--debug');
    19	    this.collectionIdMap = {}; // Collection ID mapping
    20	  }
    21	
    22	  log(message, level = 'info') {
    23	    const timestamp = new Date().toISOString();
    24	    const logMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    25	    
    26	    // Add to buffer for file output (with safety check)
    27	    if (!this.logBuffer) {
    28	      this.logBuffer = [];
    29	    }
    30	    this.logBuffer.push(logMessage);
    31	    
    32	    // Console output based on debug mode
    33	    if (this.debug || level === 'error') {
    34	      console.log(logMessage);
    35	    }
    36	  }
    37	
    38	  // Add method to log console output to buffer as well
    39	  logToFile(message, level = 'info') {
    40	    const timestamp = new Date().toISOString();
    41	    const logMessage = `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    42	    
    43	    // Add to buffer (with safety check)
    44	    if (!this.logBuffer) {
    45	      this.logBuffer = [];
    46	    }
    47	    this.logBuffer.push(logMessage);
    48	    
    49	    // Also output to console
    50	    console.log(message);
    51	  }
    52	
    53	  async writeLogFile() {
    54	    try {
    55	      // Safety check for logBuffer
    56	      if (!this.logBuffer) {
    57	        this.logBuffer = ['No log entries recorded'];
    58	      }
    59	
    60	      // Safety check for startTime
    61	      if (!this.startTime) {
    62	        this.startTime = new Date();
    63	      }
    64	
    65	      // Safety check for outputFile
    66	      const outputFile = this.outputFile || './output.log';
    67	
    68	      const header = [
    69	        '='.repeat(80),
    70	        `SA Markets Directory - Schema Manager Log`,
    71	        `Started: ${this.startTime.toISOString()}`,
    72	        `Completed: ${new Date().toISOString()}`,
    73	        `Duration: ${((Date.now() - this.startTime.getTime()) / 1000).toFixed(2)}s`,
    74	        `Command: ${process.argv.slice(2).join(' ')}`,
    75	        `PocketBase URL: ${pb.baseUrl}`,
    76	        '='.repeat(80),
    77	        ''
    78	      ];
    79	
    80	      const content = header.concat(this.logBuffer).join('\n');
    81	      await fs.writeFile(outputFile, content);
    82	      console.log(`üìù Full log written to: ${outputFile}`);
    83	    } catch (error) {
    84	      console.error('‚ùå Failed to write log file:', error.message);
    85	    }
    86	  }
    87	
    88	  async buildCollectionIdMap() {
    89	    try {
    90	      this.log('Building collection ID mapping...', 'debug');
    91	      
    92	      const collections = await pb.collections.getFullList();
    93	      this.collectionIdMap = {};
    94	
    95	      collections.forEach(collection => {
    96	        // Map both name and NAME_ID format
    97	        this.collectionIdMap[collection.name] = collection.id;
    98	        this.collectionIdMap[collection.name.toUpperCase() + '_ID'] = collection.id;
    99	        
   100	        // Special handling for auth collection
   101	        if (collection.type === 'auth') {
   102	          this.collectionIdMap['_pb_users_auth_'] = collection.id;
   103	          this.collectionIdMap['USERS_ID'] = collection.id;
   104	          this.collectionIdMap['users'] = collection.id;
   105	        }
   106	      });
   107	
   108	      this.log(`Collection ID mapping built: ${Object.keys(this.collectionIdMap).length} mappings`, 'debug');
   109	      this.logToFile('üìã Collection ID Mapping:');
   110	      Object.entries(this.collectionIdMap).forEach(([key, id]) => {
   111	        this.log(`  ${key}: ${id}`, 'debug');
   112	      });
   113	      
   114	      return this.collectionIdMap;
   115	    } catch (error) {
   116	      this.logToFile(`‚ùå Error building collection ID map: ${error.message}`, 'error');
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  // FIXED: Method to replace collection ID placeholders in schema
   122	  resolveCollectionIds(schema) {
   123	    this.log('Resolving collection ID placeholders...', 'debug');
   124	    
   125	    // Deep clone the schema to avoid mutating the original
   126	    const resolvedSchema = JSON.parse(JSON.stringify(schema));
   127	
   128	    // Only resolve IDs within field definitions, NOT in collection names
   129	    Object.keys(resolvedSchema.collections).forEach(collectionName => {
   130	      const collection = resolvedSchema.collections[collectionName];
   131	      
   132	      if (collection.schema) {
   133	        collection.schema.forEach(field => {
   134	          if (field.type === 'relation' && field.options && field.options.collectionId) {
   135	            const originalId = field.options.collectionId;
   136	            
   137	            // Check if this is a placeholder that needs resolution
   138	            if (this.collectionIdMap[originalId]) {
   139	              field.options.collectionId = this.collectionIdMap[originalId];
   140	              this.log(`Resolved relation field ${field.name}: ${originalId} -> ${field.options.collectionId}`, 'debug');
   141	            }
   142	          }
   143	        });
   144	      }
   145	    });
   146	
   147	    this.log('Collection IDs resolved successfully', 'debug');
   148	    return resolvedSchema;
   149	  }
   150	
   151	  async loadSchema() {
   152	    try {
   153	      if (!existsSync(this.schemaPath)) {
   154	        this.logToFile('üìÑ Schema file not found, creating default schema...');
   155	        await this.createDefaultSchema();
   156	      }
   157	
   158	      const schemaContent = await fs.readFile(this.schemaPath, 'utf8');
   159	      this.schema = JSON.parse(schemaContent);
   160	
   161	      this.log(`Schema loaded from ${this.schemaPath}`, 'debug');
   162	
   163	      this.logToFile(`‚úÖ Loaded schema v${this.schema.version}`);
   164	      this.logToFile(`üìã Collections defined: ${Object.keys(this.schema.collections).length}`);
   165	
   166	      if (Object.keys(this.schema.collections).length === 0) {
   167	        this.logToFile('‚ö†Ô∏è  Warning: No collections defined in schema file');
   168	        this.logToFile('üí° Tip: Run "node scripts/schema-manager.js generate" to create from existing DB');
   169	      } else {
   170	        this.logToFile('üìã Collections:');
   171	        Object.keys(this.schema.collections).forEach(name => {
   172	          const collection = this.schema.collections[name];
   173	          this.logToFile(`  - ${name} (${collection.type}) - ${collection.schema?.length || 0} fields`);
   174	        });
   175	      }
   176	
   177	      return this.schema;
   178	    } catch (error) {
   179	      this.logToFile(`‚ùå Error loading schema: ${error.message}`, 'error');
   180	      throw error;
   181	    }
   182	  }
   183	
   184	  async createDefaultSchema() {
   185	    const defaultSchema = {
   186	      version: "1.0.0",
   187	      description: "SA Markets Directory - Database Schema",
   188	      created: new Date().toISOString(),
   189	      collections: {}
   190	    };
   191	
   192	    if (!existsSync('./schema')) {
   193	      await fs.mkdir('./schema', { recursive: true });
   194	    }
   195	
   196	    await fs.writeFile(this.schemaPath, JSON.stringify(defaultSchema, null, 2));
   197	    console.log('‚úÖ Created default schema file');
   198	  }
   199	
   200	  async authenticateAdmin() {
   201	    if (this.authenticated) return true;
   202	
   203	    this.logToFile('\nüîê Admin authentication required');
   204	    this.log(`PocketBase URL: ${pb.baseUrl}`, 'debug');
   205	
   206	    try {
   207	      // First, try environment variables
   208	      const adminEmail = process.env.POCKETBASE_ADMIN_EMAIL;
   209	      const adminPassword = process.env.POCKETBASE_ADMIN_PASSWORD;
   210	
   211	      if (adminEmail && adminPassword) {
   212	        this.logToFile('üîë Using admin credentials from environment variables...');
   213	        this.log(`Authenticating with env vars for: ${adminEmail}`, 'debug');
   214	
   215	        try {
   216	          const authData = await this.authenticateWithCredentials(adminEmail, adminPassword);
   217	          await this.authManager.saveCredentials(adminEmail, adminPassword, authData.token);
   218	          this.authenticated = true;
   219	          this.logToFile('üîê Credentials saved securely');
   220	          this.logToFile('‚úÖ Authentication successful with stored credentials');
   221	          return true;
   222	        } catch (envError) {
   223	          this.logToFile(`‚ùå Environment credentials failed: ${envError.message}`);
   224	          this.log(`Env auth error: ${JSON.stringify(envError)}`, 'debug');
   225	        }
   226	      }
   227	
   228	      // Second, try stored credentials
   229	      this.logToFile('üîç Checking for stored credentials...');
   230	      const storedCreds = await this.authManager.loadCredentials();
   231	
   232	      if (storedCreds) {
   233	        try {
   234	          this.logToFile('üîë Using stored credentials...');
   235	          this.log(`Stored creds for: ${storedCreds.email}`, 'debug');
   236	
   237	          const authData = await this.authenticateWithCredentials(storedCreds.email, storedCreds.password);
   238	          await this.authManager.saveCredentials(storedCreds.email, storedCreds.password, authData.token);
   239	
   240	          this.authenticated = true;
   241	          this.logToFile('üîê Credentials saved securely');
   242	          this.logToFile('‚úÖ Authentication successful with stored credentials');
   243	
   244	          const daysUntilExpiry = Math.ceil((storedCreds.expiresAt - Date.now()) / (24 * 60 * 60 * 1000));
   245	          this.logToFile(`‚ÑπÔ∏è  Stored credentials expire in ${daysUntilExpiry} days`);
   246	
   247	          return true;
   248	        } catch (storedError) {
   249	          this.logToFile('‚ö†Ô∏è  Stored credentials are invalid, requesting new ones...');
   250	          this.log(`Stored auth error: ${JSON.stringify(storedError)}`, 'debug');
   251	          await this.authManager.clearCredentials();
   252	        }
   253	      }
   254	
   255	      // Third, prompt for credentials
   256	      console.log('\nüìù Please enter your PocketBase admin credentials:');
   257	      console.log('üí° Tip: Set POCKETBASE_ADMIN_EMAIL and POCKETBASE_ADMIN_PASSWORD env vars to skip this');
   258	      console.log('üí° Credentials will be stored securely for 7 days\n');
   259	
   260	      const email = await PasswordInput.getInput('Admin email: ');
   261	      if (!email) {
   262	        throw new Error('Email is required');
   263	      }
   264	
   265	      const password = await PasswordInput.getPassword('Admin password: ');
   266	      if (!password) {
   267	        throw new Error('Password is required');
   268	      }
   269	
   270	      this.logToFile('üîë Authenticating...');
   271	
   272	      try {
   273	        const authData = await this.authenticateWithCredentials(email, password);
   274	        await this.authManager.saveCredentials(email, password, authData.token);
   275	
   276	        this.authenticated = true;
   277	        this.logToFile('‚úÖ Admin authentication successful');
   278	        this.logToFile('üíæ Credentials saved securely for future use');
   279	
   280	        return true;
   281	      } catch (authError) {
   282	        this.log(`Auth error details: ${JSON.stringify(authError)}`, 'debug');
   283	        throw authError;
   284	      }
   285	
   286	    } catch (error) {
   287	      this.logToFile(`‚ùå Admin authentication failed: ${error.message}`, 'error');
   288	      this.log(`Full error: ${JSON.stringify(error)}`, 'error');
   289	
   290	      if (error.message.includes('not found') || error.status === 404) {
   291	        this.logToFile('\nüö® "Resource not found" usually means:');
   292	        this.logToFile('   1. No admin account exists in PocketBase yet');
   293	        this.logToFile('   2. Visit http://localhost:8090/_/ to create the first admin');
   294	        this.logToFile('   3. Or PocketBase version mismatch');
   295	        this.logToFile('\nüîß Quick setup:');
   296	        this.logToFile('   1. Stop this script (Ctrl+C)');
   297	        this.logToFile('   2. Open http://localhost:8090/_/ in your browser');
   298	        this.logToFile('   3. Create an admin account');
   299	        this.logToFile('   4. Run this script again');
   300	      }
   301	
   302	      await this.authManager.clearCredentials();
   303	      return false;
   304	    }
   305	  }
   306	
   307	  async authenticateWithCredentials(email, password) {
   308	    try {
   309	      this.log(`Attempting authentication for: ${email}`, 'debug');
   310	      const authData = await pb.admins.authWithPassword(email, password);
   311	      this.log(`Auth successful, token length: ${authData.token?.length}`, 'debug');
   312	      return authData;
   313	    } catch (error) {
   314	      this.log(`Authentication error: ${JSON.stringify(error)}`, 'debug');
   315	
   316	      if (error.status === 404) {
   317	        try {
   318	          this.log('Trying alternative authentication method...', 'debug');
   319	
   320	          const response = await fetch(`${pb.baseUrl}/api/admins/auth-with-password`, {
   321	            method: 'POST',
   322	            headers: { 'Content-Type': 'application/json' },
   323	            body: JSON.stringify({ identity: email, password })
   324	          });
   325	
   326	          if (!response.ok) {
   327	            const errorData = await response.json();
   328	            throw new Error(`Authentication failed: ${errorData.message || response.statusText}`);
   329	          }
   330	
   331	          const authData = await response.json();
   332	          pb.authStore.save(authData.token, authData.admin);
   333	          return authData;
   334	        } catch (altError) {
   335	          this.log(`Alternative auth failed: ${JSON.stringify(altError)}`, 'debug');
   336	          throw error;
   337	        }
   338	      }
   339	
   340	      throw error;
   341	    }
   342	  }
   343	
   344	  async validateConnection() {
   345	    try {
   346	      this.logToFile('üîç Testing PocketBase connection...');
   347	      this.log(`Testing connection to: ${pb.baseUrl}`, 'debug');
   348	
   349	      const response = await fetch(`${pb.baseUrl}/api/health`);
   350	      this.log(`Health check response: ${response.status}`, 'debug');
   351	
   352	      if (response.ok) {
   353	        this.logToFile('‚úÖ PocketBase is running');
   354	        return true;
   355	      } else {
   356	        this.logToFile('‚ùå PocketBase health check failed');
   357	        return false;
   358	      }
   359	    } catch (error) {
   360	      this.logToFile(`‚ùå Cannot connect to PocketBase: ${error.message}`);
   361	      return false;
   362	    }
   363	  }
   364	
   365	  async getCurrentSchema() {
   366	    try {
   367	      if (!await this.authenticateAdmin()) {
   368	        throw new Error('Admin authentication required');
   369	      }
   370	
   371	      this.log('Fetching collections from PocketBase...', 'debug');
   372	      const collections = await pb.collections.getFullList();
   373	      this.log(`Found ${collections.length} collections`, 'debug');
   374	
   375	      const currentSchema = {
   376	        timestamp: new Date().toISOString(),
   377	        collections: {}
   378	      };
   379	
   380	      for (const collection of collections) {
   381	        this.log(`Processing collection: ${collection.name}`, 'debug');
   382	        currentSchema.collections[collection.name] = {
   383	          name: collection.name,
   384	          type: collection.type,
   385	          schema: collection.schema,
   386	          listRule: collection.listRule,
   387	          viewRule: collection.viewRule,
   388	          createRule: collection.createRule,
   389	          updateRule: collection.updateRule,
   390	          deleteRule: collection.deleteRule
   391	        };
   392	      }
   393	
   394	      return currentSchema;
   395	    } catch (error) {
   396	      console.error('‚ùå Error getting current schema:', error.message);
   397	      throw error;
   398	    }
   399	  }
   400	
   401	  async compareSchemas() {
   402	    try {
   403	      await this.loadSchema();
   404	      
   405	      // Authenticate first, then build collection ID mapping
   406	      if (!await this.authenticateAdmin()) {
   407	        throw new Error('Admin authentication required');
   408	      }
   409	      
   410	      // BUILD collection ID mapping after authentication
   411	      await this.buildCollectionIdMap();
   412	      
   413	      const currentSchema = await this.getCurrentSchema();
   414	
   415	      const comparison = {
   416	        toCreate: [],
   417	        toUpdate: [],
   418	        toDelete: [],
   419	        changes: []
   420	      };
   421	
   422	      const definedCollections = Object.keys(this.schema.collections);
   423	      const currentCollections = Object.keys(currentSchema.collections);
   424	
   425	      this.log(`Defined collections: ${definedCollections.join(', ')}`, 'debug');
   426	      this.log(`Current collections: ${currentCollections.join(', ')}`, 'debug');
   427	
   428	      // Find collections to create
   429	      for (const collectionName of definedCollections) {
   430	        if (!currentCollections.includes(collectionName)) {
   431	          comparison.toCreate.push(collectionName);
   432	        }
   433	      }
   434	
   435	      // Find collections to delete (exist in DB but not in schema)
   436	      for (const collectionName of currentCollections) {
   437	        if (!definedCollections.includes(collectionName)) {
   438	          // Skip system collections
   439	          if (!collectionName.startsWith('_') && collectionName !== 'users') {
   440	            comparison.toDelete.push(collectionName);
   441	          }
   442	        }
   443	      }
   444	
   445	      // Find collections to update
   446	      for (const collectionName of definedCollections) {
   447	        if (currentCollections.includes(collectionName)) {
   448	          const definedCollection = this.schema.collections[collectionName];
   449	          const currentCollection = currentSchema.collections[collectionName];
   450	
   451	          const changes = this.compareCollectionSchemas(definedCollection, currentCollection);
   452	
   453	          if (changes.length > 0) {
   454	            comparison.toUpdate.push(collectionName);
   455	            comparison.changes.push({
   456	              collection: collectionName,
   457	              changes: changes
   458	            });
   459	          }
   460	        }
   461	      }
   462	
   463	      return comparison;
   464	    } catch (error) {
   465	      console.error('‚ùå Error comparing schemas:', error.message);
   466	      throw error;
   467	    }
   468	  }
   469	
   470	  compareCollectionSchemas(defined, current) {
   471	    const changes = [];
   472	
   473	    // Compare fields
   474	    const definedFields = defined.schema || [];
   475	    const currentFields = current.schema || [];
   476	
   477	    const definedFieldNames = definedFields.map(f => f.name);
   478	    const currentFieldNames = currentFields.map(f => f.name);
   479	
   480	    // Fields to add
   481	    for (const field of definedFields) {
   482	      if (!currentFieldNames.includes(field.name)) {
   483	        changes.push({
   484	          type: 'add_field',
   485	          field: field.name,
   486	          details: field
   487	        });
   488	      }
   489	    }
   490	
   491	    // Fields to remove
   492	    for (const field of currentFields) {
   493	      if (!definedFieldNames.includes(field.name)) {
   494	        changes.push({
   495	          type: 'remove_field',
   496	          field: field.name,
   497	          details: field
   498	        });
   499	      }
   500	    }
   501	
   502	    // Fields to modify
   503	    for (const definedField of definedFields) {
   504	      const currentField = currentFields.find(f => f.name === definedField.name);
   505	      if (currentField && !this.fieldsEqual(definedField, currentField)) {
   506	        changes.push({
   507	          type: 'modify_field',
   508	          field: definedField.name,
   509	          from: currentField,
   510	          to: definedField
   511	        });
   512	      }
   513	    }
   514	
   515	    // Compare access rules
   516	    const ruleFields = ['listRule', 'viewRule', 'createRule', 'updateRule', 'deleteRule'];
   517	    for (const rule of ruleFields) {
   518	      if (defined[rule] !== current[rule]) {
   519	        changes.push({
   520	          type: 'modify_rule',
   521	          rule: rule,
   522	          from: current[rule],
   523	          to: defined[rule]
   524	        });
   525	      }
   526	    }
   527	
   528	    return changes;
   529	  }
   530	
   531	  fieldsEqual(field1, field2) {
   532	    return JSON.stringify(field1) === JSON.stringify(field2);
   533	  }
   534	
   535	  async displayComparison(comparison) {
   536	    this.logToFile('\nüìä SCHEMA COMPARISON RESULTS');
   537	    this.logToFile('=====================================');
   538	
   539	    if (comparison.toCreate.length === 0 &&
   540	      comparison.toUpdate.length === 0 &&
   541	      comparison.toDelete.length === 0) {
   542	      this.logToFile('‚úÖ Database schema is up to date!');
   543	      return;
   544	    }
   545	
   546	    if (comparison.toCreate.length > 0) {
   547	      this.logToFile(`\nüÜï Collections to CREATE (${comparison.toCreate.length}):`);
   548	      for (const collection of comparison.toCreate) {
   549	        const schema = this.schema.collections[collection];
   550	        this.logToFile(`  üìÅ ${collection} (${schema.type}) - ${schema.schema?.length || 0} fields`);
   551	      }
   552	    }
   553	
   554	    if (comparison.toUpdate.length > 0) {
   555	      this.logToFile(`\nüîÑ Collections to UPDATE (${comparison.toUpdate.length}):`);
   556	      for (const changeSet of comparison.changes) {
   557	        this.logToFile(`  üìÅ ${changeSet.collection}:`);
   558	        for (const change of changeSet.changes) {
   559	          switch (change.type) {
   560	            case 'add_field':
   561	              this.logToFile(`    ‚ûï Add field: ${change.field} (${change.details.type})`);
   562	              break;
   563	            case 'remove_field':
   564	              this.logToFile(`    ‚ûñ Remove field: ${change.field} (${change.details.type})`);
   565	              break;
   566	            case 'modify_field':
   567	              this.logToFile(`    üîß Modify field: ${change.field}`);
   568	              break;
   569	            case 'modify_rule':
   570	              this.logToFile(`    üîê Modify rule: ${change.rule}`);
   571	              break;
   572	          }
   573	        }
   574	      }
   575	    }
   576	
   577	    this.logToFile('\n=====================================');
   578	    this.logToFile('üí° Run "node scripts/schema-manager.js apply" to apply these changes');
   579	  }
   580	
   581	  async applySchema() {
   582	    try {
   583	      this.logToFile('üöÄ Applying schema changes to database...');
   584	
   585	      // Authenticate first before any operations
   586	      if (!await this.authenticateAdmin()) {
   587	        throw new Error('Admin authentication required');
   588	      }
   589	
   590	      const comparison = await this.compareSchemas();
   591	
   592	      if (comparison.toCreate.length === 0 &&
   593	        comparison.toUpdate.length === 0 &&
   594	        comparison.toDelete.length === 0) {
   595	        this.logToFile('‚úÖ No changes needed - schema is up to date!');
   596	        return;
   597	      }
   598	
   599	      // Show what will be changed
   600	      await this.displayComparison(comparison);
   601	
   602	      console.log('\n‚ö†Ô∏è  WARNING: This will modify your database structure!');
   603	      const confirm = await PasswordInput.getInput('Continue? (yes/no): ');
   604	
   605	      if (confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== 'y') {
   606	        this.logToFile('‚ùå Schema application cancelled');
   607	        return;
   608	      }
   609	
   610	      this.logToFile(`\nüîÑ User confirmed schema application: "${confirm}"`);
   611	
   612	      // FIXED: RESOLVE collection IDs in schema before applying - but keep original collection names as keys
   613	      this.resolvedSchema = this.resolveCollectionIds(this.schema);
   614	      this.log(`Original schema collections: ${Object.keys(this.schema.collections).join(', ')}`, 'debug');
   615	      this.log(`Resolved schema collections: ${Object.keys(this.resolvedSchema.collections).join(', ')}`, 'debug');
   616	
   617	      // Apply changes
   618	      let successCount = 0;
   619	      let errorCount = 0;
   620	
   621	      // 1. Create new collections (non-relational first)
   622	      const nonRelationalCollections = comparison.toCreate.filter(name => {
   623	        const collection = this.resolvedSchema.collections[name];
   624	        const hasRelations = collection.schema?.some(field => field.type === 'relation');
   625	        return !hasRelations;
   626	      });
   627	
   628	      const relationalCollections = comparison.toCreate.filter(name => {
   629	        const collection = this.resolvedSchema.collections[name];
   630	        const hasRelations = collection.schema?.some(field => field.type === 'relation');
   631	        return hasRelations;
   632	      });
   633	
   634	      this.logToFile(`\nüìã Non-relational collections to create: ${nonRelationalCollections.length}`);
   635	      this.logToFile(`üìã Relational collections to create: ${relationalCollections.length}`);
   636	
   637	      // Create non-relational collections first
   638	      for (const collectionName of nonRelationalCollections) {
   639	        try {
   640	          this.logToFile(`\nüÜï Creating collection: ${collectionName}`);
   641	          await this.createCollection(collectionName);
   642	          successCount++;
   643	          
   644	          // Update collection ID mapping after creating new collection
   645	          await this.buildCollectionIdMap();
   646	          this.resolvedSchema = this.resolveCollectionIds(this.schema);
   647	        } catch (error) {
   648	          this.logToFile(`‚ùå Failed to create ${collectionName}: ${error.message}`, 'error');
   649	          errorCount++;
   650	        }
   651	      }
   652	
   653	      // Create relational collections
   654	      for (const collectionName of relationalCollections) {
   655	        try {
   656	          this.logToFile(`\nüÜï Creating collection: ${collectionName}`);
   657	          await this.createCollection(collectionName);
   658	          successCount++;
   659	        } catch (error) {
   660	          this.logToFile(`‚ùå Failed to create ${collectionName}: ${error.message}`, 'error');
   661	          errorCount++;
   662	        }
   663	      }
   664	
   665	      // 2. Update existing collections
   666	      this.logToFile(`\nüîÑ Updating ${comparison.changes.length} existing collections...`);
   667	      for (const changeSet of comparison.changes) {
   668	        try {
   669	          this.logToFile(`\nüîÑ Updating collection: ${changeSet.collection}`);
   670	          await this.updateCollection(changeSet.collection, changeSet.changes);
   671	          successCount++;
   672	        } catch (error) {
   673	          this.logToFile(`‚ùå Failed to update ${changeSet.collection}: ${error.message}`, 'error');
   674	          errorCount++;
   675	        }
   676	      }
   677	
   678	      this.logToFile('\nüìä SCHEMA APPLICATION RESULTS');
   679	      this.logToFile('=====================================');
   680	      this.logToFile(`‚úÖ Successful operations: ${successCount}`);
   681	      this.logToFile(`‚ùå Failed operations: ${errorCount}`);
   682	
   683	      if (errorCount === 0) {
   684	        this.logToFile('üéâ Schema successfully applied!');
   685	      } else {
   686	        this.logToFile('‚ö†Ô∏è  Some operations failed. Check the errors above.');
   687	      }
   688	
   689	    } catch (error) {
   690	      this.logToFile(`‚ùå Error applying schema: ${error.message}`, 'error');
   691	      throw error;
   692	    }
   693	  }
   694	
   695	  // FIXED: createCollection method
   696	  async createCollection(collectionName) {
   697	    // Use resolved schema if available, otherwise fall back to regular schema
   698	    const schemaToUse = this.resolvedSchema || this.schema;
   699	    const collectionSchema = schemaToUse.collections[collectionName];
   700	
   701	    if (!collectionSchema) {
   702	      throw new Error(`Collection schema not found for: ${collectionName}`);
   703	    }
   704	
   705	    const collectionData = {
   706	      name: collectionName,
   707	      type: collectionSchema.type,
   708	      schema: collectionSchema.schema || [],
   709	      listRule: collectionSchema.listRule || null,
   710	      viewRule: collectionSchema.viewRule || null,
   711	      createRule: collectionSchema.createRule || null,
   712	      updateRule: collectionSchema.updateRule || null,
   713	      deleteRule: collectionSchema.deleteRule || null
   714	    };
   715	
   716	    this.log(`Creating collection with data: ${JSON.stringify(collectionData, null, 2)}`, 'debug');
   717	
   718	    try {
   719	      const createdCollection = await pb.collections.create(collectionData);
   720	      this.logToFile(`  ‚úÖ Created: ${collectionName}`);
   721	      return createdCollection;
   722	    } catch (error) {
   723	      // Enhanced error logging
   724	      this.logToFile(`‚ùå Failed to create ${collectionName}:`, 'error');
   725	      this.log('Full error object:', 'error');
   726	      this.log(JSON.stringify(error, null, 2), 'error');
   727	      this.log('Error response:', 'error');
   728	      this.log(JSON.stringify(error.response, null, 2), 'error');
   729	      this.log('Error data:', 'error');
   730	      this.log(JSON.stringify(error.data, null, 2), 'error');
   731	      this.log('Collection data being sent:', 'error');
   732	      this.log(JSON.stringify(collectionData, null, 2), 'error');
   733	      throw error;
   734	    }
   735	  }
   736	
   737	  // FIXED: updateCollection method
   738	  async updateCollection(collectionName, changes) {
   739	    try {
   740	      const currentCollection = await pb.collections.getFirstListItem(`name="${collectionName}"`);
   741	      
   742	      // Use resolved schema if available, otherwise fall back to regular schema
   743	      const schemaToUse = this.resolvedSchema || this.schema;
   744	      
   745	      // Look for the schema using multiple strategies
   746	      let newSchema = null;
   747	      
   748	      // Strategy 1: Try original collection name in resolved schema
   749	      if (schemaToUse.collections[collectionName]) {
   750	        newSchema = schemaToUse.collections[collectionName];
   751	        this.log(`Found schema using original name: ${collectionName}`, 'debug');
   752	      }
   753	      
   754	      // Strategy 2: Try original schema as fallback
   755	      else if (this.schema.collections[collectionName]) {
   756	        newSchema = this.schema.collections[collectionName];
   757	        this.log(`Found schema using original schema: ${collectionName}`, 'debug');
   758	      }
   759	      
   760	      // Strategy 3: For users collection, special handling
   761	      else if (collectionName === 'users') {
   762	        // Try different variations for the users collection
   763	        newSchema = schemaToUse.collections['users'] || 
   764	                    schemaToUse.collections['_pb_users_auth_'] || 
   765	                    this.schema.collections['users'];
   766	        if (newSchema) {
   767	          this.log(`Found users schema using special handling`, 'debug');
   768	        }
   769	      }
   770	
   771	      if (!newSchema) {
   772	        this.log(`Available schema collections: ${Object.keys(schemaToUse.collections).join(', ')}`, 'debug');
   773	        this.log(`Current collection ID: ${currentCollection.id}`, 'debug');
   774	        this.log(`Collection ID map for ${collectionName}: ${this.collectionIdMap[collectionName]}`, 'debug');
   775	        throw new Error(`Schema for collection ${collectionName} not found. Available: ${Object.keys(schemaToUse.collections).join(', ')}`);
   776	      }
   777	
   778	      const updateData = {
   779	        schema: newSchema.schema || [],
   780	        listRule: newSchema.listRule || null,
   781	        viewRule: newSchema.viewRule || null,
   782	        createRule: newSchema.createRule || null,
   783	        updateRule: newSchema.updateRule || null,
   784	        deleteRule: newSchema.deleteRule || null
   785	      };
   786	
   787	      this.log(`Updating collection ${collectionName} with: ${JSON.stringify(updateData, null, 2)}`, 'debug');
   788	
   789	      const updatedCollection = await pb.collections.update(currentCollection.id, updateData);
   790	      this.logToFile(`  ‚úÖ Updated: ${collectionName} (${changes.length} changes)`);
   791	      return updatedCollection;
   792	    } catch (error) {
   793	      // Enhanced error logging
   794	      this.logToFile(`‚ùå Failed to update ${collectionName}:`, 'error');
   795	      if (error.response || error.data || error.message) {
   796	        this.log('Full error object:', 'error');
   797	        this.log(JSON.stringify(error, null, 2), 'error');
   798	        this.log('Error response:', 'error');
   799	        this.log(JSON.stringify(error.response, null, 2), 'error');
   800	        this.log('Error data:', 'error');
   801	        this.log(JSON.stringify(error.data, null, 2), 'error');
   802	        this.log('Error message:', 'error');
   803	        this.log(error.message, 'error');
   804	      } else {
   805	        this.log('Unknown error:', 'error');
   806	        this.log(JSON.stringify(error, null, 2), 'error');
   807	      }
   808	
   809	      // Try to get the current collection for comparison
   810	      try {
   811	        const currentCollection = await pb.collections.getFirstListItem(`name="${collectionName}"`);
   812	        this.log('Current collection schema:', 'error');
   813	        this.log(JSON.stringify(currentCollection.schema, null, 2), 'error');
   814	      } catch (fetchError) {
   815	        this.log('Could not fetch current collection for comparison', 'error');
   816	      }
   817	
   818	      throw error;
   819	    }
   820	  }
   821	
   822	  async generateSchema() {
   823	    try {
   824	      console.log('üìã Generating schema from current database...');
   825	
   826	      const currentSchema = await this.getCurrentSchema();
   827	      const outputSchema = {
   828	        version: "1.0.0",
   829	        description: "Generated from current PocketBase database",
   830	        generated: currentSchema.timestamp,
   831	        collections: currentSchema.collections
   832	      };
   833	
   834	      if (!existsSync('./schema')) {
   835	        await fs.mkdir('./schema', { recursive: true });
   836	      }
   837	
   838	      const outputFile = './schema/generated-schema.json';
   839	      await fs.writeFile(outputFile, JSON.stringify(outputSchema, null, 2));
   840	
   841	      console.log(`‚úÖ Schema generated: ${outputFile}`);
   842	      console.log('üí° You can copy this to database.json and edit as needed');
   843	
   844	    } catch (error) {
   845	      console.error('‚ùå Error generating schema:', error.message);
   846	      throw error;
   847	    }
   848	  }
   849	
   850	  async seedData() {
   851	    try {
   852	      console.log('üå± Seeding initial data...');
   853	
   854	      if (!await this.authenticateAdmin()) {
   855	        throw new Error('Admin authentication required');
   856	      }
   857	
   858	      // Seed market categories
   859	      console.log('üìã Creating market categories...');
   860	      const categories = [
   861	        {
   862	          name: "Farmers Market",
   863	          description: "Fresh produce, local farms, organic goods",
   864	          color: "#22c55e",
   865	          icon: "apple",
   866	          sort_order: 1
   867	        },
   868	        {
   869	          name: "Craft & Artisan",
   870	          description: "Handmade crafts, art, unique creations",
   871	          color: "#8b5cf6",
   872	          icon: "paintbrush",
   873	          sort_order: 2
   874	        },
   875	        {
   876	          name: "Community Market",
   877	          description: "Local community events and markets",
   878	          color: "#3b82f6",
   879	          icon: "users",
   880	          sort_order: 3
   881	        },
   882	        {
   883	          name: "Food Market",
   884	          description: "Prepared foods, specialty cuisines",
   885	          color: "#ef4444",
   886	          icon: "utensils",
   887	          sort_order: 4
   888	        },
   889	        {
   890	          name: "Vintage & Antiques",
   891	          description: "Vintage items, antiques, collectibles",
   892	          color: "#6b7280",
   893	          icon: "clock",
   894	          sort_order: 5
   895	        },
   896	        {
   897	          name: "General Market",
   898	          description: "Mixed vendors and general goods",
   899	          color: "#f59e0b",
   900	          icon: "shopping-bag",
   901	          sort_order: 6
   902	        }
   903	      ];
   904	
   905	      for (const category of categories) {
   906	        try {
   907	          await pb.collection('market_categories').create(category);
   908	          console.log(`  ‚úÖ Created category: ${category.name}`);
   909	        } catch (error) {
   910	          if (error.message.includes('failed "unique" constraint')) {
   911	            console.log(`  ‚ÑπÔ∏è  Category already exists: ${category.name}`);
   912	          } else {
   913	            console.error(`  ‚ùå Failed to create ${category.name}:`, error.message);
   914	          }
   915	        }
   916	      }
   917	
   918	      // ADD: Seed amenity types
   919	      console.log('üè¢ Creating amenity types...');
   920	      const amenityTypes = [
   921	        { name: 'Toilets', category: 'facility', icon: 'bathroom', active: true },
   922	        { name: 'Parking', category: 'facility', icon: 'car', active: true },
   923	        { name: 'Food Court', category: 'facility', icon: 'utensils', active: true },
   924	        { name: 'ATM', category: 'service', icon: 'credit-card', active: true },
   925	        { name: 'Wheelchair Access', category: 'accessibility', icon: 'wheelchair', active: true },
   926	        { name: 'Children\'s Area', category: 'facility', icon: 'baby', active: true },
   927	        { name: 'Entertainment', category: 'service', icon: 'music', active: true },
   928	        { name: 'Seating', category: 'facility', icon: 'chair', active: true },
   929	        { name: 'Weather Protection', category: 'facility', icon: 'umbrella', active: true },
   930	        { name: 'Storage', category: 'facility', icon: 'package', active: true },
   931	        { name: 'Loading Dock', category: 'facility', icon: 'truck', active: true },
   932	        { name: 'Security', category: 'service', icon: 'shield', active: true },
   933	        { name: 'WiFi', category: 'service', icon: 'wifi', active: true },
   934	        { name: 'Pet Friendly', category: 'service', icon: 'heart', active: true }
   935	      ];
   936	
   937	      for (const amenityType of amenityTypes) {
   938	        try {
   939	          await pb.collection('amenity_types').create(amenityType);
   940	          console.log(`  ‚úÖ Created amenity type: ${amenityType.name}`);
   941	        } catch (error) {
   942	          if (error.message.includes('failed "unique" constraint')) {
   943	            console.log(`  ‚ÑπÔ∏è  Amenity type already exists: ${amenityType.name}`);
   944	          } else {
   945	            console.error(`  ‚ùå Failed to create ${amenityType.name}:`, error.message);
   946	          }
   947	        }
   948	      }
   949	
   950	      console.log('‚úÖ Initial data seeding completed!');
   951	
   952	    } catch (error) {
   953	      console.error('‚ùå Error seeding data:', error.message);
   954	      throw error;
   955	    }
   956	  }
   957	}
   958	
   959	// CLI Interface
   960	async function main() {
   961	  const args = process.argv.slice(2);
   962	  const command = args[0];
   963	
   964	  const manager = new SchemaManager();
   965	
   966	  if (command === 'debug' || args.includes('--debug')) {
   967	    process.env.DEBUG = 'true';
   968	    console.log('üêõ Debug mode enabled');
   969	  }
   970	
   971	  if (command !== 'init' && command !== 'setup') {
   972	    const connected = await manager.validateConnection();
   973	    if (!connected) {
   974	      console.log('\n‚ùå Cannot connect to PocketBase.');
   975	      console.log('Make sure PocketBase is running: ./pocketbase serve');
   976	      console.log(`Expected URL: ${process.env.VITE_POCKETBASE_URL || 'http://localhost:8090'}`);
   977	      process.exit(1);
   978	    }
   979	  }
   980	
   981	  try {
   982	    switch (command) {
   983	      case 'generate':
   984	        await manager.generateSchema();
   985	        break;
   986	
   987	      case 'compare':
   988	      case 'diff':
   989	        const comparison = await manager.compareSchemas();
   990	        await manager.displayComparison(comparison);
   991	        break;
   992	
   993	      case 'apply':
   994	        await manager.applySchema();
   995	        break;
   996	
   997	      case 'seed':
   998	        await manager.seedData();
   999	        break;
  1000	
  1001	      case 'setup':
  1002	        console.log('\nüöÄ SA Markets Directory - Database Setup');
  1003	        console.log('==========================================');
  1004	        console.log('1. Make sure PocketBase is running: ./pocketbase serve');
  1005	        console.log('2. Create admin account: http://localhost:8090/_/');
  1006	        console.log('3. Apply schema: node scripts/schema-manager.js apply');
  1007	        console.log('4. Seed initial data: node scripts/schema-manager.js seed');
  1008	        console.log('5. Test the application!');
  1009	        break;
  1010	
  1011	      default:
  1012	        console.log(`
  1013	üóÑÔ∏è  SA Markets Directory - Schema Management System
  1014	
  1015	Usage:
  1016	  node scripts/schema-manager.js <command> [--debug]
  1017	
  1018	Commands:
  1019	  setup     - Show complete setup instructions
  1020	  generate  - Generate schema from current database  
  1021	  compare   - Compare schema files with database
  1022	  apply     - Apply schema changes to database
  1023	  seed      - Add initial data (categories, etc.)
  1024	  debug     - Enable debug logging
  1025	
  1026	Examples:
  1027	  node scripts/schema-manager.js setup
  1028	  node scripts/schema-manager.js compare
  1029	  node scripts/schema-manager.js apply
  1030	  node scripts/schema-manager.js seed
  1031	
  1032	Quick start:
  1033	  1. Make sure PocketBase is running
  1034	  2. Visit http://localhost:8090/_/ to create admin
  1035	  3. Run: node scripts/schema-manager.js apply
  1036	  4. Run: node scripts/schema-manager.js seed
  1037	
  1038	Output:
  1039	  üìù Full logs are saved to: output.log
  1040	        `);
  1041	    }
  1042	  } catch (error) {
  1043	    console.error('\n‚ùå Command failed:', error.message);
  1044	    manager.log(`Full error: ${JSON.stringify(error)}`, 'error');
  1045	    process.exit(1);
  1046	  } finally {
  1047	    // Always write the log file
  1048	    await manager.writeLogFile();
  1049	  }
  1050	}
  1051	
  1052	main().catch(async error => {
  1053	  console.error('\n‚ùå Script failed:', error.message);
  1054	  
  1055	  // Try to write log file even on failure
  1056	  try {
  1057	    // Create a minimal manager instance for logging
  1058	    const logManager = {
  1059	      logBuffer: [
  1060	        `FATAL ERROR: ${error.message}`,
  1061	        `STACK TRACE: ${error.stack}`,
  1062	        `COMMAND: ${process.argv.slice(2).join(' ')}`,
  1063	        `TIME: ${new Date().toISOString()}`
  1064	      ],
  1065	      outputFile: './output.log',
  1066	      startTime: new Date(),
  1067	      async writeLogFile() {
  1068	        try {
  1069	          const header = [
  1070	            '='.repeat(80),
  1071	            `SA Markets Directory - Schema Manager Log (ERROR)`,
  1072	            `Started: ${this.startTime.toISOString()}`,
  1073	            `Failed: ${new Date().toISOString()}`,
  1074	            `Command: ${process.argv.slice(2).join(' ')}`,
  1075	            '='.repeat(80),
  1076	            ''
  1077	          ];
  1078	
  1079	          const content = header.concat(this.logBuffer).join('\n');
  1080	          await fs.writeFile(this.outputFile, content);
  1081	          console.log(`üìù Error log written to: ${this.outputFile}`);
  1082	        } catch (writeError) {
  1083	          console.error('‚ùå Failed to write log file:', writeError.message);
  1084	        }
  1085	      }
  1086	    };
  1087	    
  1088	    await logManager.writeLogFile();
  1089	  } catch (logError) {
  1090	    console.error('‚ùå Failed to write error log:', logError.message);
  1091	  }
  1092	  
  1093	  process.exit(1);
  1094	});

========================================

üìÅ FILE: src/scripts/schema-validator.js
   Size: 2.7K | Modified: 2025-06-04
----------------------------------------
     1	// schema-validator.js - Run this to check for common schema issues
     2	import pb from '../lib/pocketbase.js';
     3	import fs from 'fs/promises';
     4	
     5	async function validateSchema() {
     6	  console.log('üîç Validating schema for common issues...');
     7	  
     8	  try {
     9	    // Load schema
    10	    const schemaContent = await fs.readFile('./schema/database.json', 'utf8');
    11	    const schema = JSON.parse(schemaContent);
    12	    
    13	    // Get existing collections
    14	    const existingCollections = await pb.collections.getFullList();
    15	    const existingCollectionMap = {};
    16	    existingCollections.forEach(col => {
    17	      existingCollectionMap[col.name] = col.id;
    18	    });
    19	    
    20	    console.log('üìã Existing collections:', Object.keys(existingCollectionMap));
    21	    
    22	    // Validate each collection
    23	    for (const [collectionName, collectionDef] of Object.entries(schema.collections)) {
    24	      console.log(`\nüîç Validating ${collectionName}:`);
    25	      
    26	      // Check relation fields
    27	      const relationFields = collectionDef.schema?.filter(field => field.type === 'relation');
    28	      
    29	      for (const field of relationFields || []) {
    30	        const targetCollection = field.options?.collectionId;
    31	        
    32	        if (targetCollection && !existingCollectionMap[targetCollection]) {
    33	          console.error(`‚ùå ${collectionName}.${field.name}: References non-existent collection '${targetCollection}'`);
    34	          console.log(`   Available collections: ${Object.keys(existingCollectionMap).join(', ')}`);
    35	        } else if (targetCollection) {
    36	          console.log(`‚úÖ ${collectionName}.${field.name}: Correctly references '${targetCollection}'`);
    37	        } else {
    38	          console.error(`‚ùå ${collectionName}.${field.name}: Missing collectionId in relation field`);
    39	        }
    40	      }
    41	      
    42	      // Check for common field validation issues
    43	      for (const field of collectionDef.schema || []) {
    44	        // Check select fields have values
    45	        if (field.type === 'select' && (!field.options?.values || field.options.values.length === 0)) {
    46	          console.error(`‚ùå ${collectionName}.${field.name}: Select field missing values array`);
    47	        }
    48	        
    49	        // Check file fields have proper options
    50	        if (field.type === 'file' && !field.options?.maxSelect) {
    51	          console.warn(`‚ö†Ô∏è  ${collectionName}.${field.name}: File field missing maxSelect`);
    52	        }
    53	        
    54	        // Check required fields
    55	        if (field.required === undefined) {
    56	          console.warn(`‚ö†Ô∏è  ${collectionName}.${field.name}: Required property not explicitly set`);
    57	        }
    58	      }
    59	    }
    60	    
    61	    console.log('\nüìä Validation complete!');
    62	    
    63	  } catch (error) {
    64	    console.error('‚ùå Validation failed:', error.message);
    65	  }
    66	}
    67	
    68	validateSchema();

========================================

üìÅ FILE: src/scripts/schema/database.json
   Size: 27K | Modified: 2025-06-04
----------------------------------------
     1	{
     2	  "version": "2.0.0",
     3	  "description": "SA Markets Directory - Normalized Enterprise Schema with Fixed Validation Issues",
     4	  "collections": {
     5	    "users": {
     6	      "name": "users",
     7	      "type": "auth",
     8	      "system": true,
     9	      "description": "Built-in PocketBase users collection with custom fields",
    10	      "schema": [
    11	        {
    12	          "name": "role",
    13	          "type": "select",
    14	          "required": true,
    15	          "options": {
    16	            "maxSelect": 1,
    17	            "values": [
    18	              "customer",
    19	              "stallholder", 
    20	              "organizer"
    21	            ]
    22	          },
    23	          "description": "User role in the platform"
    24	        },
    25	        {
    26	          "name": "phone",
    27	          "type": "text",
    28	          "required": false,
    29	          "options": {
    30	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
    31	          },
    32	          "description": "Australian phone number"
    33	        },
    34	        {
    35	          "name": "email_verified",
    36	          "type": "bool",
    37	          "required": false,
    38	          "description": "Email verification status"
    39	        },
    40	        {
    41	          "name": "subscription_tier",
    42	          "type": "select",
    43	          "required": false,
    44	          "options": {
    45	            "maxSelect": 1,
    46	            "values": [
    47	              "free",
    48	              "basic",
    49	              "premium",
    50	              "enterprise"
    51	            ]
    52	          },
    53	          "description": "Subscription level"
    54	        }
    55	      ],
    56	      "listRule": "id = @request.auth.id",
    57	      "viewRule": "id = @request.auth.id",
    58	      "createRule": "",
    59	      "updateRule": "id = @request.auth.id",
    60	      "deleteRule": "id = @request.auth.id"
    61	    },
    62	    "market_categories": {
    63	      "name": "market_categories",
    64	      "type": "base",
    65	      "description": "Market categorization system",
    66	      "schema": [
    67	        {
    68	          "name": "name",
    69	          "type": "text",
    70	          "required": true,
    71	          "options": {
    72	            "min": 2,
    73	            "max": 50
    74	          },
    75	          "description": "Category name"
    76	        },
    77	        {
    78	          "name": "description",
    79	          "type": "text",
    80	          "required": false,
    81	          "options": {
    82	            "max": 200
    83	          },
    84	          "description": "Category description"
    85	        },
    86	        {
    87	          "name": "color",
    88	          "type": "text",
    89	          "required": false,
    90	          "options": {
    91	            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
    92	          },
    93	          "description": "Hex color code for UI"
    94	        },
    95	        {
    96	          "name": "icon",
    97	          "type": "text",
    98	          "required": false,
    99	          "options": {
   100	            "max": 50
   101	          },
   102	          "description": "Icon identifier"
   103	        },
   104	        {
   105	          "name": "sort_order",
   106	          "type": "number",
   107	          "required": false,
   108	          "options": {
   109	            "min": 0
   110	          },
   111	          "description": "Display order"
   112	        }
   113	      ],
   114	      "listRule": "",
   115	      "viewRule": "",
   116	      "createRule": "@request.auth.role = \"organizer\"",
   117	      "updateRule": "@request.auth.role = \"organizer\"",
   118	      "deleteRule": "@request.auth.role = \"organizer\""
   119	    },
   120	    "amenity_types": {
   121	      "name": "amenity_types", 
   122	      "type": "base",
   123	      "description": "Available amenity types for markets",
   124	      "schema": [
   125	        {
   126	          "name": "name",
   127	          "type": "text",
   128	          "required": true,
   129	          "options": {
   130	            "min": 2,
   131	            "max": 50
   132	          },
   133	          "description": "Amenity name (Toilets, Parking, etc.)"
   134	        },
   135	        {
   136	          "name": "description",
   137	          "type": "text",
   138	          "required": false,
   139	          "options": {
   140	            "max": 200
   141	          },
   142	          "description": "Description of amenity"
   143	        },
   144	        {
   145	          "name": "icon",
   146	          "type": "text",
   147	          "required": false,
   148	          "options": {
   149	            "max": 50
   150	          },
   151	          "description": "Icon for UI"
   152	        },
   153	        {
   154	          "name": "category",
   155	          "type": "select",
   156	          "required": false,
   157	          "options": {
   158	            "maxSelect": 1,
   159	            "values": [
   160	              "facility",
   161	              "service", 
   162	              "accessibility"
   163	            ]
   164	          },
   165	          "description": "Amenity category"
   166	        },
   167	        {
   168	          "name": "active",
   169	          "type": "bool",
   170	          "required": false,
   171	          "description": "Is this amenity type active"
   172	        }
   173	      ],
   174	      "listRule": "",
   175	      "viewRule": "",
   176	      "createRule": "@request.auth.role = \"organizer\"",
   177	      "updateRule": "@request.auth.role = \"organizer\"",
   178	      "deleteRule": "@request.auth.role = \"organizer\""
   179	    },
   180	    "markets": {
   181	      "name": "markets",
   182	      "type": "base", 
   183	      "description": "Core market information - fully normalized",
   184	      "schema": [
   185	        {
   186	          "name": "name",
   187	          "type": "text",
   188	          "required": true,
   189	          "options": {
   190	            "min": 2,
   191	            "max": 100
   192	          },
   193	          "description": "Market name"
   194	        },
   195	        {
   196	          "name": "slug",
   197	          "type": "text",
   198	          "required": true,
   199	          "options": {
   200	            "pattern": "^[a-z0-9-]+$",
   201	            "min": 2,
   202	            "max": 100
   203	          },
   204	          "description": "URL-friendly identifier"
   205	        },
   206	        {
   207	          "name": "description",
   208	          "type": "text",
   209	          "required": false,
   210	          "options": {
   211	            "max": 2000
   212	          },
   213	          "description": "Market description"
   214	        },
   215	        {
   216	          "name": "category",
   217	          "type": "relation",
   218	          "required": true,
   219	          "options": {
   220	            "collectionId": "MARKET_CATEGORIES_ID",
   221	            "cascadeDelete": false,
   222	            "minSelect": null,
   223	            "maxSelect": 1,
   224	            "displayFields": ["name"]
   225	          },
   226	          "description": "Market category"
   227	        },
   228	        {
   229	          "name": "organizer",
   230	          "type": "relation",
   231	          "required": true,
   232	          "options": {
   233	            "collectionId": "_pb_users_auth_",
   234	            "cascadeDelete": false,
   235	            "minSelect": null,
   236	            "maxSelect": 1,
   237	            "displayFields": ["name", "email"]
   238	          },
   239	          "description": "Market organizer"
   240	        },
   241	        {
   242	          "name": "address",
   243	          "type": "text",
   244	          "required": true,
   245	          "options": {
   246	            "max": 200
   247	          },
   248	          "description": "Street address"
   249	        },
   250	        {
   251	          "name": "suburb",
   252	          "type": "text",
   253	          "required": true,
   254	          "options": {
   255	            "max": 50
   256	          },
   257	          "description": "Suburb/City"
   258	        },
   259	        {
   260	          "name": "state",
   261	          "type": "select",
   262	          "required": true,
   263	          "options": {
   264	            "maxSelect": 1,
   265	            "values": [
   266	              "SA",
   267	              "VIC", 
   268	              "NSW",
   269	              "QLD",
   270	              "WA",
   271	              "TAS",
   272	              "NT",
   273	              "ACT"
   274	            ]
   275	          },
   276	          "description": "Australian state"
   277	        },
   278	        {
   279	          "name": "postcode",
   280	          "type": "text",
   281	          "required": false,
   282	          "options": {
   283	            "pattern": "^[0-9]{4}$"
   284	          },
   285	          "description": "Australian postcode"
   286	        },
   287	        {
   288	          "name": "latitude",
   289	          "type": "number",
   290	          "required": false,
   291	          "description": "GPS latitude"
   292	        },
   293	        {
   294	          "name": "longitude",
   295	          "type": "number",
   296	          "required": false,
   297	          "description": "GPS longitude"
   298	        },
   299	        {
   300	          "name": "venue_type",
   301	          "type": "select",
   302	          "required": false,
   303	          "options": {
   304	            "maxSelect": 1,
   305	            "values": [
   306	              "outdoor",
   307	              "indoor",
   308	              "covered",
   309	              "mixed"
   310	            ]
   311	          },
   312	          "description": "Venue type"
   313	        },
   314	        {
   315	          "name": "contact_email",
   316	          "type": "email",
   317	          "required": true,
   318	          "description": "Market contact email"
   319	        },
   320	        {
   321	          "name": "contact_phone",
   322	          "type": "text",
   323	          "required": false,
   324	          "options": {
   325	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   326	          },
   327	          "description": "Market contact phone"
   328	        },
   329	        {
   330	          "name": "website",
   331	          "type": "url",
   332	          "required": false,
   333	          "description": "Market website"
   334	        },
   335	        {
   336	          "name": "social_media",
   337	          "type": "json",
   338	          "required": false,
   339	          "options": {
   340	            "maxSize": 2000000
   341	          },
   342	          "description": "Social media links"
   343	        },
   344	        {
   345	          "name": "max_stalls",
   346	          "type": "number",
   347	          "required": false,
   348	          "options": {
   349	            "min": 1
   350	          },
   351	          "description": "Maximum number of stalls"
   352	        },
   353	        {
   354	          "name": "insurance_minimum",
   355	          "type": "number",
   356	          "required": false,
   357	          "options": {
   358	            "min": 0
   359	          },
   360	          "description": "Minimum insurance coverage required"
   361	        },
   362	        {
   363	          "name": "abn_required",
   364	          "type": "bool",
   365	          "required": false,
   366	          "description": "ABN required for stallholders"
   367	        },
   368	        {
   369	          "name": "waiting_list_enabled",
   370	          "type": "bool",
   371	          "required": false,
   372	          "description": "Enable waiting list when full"
   373	        },
   374	        {
   375	          "name": "featured_image",
   376	          "type": "file",
   377	          "required": false,
   378	          "options": {
   379	            "maxSelect": 1,
   380	            "maxSize": 5242880,
   381	            "mimeTypes": [
   382	              "image/jpeg",
   383	              "image/png",
   384	              "image/webp"
   385	            ]
   386	          },
   387	          "description": "Main market image"
   388	        },
   389	        {
   390	          "name": "gallery_images",
   391	          "type": "file",
   392	          "required": false,
   393	          "options": {
   394	            "maxSelect": 10,
   395	            "maxSize": 5242880,
   396	            "mimeTypes": [
   397	              "image/jpeg",
   398	              "image/png", 
   399	              "image/webp"
   400	            ]
   401	          },
   402	          "description": "Market gallery images"
   403	        },
   404	        {
   405	          "name": "active",
   406	          "type": "bool",
   407	          "required": false,
   408	          "description": "Market is active/published"
   409	        },
   410	        {
   411	          "name": "view_count",
   412	          "type": "number",
   413	          "required": false,
   414	          "options": {
   415	            "min": 0
   416	          },
   417	          "description": "Profile view count"
   418	        },
   419	        {
   420	          "name": "favorite_count",
   421	          "type": "number",
   422	          "required": false,
   423	          "options": {
   424	            "min": 0
   425	          },
   426	          "description": "Times favorited by users"
   427	        },
   428	        {
   429	          "name": "average_rating",
   430	          "type": "number",
   431	          "required": false,
   432	          "options": {
   433	            "min": 0,
   434	            "max": 5
   435	          },
   436	          "description": "Average user rating"
   437	        },
   438	        {
   439	          "name": "total_reviews",
   440	          "type": "number",
   441	          "required": false,
   442	          "options": {
   443	            "min": 0
   444	          },
   445	          "description": "Total number of reviews"
   446	        }
   447	      ],
   448	      "listRule": "",
   449	      "viewRule": "",
   450	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"organizer\"",
   451	      "updateRule": "@request.auth.id = organizer.id",
   452	      "deleteRule": "@request.auth.id = organizer.id"
   453	    },
   454	    "market_amenities": {
   455	      "name": "market_amenities",
   456	      "type": "base",
   457	      "description": "Normalized amenities for markets",
   458	      "schema": [
   459	        {
   460	          "name": "market",
   461	          "type": "relation",
   462	          "required": true,
   463	          "options": {
   464	            "collectionId": "MARKETS_ID",
   465	            "cascadeDelete": true,
   466	            "minSelect": null,
   467	            "maxSelect": 1,
   468	            "displayFields": ["name"]
   469	          },
   470	          "description": "Related market"
   471	        },
   472	        {
   473	          "name": "amenity_type",
   474	          "type": "relation",
   475	          "required": true,
   476	          "options": {
   477	            "collectionId": "AMENITY_TYPES_ID",
   478	            "cascadeDelete": false,
   479	            "minSelect": null,
   480	            "maxSelect": 1,
   481	            "displayFields": ["name"]
   482	          },
   483	          "description": "Type of amenity"
   484	        },
   485	        {
   486	          "name": "available",
   487	          "type": "bool",
   488	          "required": false,
   489	          "description": "Is this amenity available"
   490	        },
   491	        {
   492	          "name": "notes",
   493	          "type": "text",
   494	          "required": false,
   495	          "options": {
   496	            "max": 200
   497	          },
   498	          "description": "Optional notes about this amenity"
   499	        }
   500	      ],
   501	      "listRule": "",
   502	      "viewRule": "",
   503	      "createRule": "@request.auth.id != \"\"",
   504	      "updateRule": "@request.auth.id != \"\"",
   505	      "deleteRule": "@request.auth.id != \"\""
   506	    },
   507	    "market_schedules": {
   508	      "name": "market_schedules",
   509	      "type": "base",
   510	      "description": "Advanced scheduling for markets",
   511	      "schema": [
   512	        {
   513	          "name": "market",
   514	          "type": "relation",
   515	          "required": true,
   516	          "options": {
   517	            "collectionId": "MARKETS_ID",
   518	            "cascadeDelete": true,
   519	            "minSelect": null,
   520	            "maxSelect": 1,
   521	            "displayFields": ["name"]
   522	          },
   523	          "description": "Related market"
   524	        },
   525	        {
   526	          "name": "schedule_type",
   527	          "type": "select",
   528	          "required": true,
   529	          "options": {
   530	            "maxSelect": 1,
   531	            "values": [
   532	              "regular",
   533	              "weekly_pattern",
   534	              "monthly_pattern",
   535	              "custom_dates"
   536	            ]
   537	          },
   538	          "description": "Type of schedule pattern"
   539	        },
   540	        {
   541	          "name": "schedule_data",
   542	          "type": "json",
   543	          "required": false,
   544	          "options": {
   545	            "maxSize": 2000000
   546	          },
   547	          "description": "Complex schedule patterns"
   548	        },
   549	        {
   550	          "name": "start_time",
   551	          "type": "text",
   552	          "required": false,
   553	          "options": {
   554	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   555	          },
   556	          "description": "Market start time (HH:MM)"
   557	        },
   558	        {
   559	          "name": "end_time",
   560	          "type": "text",
   561	          "required": false,
   562	          "options": {
   563	            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
   564	          },
   565	          "description": "Market end time (HH:MM)"
   566	        },
   567	        {
   568	          "name": "start_date",
   569	          "type": "date",
   570	          "required": false,
   571	          "description": "Schedule valid from"
   572	        },
   573	        {
   574	          "name": "end_date",
   575	          "type": "date",
   576	          "required": false,
   577	          "description": "Schedule valid until"
   578	        },
   579	        {
   580	          "name": "active",
   581	          "type": "bool",
   582	          "required": false,
   583	          "description": "Is this schedule active"
   584	        }
   585	      ],
   586	      "listRule": "",
   587	      "viewRule": "",
   588	      "createRule": "@request.auth.id != \"\"",
   589	      "updateRule": "@request.auth.id != \"\"",
   590	      "deleteRule": "@request.auth.id != \"\""
   591	    },
   592	    "market_fees": {
   593	      "name": "market_fees",
   594	      "type": "base",
   595	      "description": "Detailed fee structure for markets",
   596	      "schema": [
   597	        {
   598	          "name": "market",
   599	          "type": "relation",
   600	          "required": true,
   601	          "options": {
   602	            "collectionId": "MARKETS_ID",
   603	            "cascadeDelete": true,
   604	            "minSelect": null,
   605	            "maxSelect": 1,
   606	            "displayFields": ["name"]
   607	          },
   608	          "description": "Related market"
   609	        },
   610	        {
   611	          "name": "fee_type",
   612	          "type": "select",
   613	          "required": true,
   614	          "options": {
   615	            "maxSelect": 1,
   616	            "values": [
   617	              "stall_fee",
   618	              "application_fee",
   619	              "bond",
   620	              "power",
   621	              "other"
   622	            ]
   623	          },
   624	          "description": "Type of fee"
   625	        },
   626	        {
   627	          "name": "fee_name",
   628	          "type": "text",
   629	          "required": true,
   630	          "options": {
   631	            "max": 100
   632	          },
   633	          "description": "Display name for fee"
   634	        },
   635	        {
   636	          "name": "amount",
   637	          "type": "number",
   638	          "required": true,
   639	          "options": {
   640	            "min": 0
   641	          },
   642	          "description": "Fee amount"
   643	        },
   644	        {
   645	          "name": "currency",
   646	          "type": "text",
   647	          "required": false,
   648	          "options": {
   649	            "max": 3
   650	          },
   651	          "description": "Currency code (AUD)"
   652	        },
   653	        {
   654	          "name": "frequency",
   655	          "type": "select",
   656	          "required": false,
   657	          "options": {
   658	            "maxSelect": 1,
   659	            "values": [
   660	              "per_day",
   661	              "per_event",
   662	              "one_time"
   663	            ]
   664	          },
   665	          "description": "Fee frequency"
   666	        },
   667	        {
   668	          "name": "conditions",
   669	          "type": "json",
   670	          "required": false,
   671	          "options": {
   672	            "maxSize": 2000000
   673	          },
   674	          "description": "Conditions for this fee"
   675	        },
   676	        {
   677	          "name": "valid_from",
   678	          "type": "date",
   679	          "required": false,
   680	          "description": "Fee valid from date"
   681	        },
   682	        {
   683	          "name": "valid_until",
   684	          "type": "date",
   685	          "required": false,
   686	          "description": "Fee valid until date"
   687	        },
   688	        {
   689	          "name": "active",
   690	          "type": "bool",
   691	          "required": false,
   692	          "description": "Is this fee active"
   693	        }
   694	      ],
   695	      "listRule": "",
   696	      "viewRule": "",
   697	      "createRule": "@request.auth.id != \"\"",
   698	      "updateRule": "@request.auth.id != \"\"",
   699	      "deleteRule": "@request.auth.id != \"\""
   700	    },
   701	    "stallholders": {
   702	      "name": "stallholders",
   703	      "type": "base",
   704	      "description": "Stallholder business profiles",
   705	      "schema": [
   706	        {
   707	          "name": "user",
   708	          "type": "relation",
   709	          "required": true,
   710	          "options": {
   711	            "collectionId": "_pb_users_auth_",
   712	            "cascadeDelete": true,
   713	            "minSelect": null,
   714	            "maxSelect": 1,
   715	            "displayFields": ["name", "email"]
   716	          },
   717	          "description": "Associated user account"
   718	        },
   719	        {
   720	          "name": "business_name",
   721	          "type": "text",
   722	          "required": true,
   723	          "options": {
   724	            "min": 2,
   725	            "max": 100
   726	          },
   727	          "description": "Business name"
   728	        },
   729	        {
   730	          "name": "business_description",
   731	          "type": "text",
   732	          "required": false,
   733	          "options": {
   734	            "max": 1000
   735	          },
   736	          "description": "Business description"
   737	        },
   738	        {
   739	          "name": "abn",
   740	          "type": "text",
   741	          "required": false,
   742	          "options": {
   743	            "pattern": "^[0-9]{11}$"
   744	          },
   745	          "description": "Australian Business Number"
   746	        },
   747	        {
   748	          "name": "product_categories",
   749	          "type": "json",
   750	          "required": false,
   751	          "options": {
   752	            "maxSize": 2000000
   753	          },
   754	          "description": "Product categories sold"
   755	        },
   756	        {
   757	          "name": "contact_phone",
   758	          "type": "text",
   759	          "required": false,
   760	          "options": {
   761	            "pattern": "^(\\+61|0)[2-478](?:[0-9]){8}$"
   762	          },
   763	          "description": "Business contact phone"
   764	        },
   765	        {
   766	          "name": "website",
   767	          "type": "url",
   768	          "required": false,
   769	          "description": "Business website"
   770	        },
   771	        {
   772	          "name": "social_media",
   773	          "type": "json",
   774	          "required": false,
   775	          "options": {
   776	            "maxSize": 2000000
   777	          },
   778	          "description": "Social media profiles"
   779	        },
   780	        {
   781	          "name": "power_required",
   782	          "type": "bool",
   783	          "required": false,
   784	          "description": "Requires power connection"
   785	        },
   786	        {
   787	          "name": "space_requirements",
   788	          "type": "text",
   789	          "required": false,
   790	          "options": {
   791	            "max": 200
   792	          },
   793	          "description": "Space size requirements"
   794	        },
   795	        {
   796	          "name": "rating",
   797	          "type": "number",
   798	          "required": false,
   799	          "options": {
   800	            "min": 0,
   801	            "max": 5
   802	          },
   803	          "description": "Average rating"
   804	        },
   805	        {
   806	          "name": "reviews_count",
   807	          "type": "number",
   808	          "required": false,
   809	          "options": {
   810	            "min": 0
   811	          },
   812	          "description": "Total reviews"
   813	        },
   814	        {
   815	          "name": "is_verified",
   816	          "type": "bool",
   817	          "required": false,
   818	          "description": "Verified stallholder status"
   819	        },
   820	        {
   821	          "name": "subscription_tier",
   822	          "type": "select",
   823	          "required": false,
   824	          "options": {
   825	            "maxSelect": 1,
   826	            "values": [
   827	              "free",
   828	              "basic",
   829	              "premium"
   830	            ]
   831	          },
   832	          "description": "Subscription level"
   833	        }
   834	      ],
   835	      "listRule": "",
   836	      "viewRule": "",
   837	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   838	      "updateRule": "@request.auth.id = user.id",
   839	      "deleteRule": "@request.auth.id = user.id"
   840	    },
   841	    "applications": {
   842	      "name": "applications",
   843	      "type": "base",
   844	      "description": "Market applications from stallholders",
   845	      "schema": [
   846	        {
   847	          "name": "stallholder",
   848	          "type": "relation",
   849	          "required": true,
   850	          "options": {
   851	            "collectionId": "STALLHOLDERS_ID",
   852	            "cascadeDelete": true,
   853	            "minSelect": null,
   854	            "maxSelect": 1,
   855	            "displayFields": ["business_name"]
   856	          },
   857	          "description": "Applying stallholder"
   858	        },
   859	        {
   860	          "name": "market",
   861	          "type": "relation",
   862	          "required": true,
   863	          "options": {
   864	            "collectionId": "MARKETS_ID",
   865	            "cascadeDelete": true,
   866	            "minSelect": null,
   867	            "maxSelect": 1,
   868	            "displayFields": ["name"]
   869	          },
   870	          "description": "Target market"
   871	        },
   872	        {
   873	          "name": "status",
   874	          "type": "select",
   875	          "required": true,
   876	          "options": {
   877	            "maxSelect": 1,
   878	            "values": [
   879	              "pending",
   880	              "approved",
   881	              "rejected",
   882	              "waitlisted",
   883	              "cancelled"
   884	            ]
   885	          },
   886	          "description": "Application status"
   887	        },
   888	        {
   889	          "name": "application_date",
   890	          "type": "date",
   891	          "required": true,
   892	          "description": "Date of application"
   893	        },
   894	        {
   895	          "name": "requested_dates",
   896	          "type": "json",
   897	          "required": false,
   898	          "options": {
   899	            "maxSize": 2000000
   900	          },
   901	          "description": "Specific dates requested"
   902	        },
   903	        {
   904	          "name": "message",
   905	          "type": "text",
   906	          "required": false,
   907	          "options": {
   908	            "max": 1000
   909	          },
   910	          "description": "Stallholder message"
   911	        },
   912	        {
   913	          "name": "organizer_notes",
   914	          "type": "text",
   915	          "required": false,
   916	          "options": {
   917	            "max": 1000
   918	          },
   919	          "description": "Internal organizer notes"
   920	        },
   921	        {
   922	          "name": "payment_status",
   923	          "type": "select",
   924	          "required": false,
   925	          "options": {
   926	            "maxSelect": 1,
   927	            "values": [
   928	              "unpaid",
   929	              "paid",
   930	              "partial",
   931	              "refunded"
   932	            ]
   933	          },
   934	          "description": "Payment status"
   935	        },
   936	        {
   937	          "name": "payment_amount",
   938	          "type": "number",
   939	          "required": false,
   940	          "options": {
   941	            "min": 0
   942	          },
   943	          "description": "Amount paid"
   944	        },
   945	        {
   946	          "name": "stall_assignment",
   947	          "type": "text",
   948	          "required": false,
   949	          "options": {
   950	            "max": 50
   951	          },
   952	          "description": "Assigned stall location"
   953	        }
   954	      ],
   955	      "listRule": "",
   956	      "viewRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer",
   957	      "createRule": "@request.auth.id != \"\" && @request.auth.role = \"stallholder\"",
   958	      "updateRule": "@request.auth.id = market.organizer",
   959	      "deleteRule": "@request.auth.id = stallholder.user || @request.auth.id = market.organizer"
   960	    },
   961	    "reviews": {
   962	      "name": "reviews",
   963	      "type": "base",
   964	      "description": "User reviews for markets and stallholders",
   965	      "schema": [
   966	        {
   967	          "name": "reviewer",
   968	          "type": "relation",
   969	          "required": true,
   970	          "options": {
   971	            "collectionId": "_pb_users_auth_",
   972	            "cascadeDelete": false,
   973	            "minSelect": null,
   974	            "maxSelect": 1,
   975	            "displayFields": ["name"]
   976	          },
   977	          "description": "User who wrote the review"
   978	        },
   979	        {
   980	          "name": "target_type",
   981	          "type": "select",
   982	          "required": true,
   983	          "options": {
   984	            "maxSelect": 1,
   985	            "values": [
   986	              "market",
   987	              "stallholder"
   988	            ]
   989	          },
   990	          "description": "What is being reviewed"
   991	        },
   992	        {
   993	          "name": "target_id",
   994	          "type": "text",
   995	          "required": true,
   996	          "options": {
   997	            "min": 15,
   998	            "max": 15
   999	          },
  1000	          "description": "ID of the reviewed item"
  1001	        },
  1002	        {
  1003	          "name": "rating",
  1004	          "type": "number",
  1005	          "required": true,
  1006	          "options": {
  1007	            "min": 1,
  1008	            "max": 5
  1009	          },
  1010	          "description": "Rating (1-5 stars)"
  1011	        },
  1012	        {
  1013	          "name": "title",
  1014	          "type": "text",
  1015	          "required": false,
  1016	          "options": {
  1017	            "max": 100
  1018	          },
  1019	          "description": "Review title"
  1020	        },
  1021	        {
  1022	          "name": "comment",
  1023	          "type": "text",
  1024	          "required": false,
  1025	          "options": {
  1026	            "max": 1000
  1027	          },
  1028	          "description": "Review comment"
  1029	        },
  1030	        {
  1031	          "name": "helpful_votes",
  1032	          "type": "number",
  1033	          "required": false,
  1034	          "options": {
  1035	            "min": 0
  1036	          },
  1037	          "description": "Number of helpful votes"
  1038	        },
  1039	        {
  1040	          "name": "verified_purchase",
  1041	          "type": "bool",
  1042	          "required": false,
  1043	          "description": "Verified attendance/purchase"
  1044	        }
  1045	      ],
  1046	      "listRule": "",
  1047	      "viewRule": "",
  1048	      "createRule": "@request.auth.id != \"\"",
  1049	      "updateRule": "@request.auth.id = reviewer.id",
  1050	      "deleteRule": "@request.auth.id = reviewer.id"
  1051	    }
  1052	  }
  1053	}

========================================

üìÅ FILE: src/services/ApplicationService.js
   Size: 4.5K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/ApplicationService.js - Fix the import and missing methods
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class ApplicationService {
     6	  // Get applications for market organizer
     7	  async getMarketApplications(marketId, filters = {}) {
     8	    try {
     9	      const filterConditions = [`market = "${marketId}"`];
    10	      
    11	      if (filters.status) {
    12	        filterConditions.push(`status = "${filters.status}"`);
    13	      }
    14	
    15	      const result = await pb.collection('applications').getList(
    16	        filters.page || 1,
    17	        filters.perPage || 20,
    18	        {
    19	          filter: filterConditions.join(' && '),
    20	          sort: '-created',
    21	          expand: 'stallholder,stallholder.user,market'
    22	        }
    23	      );
    24	
    25	      return result;
    26	    } catch (error) {
    27	      console.error('Error fetching market applications:', error);
    28	      throw error;
    29	    }
    30	  }
    31	
    32	  // Get applications for stallholder (method that was missing)
    33	  async getStallholderApplications(stallholderId, filters = {}) {
    34	    try {
    35	      const filterConditions = [`stallholder = "${stallholderId}"`];
    36	      
    37	      if (filters.status) {
    38	        filterConditions.push(`status = "${filters.status}"`);
    39	      }
    40	
    41	      const result = await pb.collection('applications').getList(
    42	        filters.page || 1,
    43	        filters.perPage || 20,
    44	        {
    45	          filter: filterConditions.join(' && '),
    46	          sort: '-created',
    47	          expand: 'market,stallholder'
    48	        }
    49	      );
    50	
    51	      return result;
    52	    } catch (error) {
    53	      console.error('Error fetching stallholder applications:', error);
    54	      throw error;
    55	    }
    56	  }
    57	
    58	  // Submit application to market
    59	  async submitApplication(applicationData) {
    60	    try {
    61	      const application = await pb.collection('applications').create({
    62	        ...applicationData,
    63	        status: 'pending',
    64	        payment_status: 'unpaid'
    65	      });
    66	      
    67	      auditLogger.log('application_submitted', pb.authStore.model?.id, {
    68	        applicationId: application.id,
    69	        marketId: applicationData.market,
    70	        stallholderId: applicationData.stallholder
    71	      });
    72	
    73	      return application;
    74	    } catch (error) {
    75	      console.error('Error submitting application:', error);
    76	      throw error;
    77	    }
    78	  }
    79	
    80	  // Update application status
    81	  async updateApplicationStatus(applicationId, status, organizerNotes = '') {
    82	    try {
    83	      const application = await pb.collection('applications').update(applicationId, {
    84	        status,
    85	        organizer_notes: organizerNotes
    86	      });
    87	      
    88	      auditLogger.log('application_status_updated', pb.authStore.model?.id, {
    89	        applicationId,
    90	        newStatus: status
    91	      });
    92	
    93	      return application;
    94	    } catch (error) {
    95	      console.error('Error updating application status:', error);
    96	      throw error;
    97	    }
    98	  }
    99	
   100	  // Get application statistics for market
   101	  async getApplicationStats(marketId) {
   102	    try {
   103	      const applications = await pb.collection('applications').getFullList({
   104	        filter: `market = "${marketId}"`
   105	      });
   106	
   107	      const stats = {
   108	        total: applications.length,
   109	        pending: applications.filter(app => app.status === 'pending').length,
   110	        approved: applications.filter(app => app.status === 'approved').length,
   111	        rejected: applications.filter(app => app.status === 'rejected').length,
   112	        cancelled: applications.filter(app => app.status === 'cancelled').length
   113	      };
   114	
   115	      return stats;
   116	    } catch (error) {
   117	      console.error('Error fetching application stats:', error);
   118	      throw error;
   119	    }
   120	  }
   121	
   122	  // Check if stallholder has existing application for market
   123	  async checkExistingApplication(stallholderId, marketId) {
   124	    try {
   125	      const existing = await pb.collection('applications').getFirstListItem(
   126	        `stallholder = "${stallholderId}" && market = "${marketId}" && status != "cancelled" && status != "rejected"`
   127	      );
   128	      return existing;
   129	    } catch (error) {
   130	      if (error.status === 404) {
   131	        return null; // No existing application
   132	      }
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Cancel application
   138	  async cancelApplication(applicationId) {
   139	    try {
   140	      const application = await pb.collection('applications').update(applicationId, {
   141	        status: 'cancelled'
   142	      });
   143	      
   144	      auditLogger.log('application_cancelled', pb.authStore.model?.id, {
   145	        applicationId
   146	      });
   147	
   148	      return application;
   149	    } catch (error) {
   150	      console.error('Error cancelling application:', error);
   151	      throw error;
   152	    }
   153	  }
   154	}
   155	
   156	export default new ApplicationService();

========================================

üìÅ FILE: src/services/StallholderService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/StallholderService.js - Updated to fix import issues
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	import ApplicationService from './ApplicationService.js';
     5	
     6	class StallholderService {
     7	  // Get all stallholders with filtering
     8	  async getStallholders(filters = {}) {
     9	    try {
    10	      const filterConditions = ['user != ""']; // Changed from 'active = true' since we don't have that field
    11	      
    12	      if (filters.category) {
    13	        filterConditions.push(`product_categories ~ "${filters.category}"`);
    14	      }
    15	      
    16	      if (filters.state) {
    17	        filterConditions.push(`state = "${filters.state}"`);
    18	      }
    19	      
    20	      if (filters.search) {
    21	        filterConditions.push(`(business_name ~ "${filters.search}" || description ~ "${filters.search}")`);
    22	      }
    23	
    24	      if (filters.rating) {
    25	        filterConditions.push(`rating >= ${filters.rating}`);
    26	      }
    27	
    28	      if (filters.user) {
    29	        filterConditions.push(`user = "${filters.user}"`);
    30	      }
    31	
    32	      const result = await pb.collection('stallholders').getList(
    33	        filters.page || 1,
    34	        filters.perPage || 20,
    35	        {
    36	          filter: filterConditions.join(' && '),
    37	          sort: filters.sort || '-created',
    38	          expand: 'user'
    39	        }
    40	      );
    41	
    42	      return result;
    43	    } catch (error) {
    44	      console.error('Error fetching stallholders:', error);
    45	      throw error;
    46	    }
    47	  }
    48	
    49	  // Get single stallholder
    50	  async getStallholder(id) {
    51	    try {
    52	      const stallholder = await pb.collection('stallholders').getOne(id, {
    53	        expand: 'user'
    54	      });
    55	      return stallholder;
    56	    } catch (error) {
    57	      console.error('Error fetching stallholder:', error);
    58	      throw error;
    59	    }
    60	  }
    61	
    62	  // Create stallholder profile
    63	  async createStallholder(stallholderData) {
    64	    try {
    65	      const stallholder = await pb.collection('stallholders').create(stallholderData);
    66	      
    67	      auditLogger.log('stallholder_created', pb.authStore.model?.id, {
    68	        stallholderId: stallholder.id,
    69	        businessName: stallholder.business_name
    70	      });
    71	
    72	      return stallholder;
    73	    } catch (error) {
    74	      console.error('Error creating stallholder:', error);
    75	      throw error;
    76	    }
    77	  }
    78	
    79	  // Update stallholder profile
    80	  async updateStallholder(id, stallholderData) {
    81	    try {
    82	      const stallholder = await pb.collection('stallholders').update(id, stallholderData);
    83	      
    84	      auditLogger.log('stallholder_updated', pb.authStore.model?.id, {
    85	        stallholderId: id,
    86	        changes: Object.keys(stallholderData)
    87	      });
    88	
    89	      return stallholder;
    90	    } catch (error) {
    91	      console.error('Error updating stallholder:', error);
    92	      throw error;
    93	    }
    94	  }
    95	
    96	  // Get stallholder's applications - now properly delegated
    97	  async getApplications(stallholderId, filters = {}) {
    98	    return ApplicationService.getStallholderApplications(stallholderId, filters);
    99	  }
   100	
   101	  // Submit application to market - now properly delegated
   102	  async submitApplication(applicationData) {
   103	    return ApplicationService.submitApplication(applicationData);
   104	  }
   105	
   106	  // Get reviews for stallholder
   107	  async getReviews(stallholderId) {
   108	    try {
   109	      const reviews = await pb.collection('reviews').getList(1, 50, {
   110	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`,
   111	        sort: '-created',
   112	        expand: 'reviewer'
   113	      });
   114	      return reviews;
   115	    } catch (error) {
   116	      console.error('Error fetching reviews:', error);
   117	      throw error;
   118	    }
   119	  }
   120	
   121	  // Add review for stallholder
   122	  async addReview(reviewData) {
   123	    try {
   124	      const review = await pb.collection('reviews').create({
   125	        ...reviewData,
   126	        target_type: 'stallholder'
   127	      });
   128	
   129	      // Update stallholder rating
   130	      await this.updateStallholderRating(reviewData.target_id);
   131	      
   132	      auditLogger.log('review_added', pb.authStore.model?.id, {
   133	        reviewId: review.id,
   134	        targetId: reviewData.target_id,
   135	        rating: reviewData.rating
   136	      });
   137	
   138	      return review;
   139	    } catch (error) {
   140	      console.error('Error adding review:', error);
   141	      throw error;
   142	    }
   143	  }
   144	
   145	  // Update stallholder's average rating
   146	  async updateStallholderRating(stallholderId) {
   147	    try {
   148	      const reviews = await pb.collection('reviews').getFullList({
   149	        filter: `target_id = "${stallholderId}" && target_type = "stallholder"`
   150	      });
   151	
   152	      if (reviews.length === 0) return;
   153	
   154	      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
   155	      const averageRating = totalRating / reviews.length;
   156	
   157	      await pb.collection('stallholders').update(stallholderId, {
   158	        rating: Math.round(averageRating * 10) / 10, // Round to 1 decimal
   159	        reviews_count: reviews.length
   160	      });
   161	    } catch (error) {
   162	      console.error('Error updating stallholder rating:', error);
   163	    }
   164	  }
   165	
   166	  // Get product categories
   167	  async getProductCategories() {
   168	    return [
   169	      'Fresh Produce',
   170	      'Baked Goods',
   171	      'Arts & Crafts',
   172	      'Clothing & Accessories',
   173	      'Food & Beverages',
   174	      'Home & Garden',
   175	      'Beauty & Wellness',
   176	      'Books & Media',
   177	      'Vintage & Antiques',
   178	      'Handmade Jewelry',
   179	      'Plants & Flowers',
   180	      'Other'
   181	    ];
   182	  }
   183	}
   184	
   185	export default new StallholderService();

========================================

üìÅ FILE: src/services/marketService.js
   Size: 5.2K | Modified: 2025-06-02
----------------------------------------
     1	// src/services/marketService.js - Updated with better error handling
     2	import pb from '../lib/pocketbase.js';
     3	import { auditLogger } from '../utils/security.js';
     4	
     5	class MarketService {
     6	  // Get all active markets
     7	  async getMarkets(filters = {}) {
     8	    try {
     9	      const filterConditions = []; // Removed 'active = true' since the field might not exist yet
    10	      
    11	      if (filters.state) {
    12	        filterConditions.push(`state = "${filters.state}"`);
    13	      }
    14	      
    15	      if (filters.category) {
    16	        filterConditions.push(`category = "${filters.category}"`);
    17	      }
    18	      
    19	      if (filters.search) {
    20	        filterConditions.push(`(name ~ "${filters.search}" || suburb ~ "${filters.search}" || description ~ "${filters.search}")`);
    21	      }
    22	
    23	      const filterString = filterConditions.length > 0 ? filterConditions.join(' && ') : '';
    24	
    25	      const result = await pb.collection('markets').getList(
    26	        filters.page || 1,
    27	        filters.perPage || 20,
    28	        {
    29	          filter: filterString,
    30	          sort: filters.sort || '-created',
    31	          expand: 'category,organizer'
    32	        }
    33	      );
    34	
    35	      return result;
    36	    } catch (error) {
    37	      console.error('Error fetching markets:', error);
    38	      throw error;
    39	    }
    40	  }
    41	
    42	  // Get single market by ID or slug
    43	  async getMarket(idOrSlug) {
    44	    try {
    45	      const market = await pb.collection('markets').getFirstListItem(
    46	        `id = "${idOrSlug}" || slug = "${idOrSlug}"`,
    47	        {
    48	          expand: 'category,organizer'
    49	        }
    50	      );
    51	
    52	      return market;
    53	    } catch (error) {
    54	      console.error('Error fetching market:', error);
    55	      throw error;
    56	    }
    57	  }
    58	
    59	  // Create new market
    60	  async createMarket(marketData) {
    61	    try {
    62	      const market = await pb.collection('markets').create(marketData);
    63	      
    64	      auditLogger.log('market_created', pb.authStore.model?.id, {
    65	        marketId: market.id,
    66	        marketName: market.name
    67	      });
    68	
    69	      return market;
    70	    } catch (error) {
    71	      console.error('Error creating market:', error);
    72	      throw error;
    73	    }
    74	  }
    75	
    76	  // Update market
    77	  async updateMarket(id, marketData) {
    78	    try {
    79	      const market = await pb.collection('markets').update(id, marketData);
    80	      
    81	      auditLogger.log('market_updated', pb.authStore.model?.id, {
    82	        marketId: id,
    83	        changes: Object.keys(marketData)
    84	      });
    85	
    86	      return market;
    87	    } catch (error) {
    88	      console.error('Error updating market:', error);
    89	      throw error;
    90	    }
    91	  }
    92	
    93	  // Delete market
    94	  async deleteMarket(id) {
    95	    try {
    96	      await pb.collection('markets').delete(id);
    97	      
    98	      auditLogger.log('market_deleted', pb.authStore.model?.id, {
    99	        marketId: id
   100	      });
   101	
   102	      return true;
   103	    } catch (error) {
   104	      console.error('Error deleting market:', error);
   105	      throw error;
   106	    }
   107	  }
   108	
   109	  // Search markets by location (geolocation)
   110	  async searchNearby(latitude, longitude, radiusKm = 25) {
   111	    try {
   112	      // This is a simplified version - in production you'd use proper geospatial queries
   113	      const markets = await pb.collection('markets').getList(1, 50, {
   114	        filter: 'latitude != null && longitude != null',
   115	        expand: 'category'
   116	      });
   117	
   118	      // Calculate distances client-side (in production, do this server-side)
   119	      const marketsWithDistance = markets.items.map(market => {
   120	        const distance = this.calculateDistance(
   121	          latitude, longitude,
   122	          market.latitude, market.longitude
   123	        );
   124	        return { ...market, distance };
   125	      });
   126	
   127	      // Filter by radius and sort by distance
   128	      return marketsWithDistance
   129	        .filter(market => market.distance <= radiusKm)
   130	        .sort((a, b) => a.distance - b.distance);
   131	    } catch (error) {
   132	      console.error('Error searching nearby markets:', error);
   133	      throw error;
   134	    }
   135	  }
   136	
   137	  // Calculate distance between two points (Haversine formula)
   138	  calculateDistance(lat1, lon1, lat2, lon2) {
   139	    const R = 6371; // Earth's radius in kilometers
   140	    const dLat = this.deg2rad(lat2 - lat1);
   141	    const dLon = this.deg2rad(lon2 - lon1);
   142	    const a = 
   143	      Math.sin(dLat/2) * Math.sin(dLat/2) +
   144	      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * 
   145	      Math.sin(dLon/2) * Math.sin(dLon/2);
   146	    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
   147	    return R * c;
   148	  }
   149	
   150	  deg2rad(deg) {
   151	    return deg * (Math.PI/180);
   152	  }
   153	
   154	  // Get market categories - handle case where collection might not exist yet
   155	  async getCategories() {
   156	    try {
   157	      const categories = await pb.collection('market_categories').getFullList({
   158	        sort: 'name'
   159	      });
   160	      return categories;
   161	    } catch (error) {
   162	      console.error('Error fetching categories:', error);
   163	      // Return default categories if collection doesn't exist yet
   164	      return [
   165	        { id: 'farmers', name: 'Farmers Market', color: '#22c55e' },
   166	        { id: 'craft', name: 'Craft & Artisan', color: '#8b5cf6' },
   167	        { id: 'community', name: 'Community Market', color: '#3b82f6' },
   168	        { id: 'specialty', name: 'Specialty Market', color: '#f59e0b' },
   169	        { id: 'food', name: 'Food Market', color: '#ef4444' },
   170	        { id: 'vintage', name: 'Vintage & Antiques', color: '#6b7280' }
   171	      ];
   172	    }
   173	  }
   174	}
   175	
   176	export default new MarketService();

========================================

üìÅ FILE: src/utils/security.js
   Size: 4.3K | Modified: 2025-06-02
----------------------------------------
     1	// Input validation and sanitization
     2	export const validation = {
     3	  // Australian-specific validation
     4	  validateABN(abn) {
     5	    const cleanABN = abn.replace(/\s/g, '');
     6	    if (!/^\d{11}$/.test(cleanABN)) return false;
     7	    
     8	    // ABN checksum validation
     9	    const weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];
    10	    let sum = 0;
    11	    
    12	    for (let i = 0; i < 11; i++) {
    13	      sum += (parseInt(cleanABN[i]) - (i === 0 ? 1 : 0)) * weights[i];
    14	    }
    15	    
    16	    return sum % 89 === 0;
    17	  },
    18	
    19	  validateAustralianPhone(phone) {
    20	    const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
    21	    const australianPhoneRegex = /^(\+61|0)[2-478](?:[0-9]){8}$/;
    22	    return australianPhoneRegex.test(cleanPhone);
    23	  },
    24	
    25	  validatePostcode(postcode) {
    26	    return /^\d{4}$/.test(postcode);
    27	  },
    28	
    29	  validateEmail(email) {
    30	    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    31	    return emailRegex.test(email) && email.length <= 254;
    32	  },
    33	
    34	  // Password strength validation
    35	  validatePassword(password) {
    36	    const minLength = 12;
    37	    const hasUpperCase = /[A-Z]/.test(password);
    38	    const hasLowerCase = /[a-z]/.test(password);
    39	    const hasNumbers = /\d/.test(password);
    40	    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    41	    
    42	    return {
    43	      isValid: password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar,
    44	      length: password.length >= minLength,
    45	      uppercase: hasUpperCase,
    46	      lowercase: hasLowerCase,
    47	      numbers: hasNumbers,
    48	      special: hasSpecialChar,
    49	      score: [hasUpperCase, hasLowerCase, hasNumbers, hasSpecialChar, password.length >= minLength]
    50	        .filter(Boolean).length
    51	    };
    52	  }
    53	};
    54	
    55	// Data sanitization
    56	export const sanitizer = {
    57	  // Remove potentially dangerous characters
    58	  sanitizeInput(input) {
    59	    if (typeof input !== 'string') return input;
    60	    
    61	    return input
    62	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // Remove script tags
    63	      .replace(/javascript:/gi, '') // Remove javascript: URLs
    64	      .replace(/on\w+=/gi, '') // Remove event handlers
    65	      .replace(/[<>]/g, '') // Remove angle brackets
    66	      .trim();
    67	  },
    68	
    69	  // Sanitize HTML content (for descriptions, etc.)
    70	  sanitizeHTML(html) {
    71	    // In production, use a proper HTML sanitizer like DOMPurify
    72	    const allowedTags = ['p', 'br', 'strong', 'em', 'ul', 'ol', 'li', 'h1', 'h2', 'h3'];
    73	    // For now, just remove script tags and dangerous attributes
    74	    return html
    75	      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
    76	      .replace(/on\w+="[^"]*"/gi, '')
    77	      .replace(/javascript:/gi, '');
    78	  },
    79	
    80	  // Sanitize file names
    81	  sanitizeFileName(fileName) {
    82	    return fileName
    83	      .replace(/[^a-zA-Z0-9.\-_]/g, '_')
    84	      .replace(/_{2,}/g, '_')
    85	      .substr(0, 255);
    86	  }
    87	};
    88	
    89	// Rate limiting helper
    90	export const rateLimiter = {
    91	  attempts: new Map(),
    92	
    93	  isAllowed(key, limit = 5, windowMs = 15 * 60 * 1000) { // 5 attempts per 15 minutes
    94	    const now = Date.now();
    95	    const userAttempts = this.attempts.get(key) || [];
    96	    
    97	    // Remove old attempts outside the window
    98	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
    99	    
   100	    if (validAttempts.length >= limit) {
   101	      return false;
   102	    }
   103	    
   104	    // Add current attempt
   105	    validAttempts.push(now);
   106	    this.attempts.set(key, validAttempts);
   107	    
   108	    return true;
   109	  },
   110	
   111	  getRemainingAttempts(key, limit = 5, windowMs = 15 * 60 * 1000) {
   112	    const now = Date.now();
   113	    const userAttempts = this.attempts.get(key) || [];
   114	    const validAttempts = userAttempts.filter(time => now - time < windowMs);
   115	    
   116	    return Math.max(0, limit - validAttempts.length);
   117	  }
   118	};
   119	
   120	// Audit logging
   121	export const auditLogger = {
   122	  log(event, userId, details = {}) {
   123	    const auditEntry = {
   124	      event,
   125	      userId,
   126	      details,
   127	      timestamp: new Date().toISOString(),
   128	      userAgent: navigator.userAgent,
   129	      sessionId: sessionStorage.getItem('session_id') || 'no_session'
   130	    };
   131	
   132	    // In development, log to console
   133	    if (import.meta.env.VITE_ENVIRONMENT === 'development') {
   134	      console.log('AUDIT LOG:', auditEntry);
   135	    }
   136	
   137	    // Store in local storage for debugging (remove in production)
   138	    const logs = JSON.parse(localStorage.getItem('audit_logs') || '[]');
   139	    logs.push(auditEntry);
   140	    localStorage.setItem('audit_logs', JSON.stringify(logs.slice(-100))); // Keep last 100
   141	  }
   142	};

========================================


üìä COMPLETE ANALYSIS SUMMARY
=============================================
Export completed: Wed Jun  4 04:41:31 UTC 2025
Output file: codebase-export.txt
Total size: 892K
Total lines: 23127
PocketBase URL: http://localhost:8090
PocketBase analysis: ‚úÖ Included
Sample data included: false
Missing critical files: 0
Generated for: SA Markets Directory Project
=============================================
